// source: transaction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.penumbra.transaction.Action');
goog.provide('proto.penumbra.transaction.Action.ActionCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.penumbra.dex.PositionClose');
goog.require('proto.penumbra.dex.PositionOpen');
goog.require('proto.penumbra.dex.PositionRewardClaim');
goog.require('proto.penumbra.dex.PositionWithdraw');
goog.require('proto.penumbra.dex.Swap');
goog.require('proto.penumbra.dex.SwapClaim');
goog.require('proto.penumbra.ibc.IBCAction');
goog.require('proto.penumbra.ibc.ICS20Withdrawal');
goog.require('proto.penumbra.stake.Delegate');
goog.require('proto.penumbra.stake.Undelegate');
goog.require('proto.penumbra.stake.ValidatorDefinition');
goog.require('proto.penumbra.transaction.Output');
goog.require('proto.penumbra.transaction.ProposalSubmit');
goog.require('proto.penumbra.transaction.ProposalWithdraw');
goog.require('proto.penumbra.transaction.Spend');
goog.require('proto.penumbra.transaction.ValidatorVote');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.transaction.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.penumbra.transaction.Action.oneofGroups_);
};
goog.inherits(proto.penumbra.transaction.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.transaction.Action.displayName = 'proto.penumbra.transaction.Action';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.penumbra.transaction.Action.oneofGroups_ = [[1,2,3,4,5,6,16,17,18,19,20,30,31,32,34,200]];

/**
 * @enum {number}
 */
proto.penumbra.transaction.Action.ActionCase = {
  ACTION_NOT_SET: 0,
  SPEND: 1,
  OUTPUT: 2,
  DELEGATE: 3,
  UNDELEGATE: 4,
  SWAP: 5,
  SWAP_CLAIM: 6,
  VALIDATOR_DEFINITION: 16,
  IBC_ACTION: 17,
  PROPOSAL_SUBMIT: 18,
  PROPOSAL_WITHDRAW: 19,
  VALIDATOR_VOTE: 20,
  POSITION_OPEN: 30,
  POSITION_CLOSE: 31,
  POSITION_WITHDRAW: 32,
  POSITION_REWARD_CLAIM: 34,
  ICS20_WITHDRAWAL: 200
};

/**
 * @return {proto.penumbra.transaction.Action.ActionCase}
 */
proto.penumbra.transaction.Action.prototype.getActionCase = function() {
  return /** @type {proto.penumbra.transaction.Action.ActionCase} */(jspb.Message.computeOneofCase(this, proto.penumbra.transaction.Action.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.transaction.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.transaction.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.transaction.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    spend: (f = msg.getSpend()) && proto.penumbra.transaction.Spend.toObject(includeInstance, f),
    output: (f = msg.getOutput()) && proto.penumbra.transaction.Output.toObject(includeInstance, f),
    delegate: (f = msg.getDelegate()) && proto.penumbra.stake.Delegate.toObject(includeInstance, f),
    undelegate: (f = msg.getUndelegate()) && proto.penumbra.stake.Undelegate.toObject(includeInstance, f),
    swap: (f = msg.getSwap()) && proto.penumbra.dex.Swap.toObject(includeInstance, f),
    swapClaim: (f = msg.getSwapClaim()) && proto.penumbra.dex.SwapClaim.toObject(includeInstance, f),
    validatorDefinition: (f = msg.getValidatorDefinition()) && proto.penumbra.stake.ValidatorDefinition.toObject(includeInstance, f),
    ibcAction: (f = msg.getIbcAction()) && proto.penumbra.ibc.IBCAction.toObject(includeInstance, f),
    proposalSubmit: (f = msg.getProposalSubmit()) && proto.penumbra.transaction.ProposalSubmit.toObject(includeInstance, f),
    proposalWithdraw: (f = msg.getProposalWithdraw()) && proto.penumbra.transaction.ProposalWithdraw.toObject(includeInstance, f),
    validatorVote: (f = msg.getValidatorVote()) && proto.penumbra.transaction.ValidatorVote.toObject(includeInstance, f),
    positionOpen: (f = msg.getPositionOpen()) && proto.penumbra.dex.PositionOpen.toObject(includeInstance, f),
    positionClose: (f = msg.getPositionClose()) && proto.penumbra.dex.PositionClose.toObject(includeInstance, f),
    positionWithdraw: (f = msg.getPositionWithdraw()) && proto.penumbra.dex.PositionWithdraw.toObject(includeInstance, f),
    positionRewardClaim: (f = msg.getPositionRewardClaim()) && proto.penumbra.dex.PositionRewardClaim.toObject(includeInstance, f),
    ics20Withdrawal: (f = msg.getIcs20Withdrawal()) && proto.penumbra.ibc.ICS20Withdrawal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.transaction.Action}
 */
proto.penumbra.transaction.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.transaction.Action;
  return proto.penumbra.transaction.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.transaction.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.transaction.Action}
 */
proto.penumbra.transaction.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.transaction.Spend;
      reader.readMessage(value,proto.penumbra.transaction.Spend.deserializeBinaryFromReader);
      msg.setSpend(value);
      break;
    case 2:
      var value = new proto.penumbra.transaction.Output;
      reader.readMessage(value,proto.penumbra.transaction.Output.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    case 3:
      var value = new proto.penumbra.stake.Delegate;
      reader.readMessage(value,proto.penumbra.stake.Delegate.deserializeBinaryFromReader);
      msg.setDelegate(value);
      break;
    case 4:
      var value = new proto.penumbra.stake.Undelegate;
      reader.readMessage(value,proto.penumbra.stake.Undelegate.deserializeBinaryFromReader);
      msg.setUndelegate(value);
      break;
    case 5:
      var value = new proto.penumbra.dex.Swap;
      reader.readMessage(value,proto.penumbra.dex.Swap.deserializeBinaryFromReader);
      msg.setSwap(value);
      break;
    case 6:
      var value = new proto.penumbra.dex.SwapClaim;
      reader.readMessage(value,proto.penumbra.dex.SwapClaim.deserializeBinaryFromReader);
      msg.setSwapClaim(value);
      break;
    case 16:
      var value = new proto.penumbra.stake.ValidatorDefinition;
      reader.readMessage(value,proto.penumbra.stake.ValidatorDefinition.deserializeBinaryFromReader);
      msg.setValidatorDefinition(value);
      break;
    case 17:
      var value = new proto.penumbra.ibc.IBCAction;
      reader.readMessage(value,proto.penumbra.ibc.IBCAction.deserializeBinaryFromReader);
      msg.setIbcAction(value);
      break;
    case 18:
      var value = new proto.penumbra.transaction.ProposalSubmit;
      reader.readMessage(value,proto.penumbra.transaction.ProposalSubmit.deserializeBinaryFromReader);
      msg.setProposalSubmit(value);
      break;
    case 19:
      var value = new proto.penumbra.transaction.ProposalWithdraw;
      reader.readMessage(value,proto.penumbra.transaction.ProposalWithdraw.deserializeBinaryFromReader);
      msg.setProposalWithdraw(value);
      break;
    case 20:
      var value = new proto.penumbra.transaction.ValidatorVote;
      reader.readMessage(value,proto.penumbra.transaction.ValidatorVote.deserializeBinaryFromReader);
      msg.setValidatorVote(value);
      break;
    case 30:
      var value = new proto.penumbra.dex.PositionOpen;
      reader.readMessage(value,proto.penumbra.dex.PositionOpen.deserializeBinaryFromReader);
      msg.setPositionOpen(value);
      break;
    case 31:
      var value = new proto.penumbra.dex.PositionClose;
      reader.readMessage(value,proto.penumbra.dex.PositionClose.deserializeBinaryFromReader);
      msg.setPositionClose(value);
      break;
    case 32:
      var value = new proto.penumbra.dex.PositionWithdraw;
      reader.readMessage(value,proto.penumbra.dex.PositionWithdraw.deserializeBinaryFromReader);
      msg.setPositionWithdraw(value);
      break;
    case 34:
      var value = new proto.penumbra.dex.PositionRewardClaim;
      reader.readMessage(value,proto.penumbra.dex.PositionRewardClaim.deserializeBinaryFromReader);
      msg.setPositionRewardClaim(value);
      break;
    case 200:
      var value = new proto.penumbra.ibc.ICS20Withdrawal;
      reader.readMessage(value,proto.penumbra.ibc.ICS20Withdrawal.deserializeBinaryFromReader);
      msg.setIcs20Withdrawal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.transaction.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.transaction.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.transaction.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpend();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.penumbra.transaction.Spend.serializeBinaryToWriter
    );
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.penumbra.transaction.Output.serializeBinaryToWriter
    );
  }
  f = message.getDelegate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.penumbra.stake.Delegate.serializeBinaryToWriter
    );
  }
  f = message.getUndelegate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.penumbra.stake.Undelegate.serializeBinaryToWriter
    );
  }
  f = message.getSwap();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.penumbra.dex.Swap.serializeBinaryToWriter
    );
  }
  f = message.getSwapClaim();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.penumbra.dex.SwapClaim.serializeBinaryToWriter
    );
  }
  f = message.getValidatorDefinition();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.penumbra.stake.ValidatorDefinition.serializeBinaryToWriter
    );
  }
  f = message.getIbcAction();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.penumbra.ibc.IBCAction.serializeBinaryToWriter
    );
  }
  f = message.getProposalSubmit();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.penumbra.transaction.ProposalSubmit.serializeBinaryToWriter
    );
  }
  f = message.getProposalWithdraw();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.penumbra.transaction.ProposalWithdraw.serializeBinaryToWriter
    );
  }
  f = message.getValidatorVote();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.penumbra.transaction.ValidatorVote.serializeBinaryToWriter
    );
  }
  f = message.getPositionOpen();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.penumbra.dex.PositionOpen.serializeBinaryToWriter
    );
  }
  f = message.getPositionClose();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.penumbra.dex.PositionClose.serializeBinaryToWriter
    );
  }
  f = message.getPositionWithdraw();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.penumbra.dex.PositionWithdraw.serializeBinaryToWriter
    );
  }
  f = message.getPositionRewardClaim();
  if (f != null) {
    writer.writeMessage(
      34,
      f,
      proto.penumbra.dex.PositionRewardClaim.serializeBinaryToWriter
    );
  }
  f = message.getIcs20Withdrawal();
  if (f != null) {
    writer.writeMessage(
      200,
      f,
      proto.penumbra.ibc.ICS20Withdrawal.serializeBinaryToWriter
    );
  }
};


/**
 * optional Spend spend = 1;
 * @return {?proto.penumbra.transaction.Spend}
 */
proto.penumbra.transaction.Action.prototype.getSpend = function() {
  return /** @type{?proto.penumbra.transaction.Spend} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.Spend, 1));
};


/**
 * @param {?proto.penumbra.transaction.Spend|undefined} value
 * @return {!proto.penumbra.transaction.Action} returns this
*/
proto.penumbra.transaction.Action.prototype.setSpend = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.penumbra.transaction.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Action} returns this
 */
proto.penumbra.transaction.Action.prototype.clearSpend = function() {
  return this.setSpend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Action.prototype.hasSpend = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Output output = 2;
 * @return {?proto.penumbra.transaction.Output}
 */
proto.penumbra.transaction.Action.prototype.getOutput = function() {
  return /** @type{?proto.penumbra.transaction.Output} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.Output, 2));
};


/**
 * @param {?proto.penumbra.transaction.Output|undefined} value
 * @return {!proto.penumbra.transaction.Action} returns this
*/
proto.penumbra.transaction.Action.prototype.setOutput = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.penumbra.transaction.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Action} returns this
 */
proto.penumbra.transaction.Action.prototype.clearOutput = function() {
  return this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Action.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional penumbra.stake.Delegate delegate = 3;
 * @return {?proto.penumbra.stake.Delegate}
 */
proto.penumbra.transaction.Action.prototype.getDelegate = function() {
  return /** @type{?proto.penumbra.stake.Delegate} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.stake.Delegate, 3));
};


/**
 * @param {?proto.penumbra.stake.Delegate|undefined} value
 * @return {!proto.penumbra.transaction.Action} returns this
*/
proto.penumbra.transaction.Action.prototype.setDelegate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.penumbra.transaction.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Action} returns this
 */
proto.penumbra.transaction.Action.prototype.clearDelegate = function() {
  return this.setDelegate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Action.prototype.hasDelegate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional penumbra.stake.Undelegate undelegate = 4;
 * @return {?proto.penumbra.stake.Undelegate}
 */
proto.penumbra.transaction.Action.prototype.getUndelegate = function() {
  return /** @type{?proto.penumbra.stake.Undelegate} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.stake.Undelegate, 4));
};


/**
 * @param {?proto.penumbra.stake.Undelegate|undefined} value
 * @return {!proto.penumbra.transaction.Action} returns this
*/
proto.penumbra.transaction.Action.prototype.setUndelegate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.penumbra.transaction.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Action} returns this
 */
proto.penumbra.transaction.Action.prototype.clearUndelegate = function() {
  return this.setUndelegate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Action.prototype.hasUndelegate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional penumbra.dex.Swap swap = 5;
 * @return {?proto.penumbra.dex.Swap}
 */
proto.penumbra.transaction.Action.prototype.getSwap = function() {
  return /** @type{?proto.penumbra.dex.Swap} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.dex.Swap, 5));
};


/**
 * @param {?proto.penumbra.dex.Swap|undefined} value
 * @return {!proto.penumbra.transaction.Action} returns this
*/
proto.penumbra.transaction.Action.prototype.setSwap = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.penumbra.transaction.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Action} returns this
 */
proto.penumbra.transaction.Action.prototype.clearSwap = function() {
  return this.setSwap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Action.prototype.hasSwap = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional penumbra.dex.SwapClaim swap_claim = 6;
 * @return {?proto.penumbra.dex.SwapClaim}
 */
proto.penumbra.transaction.Action.prototype.getSwapClaim = function() {
  return /** @type{?proto.penumbra.dex.SwapClaim} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.dex.SwapClaim, 6));
};


/**
 * @param {?proto.penumbra.dex.SwapClaim|undefined} value
 * @return {!proto.penumbra.transaction.Action} returns this
*/
proto.penumbra.transaction.Action.prototype.setSwapClaim = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.penumbra.transaction.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Action} returns this
 */
proto.penumbra.transaction.Action.prototype.clearSwapClaim = function() {
  return this.setSwapClaim(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Action.prototype.hasSwapClaim = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional penumbra.stake.ValidatorDefinition validator_definition = 16;
 * @return {?proto.penumbra.stake.ValidatorDefinition}
 */
proto.penumbra.transaction.Action.prototype.getValidatorDefinition = function() {
  return /** @type{?proto.penumbra.stake.ValidatorDefinition} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.stake.ValidatorDefinition, 16));
};


/**
 * @param {?proto.penumbra.stake.ValidatorDefinition|undefined} value
 * @return {!proto.penumbra.transaction.Action} returns this
*/
proto.penumbra.transaction.Action.prototype.setValidatorDefinition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.penumbra.transaction.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Action} returns this
 */
proto.penumbra.transaction.Action.prototype.clearValidatorDefinition = function() {
  return this.setValidatorDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Action.prototype.hasValidatorDefinition = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional penumbra.ibc.IBCAction ibc_action = 17;
 * @return {?proto.penumbra.ibc.IBCAction}
 */
proto.penumbra.transaction.Action.prototype.getIbcAction = function() {
  return /** @type{?proto.penumbra.ibc.IBCAction} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.ibc.IBCAction, 17));
};


/**
 * @param {?proto.penumbra.ibc.IBCAction|undefined} value
 * @return {!proto.penumbra.transaction.Action} returns this
*/
proto.penumbra.transaction.Action.prototype.setIbcAction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.penumbra.transaction.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Action} returns this
 */
proto.penumbra.transaction.Action.prototype.clearIbcAction = function() {
  return this.setIbcAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Action.prototype.hasIbcAction = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional ProposalSubmit proposal_submit = 18;
 * @return {?proto.penumbra.transaction.ProposalSubmit}
 */
proto.penumbra.transaction.Action.prototype.getProposalSubmit = function() {
  return /** @type{?proto.penumbra.transaction.ProposalSubmit} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.ProposalSubmit, 18));
};


/**
 * @param {?proto.penumbra.transaction.ProposalSubmit|undefined} value
 * @return {!proto.penumbra.transaction.Action} returns this
*/
proto.penumbra.transaction.Action.prototype.setProposalSubmit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.penumbra.transaction.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Action} returns this
 */
proto.penumbra.transaction.Action.prototype.clearProposalSubmit = function() {
  return this.setProposalSubmit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Action.prototype.hasProposalSubmit = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional ProposalWithdraw proposal_withdraw = 19;
 * @return {?proto.penumbra.transaction.ProposalWithdraw}
 */
proto.penumbra.transaction.Action.prototype.getProposalWithdraw = function() {
  return /** @type{?proto.penumbra.transaction.ProposalWithdraw} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.ProposalWithdraw, 19));
};


/**
 * @param {?proto.penumbra.transaction.ProposalWithdraw|undefined} value
 * @return {!proto.penumbra.transaction.Action} returns this
*/
proto.penumbra.transaction.Action.prototype.setProposalWithdraw = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.penumbra.transaction.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Action} returns this
 */
proto.penumbra.transaction.Action.prototype.clearProposalWithdraw = function() {
  return this.setProposalWithdraw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Action.prototype.hasProposalWithdraw = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional ValidatorVote validator_vote = 20;
 * @return {?proto.penumbra.transaction.ValidatorVote}
 */
proto.penumbra.transaction.Action.prototype.getValidatorVote = function() {
  return /** @type{?proto.penumbra.transaction.ValidatorVote} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.ValidatorVote, 20));
};


/**
 * @param {?proto.penumbra.transaction.ValidatorVote|undefined} value
 * @return {!proto.penumbra.transaction.Action} returns this
*/
proto.penumbra.transaction.Action.prototype.setValidatorVote = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.penumbra.transaction.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Action} returns this
 */
proto.penumbra.transaction.Action.prototype.clearValidatorVote = function() {
  return this.setValidatorVote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Action.prototype.hasValidatorVote = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional penumbra.dex.PositionOpen position_open = 30;
 * @return {?proto.penumbra.dex.PositionOpen}
 */
proto.penumbra.transaction.Action.prototype.getPositionOpen = function() {
  return /** @type{?proto.penumbra.dex.PositionOpen} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.dex.PositionOpen, 30));
};


/**
 * @param {?proto.penumbra.dex.PositionOpen|undefined} value
 * @return {!proto.penumbra.transaction.Action} returns this
*/
proto.penumbra.transaction.Action.prototype.setPositionOpen = function(value) {
  return jspb.Message.setOneofWrapperField(this, 30, proto.penumbra.transaction.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Action} returns this
 */
proto.penumbra.transaction.Action.prototype.clearPositionOpen = function() {
  return this.setPositionOpen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Action.prototype.hasPositionOpen = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional penumbra.dex.PositionClose position_close = 31;
 * @return {?proto.penumbra.dex.PositionClose}
 */
proto.penumbra.transaction.Action.prototype.getPositionClose = function() {
  return /** @type{?proto.penumbra.dex.PositionClose} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.dex.PositionClose, 31));
};


/**
 * @param {?proto.penumbra.dex.PositionClose|undefined} value
 * @return {!proto.penumbra.transaction.Action} returns this
*/
proto.penumbra.transaction.Action.prototype.setPositionClose = function(value) {
  return jspb.Message.setOneofWrapperField(this, 31, proto.penumbra.transaction.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Action} returns this
 */
proto.penumbra.transaction.Action.prototype.clearPositionClose = function() {
  return this.setPositionClose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Action.prototype.hasPositionClose = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional penumbra.dex.PositionWithdraw position_withdraw = 32;
 * @return {?proto.penumbra.dex.PositionWithdraw}
 */
proto.penumbra.transaction.Action.prototype.getPositionWithdraw = function() {
  return /** @type{?proto.penumbra.dex.PositionWithdraw} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.dex.PositionWithdraw, 32));
};


/**
 * @param {?proto.penumbra.dex.PositionWithdraw|undefined} value
 * @return {!proto.penumbra.transaction.Action} returns this
*/
proto.penumbra.transaction.Action.prototype.setPositionWithdraw = function(value) {
  return jspb.Message.setOneofWrapperField(this, 32, proto.penumbra.transaction.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Action} returns this
 */
proto.penumbra.transaction.Action.prototype.clearPositionWithdraw = function() {
  return this.setPositionWithdraw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Action.prototype.hasPositionWithdraw = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional penumbra.dex.PositionRewardClaim position_reward_claim = 34;
 * @return {?proto.penumbra.dex.PositionRewardClaim}
 */
proto.penumbra.transaction.Action.prototype.getPositionRewardClaim = function() {
  return /** @type{?proto.penumbra.dex.PositionRewardClaim} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.dex.PositionRewardClaim, 34));
};


/**
 * @param {?proto.penumbra.dex.PositionRewardClaim|undefined} value
 * @return {!proto.penumbra.transaction.Action} returns this
*/
proto.penumbra.transaction.Action.prototype.setPositionRewardClaim = function(value) {
  return jspb.Message.setOneofWrapperField(this, 34, proto.penumbra.transaction.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Action} returns this
 */
proto.penumbra.transaction.Action.prototype.clearPositionRewardClaim = function() {
  return this.setPositionRewardClaim(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Action.prototype.hasPositionRewardClaim = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional penumbra.ibc.ICS20Withdrawal ics20_withdrawal = 200;
 * @return {?proto.penumbra.ibc.ICS20Withdrawal}
 */
proto.penumbra.transaction.Action.prototype.getIcs20Withdrawal = function() {
  return /** @type{?proto.penumbra.ibc.ICS20Withdrawal} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.ibc.ICS20Withdrawal, 200));
};


/**
 * @param {?proto.penumbra.ibc.ICS20Withdrawal|undefined} value
 * @return {!proto.penumbra.transaction.Action} returns this
*/
proto.penumbra.transaction.Action.prototype.setIcs20Withdrawal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 200, proto.penumbra.transaction.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Action} returns this
 */
proto.penumbra.transaction.Action.prototype.clearIcs20Withdrawal = function() {
  return this.setIcs20Withdrawal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Action.prototype.hasIcs20Withdrawal = function() {
  return jspb.Message.getField(this, 200) != null;
};


