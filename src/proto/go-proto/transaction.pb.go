// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: transaction.proto

package go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An authorization hash for a Penumbra transaction.
type AuthHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *AuthHash) Reset() {
	*x = AuthHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthHash) ProtoMessage() {}

func (x *AuthHash) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthHash.ProtoReflect.Descriptor instead.
func (*AuthHash) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *AuthHash) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// A Penumbra transaction.
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body *TransactionBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// The binding signature is stored separately from the transaction body that it signs.
	BindingSig []byte `protobuf:"bytes,2,opt,name=binding_sig,json=bindingSig,proto3" json:"binding_sig,omitempty"`
	// The root of some previous state of the note commitment tree, used as an anchor for all
	// ZK state transition proofs.
	Anchor *MerkleRoot `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *Transaction) GetBody() *TransactionBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Transaction) GetBindingSig() []byte {
	if x != nil {
		return x.BindingSig
	}
	return nil
}

func (x *Transaction) GetAnchor() *MerkleRoot {
	if x != nil {
		return x.Anchor
	}
	return nil
}

// The body of a transaction.
type TransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of actions (state changes) performed by this transaction.
	Actions []*Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	// The maximum height that this transaction can be included in the chain.
	//
	// If zero, there is no maximum.
	ExpiryHeight uint64 `protobuf:"varint,2,opt,name=expiry_height,json=expiryHeight,proto3" json:"expiry_height,omitempty"`
	// The chain this transaction is intended for.  Including this prevents
	// replaying a transaction on one chain onto a different chain.
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The transaction fee.
	Fee *Fee `protobuf:"bytes,4,opt,name=fee,proto3" json:"fee,omitempty"`
	// A list of clues for use with Fuzzy Message Detection.
	FmdClues []*Clue `protobuf:"bytes,5,rep,name=fmd_clues,json=fmdClues,proto3" json:"fmd_clues,omitempty"`
	// An optional encrypted memo. It will only be populated if there are
	// outputs in the actions of this transaction. 528 bytes.
	EncryptedMemo []byte `protobuf:"bytes,6,opt,name=encrypted_memo,json=encryptedMemo,proto3,oneof" json:"encrypted_memo,omitempty"`
}

func (x *TransactionBody) Reset() {
	*x = TransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBody) ProtoMessage() {}

func (x *TransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBody.ProtoReflect.Descriptor instead.
func (*TransactionBody) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionBody) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *TransactionBody) GetExpiryHeight() uint64 {
	if x != nil {
		return x.ExpiryHeight
	}
	return 0
}

func (x *TransactionBody) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *TransactionBody) GetFee() *Fee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *TransactionBody) GetFmdClues() []*Clue {
	if x != nil {
		return x.FmdClues
	}
	return nil
}

func (x *TransactionBody) GetEncryptedMemo() []byte {
	if x != nil {
		return x.EncryptedMemo
	}
	return nil
}

// A state change performed by a transaction.
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*Action_Spend
	//	*Action_Output
	//	*Action_Delegate
	//	*Action_Undelegate
	//	*Action_Swap
	//	*Action_SwapClaim
	//	*Action_ValidatorDefinition
	//	*Action_IbcAction
	//	*Action_ProposalSubmit
	//	*Action_ProposalWithdraw
	//	*Action_ValidatorVote
	//	*Action_PositionOpen
	//	*Action_PositionClose
	//	*Action_PositionWithdraw
	//	*Action_PositionRewardClaim
	//	*Action_Ics20Withdrawal
	Action isAction_Action `protobuf_oneof:"action"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{3}
}

func (m *Action) GetAction() isAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Action) GetSpend() *Spend {
	if x, ok := x.GetAction().(*Action_Spend); ok {
		return x.Spend
	}
	return nil
}

func (x *Action) GetOutput() *Output {
	if x, ok := x.GetAction().(*Action_Output); ok {
		return x.Output
	}
	return nil
}

func (x *Action) GetDelegate() *Delegate {
	if x, ok := x.GetAction().(*Action_Delegate); ok {
		return x.Delegate
	}
	return nil
}

func (x *Action) GetUndelegate() *Undelegate {
	if x, ok := x.GetAction().(*Action_Undelegate); ok {
		return x.Undelegate
	}
	return nil
}

func (x *Action) GetSwap() *Swap {
	if x, ok := x.GetAction().(*Action_Swap); ok {
		return x.Swap
	}
	return nil
}

func (x *Action) GetSwapClaim() *SwapClaim {
	if x, ok := x.GetAction().(*Action_SwapClaim); ok {
		return x.SwapClaim
	}
	return nil
}

func (x *Action) GetValidatorDefinition() *ValidatorDefinition {
	if x, ok := x.GetAction().(*Action_ValidatorDefinition); ok {
		return x.ValidatorDefinition
	}
	return nil
}

func (x *Action) GetIbcAction() *IBCAction {
	if x, ok := x.GetAction().(*Action_IbcAction); ok {
		return x.IbcAction
	}
	return nil
}

func (x *Action) GetProposalSubmit() *ProposalSubmit {
	if x, ok := x.GetAction().(*Action_ProposalSubmit); ok {
		return x.ProposalSubmit
	}
	return nil
}

func (x *Action) GetProposalWithdraw() *ProposalWithdraw {
	if x, ok := x.GetAction().(*Action_ProposalWithdraw); ok {
		return x.ProposalWithdraw
	}
	return nil
}

func (x *Action) GetValidatorVote() *ValidatorVote {
	if x, ok := x.GetAction().(*Action_ValidatorVote); ok {
		return x.ValidatorVote
	}
	return nil
}

func (x *Action) GetPositionOpen() *PositionOpen {
	if x, ok := x.GetAction().(*Action_PositionOpen); ok {
		return x.PositionOpen
	}
	return nil
}

func (x *Action) GetPositionClose() *PositionClose {
	if x, ok := x.GetAction().(*Action_PositionClose); ok {
		return x.PositionClose
	}
	return nil
}

func (x *Action) GetPositionWithdraw() *PositionWithdraw {
	if x, ok := x.GetAction().(*Action_PositionWithdraw); ok {
		return x.PositionWithdraw
	}
	return nil
}

func (x *Action) GetPositionRewardClaim() *PositionRewardClaim {
	if x, ok := x.GetAction().(*Action_PositionRewardClaim); ok {
		return x.PositionRewardClaim
	}
	return nil
}

func (x *Action) GetIcs20Withdrawal() *ICS20Withdrawal {
	if x, ok := x.GetAction().(*Action_Ics20Withdrawal); ok {
		return x.Ics20Withdrawal
	}
	return nil
}

type isAction_Action interface {
	isAction_Action()
}

type Action_Spend struct {
	Spend *Spend `protobuf:"bytes,1,opt,name=spend,proto3,oneof"`
}

type Action_Output struct {
	Output *Output `protobuf:"bytes,2,opt,name=output,proto3,oneof"`
}

type Action_Delegate struct {
	Delegate *Delegate `protobuf:"bytes,3,opt,name=delegate,proto3,oneof"`
}

type Action_Undelegate struct {
	Undelegate *Undelegate `protobuf:"bytes,4,opt,name=undelegate,proto3,oneof"`
}

type Action_Swap struct {
	Swap *Swap `protobuf:"bytes,5,opt,name=swap,proto3,oneof"`
}

type Action_SwapClaim struct {
	SwapClaim *SwapClaim `protobuf:"bytes,6,opt,name=swap_claim,json=swapClaim,proto3,oneof"`
}

type Action_ValidatorDefinition struct {
	ValidatorDefinition *ValidatorDefinition `protobuf:"bytes,16,opt,name=validator_definition,json=validatorDefinition,proto3,oneof"`
}

type Action_IbcAction struct {
	IbcAction *IBCAction `protobuf:"bytes,17,opt,name=ibc_action,json=ibcAction,proto3,oneof"`
}

type Action_ProposalSubmit struct {
	// Governance:
	ProposalSubmit *ProposalSubmit `protobuf:"bytes,18,opt,name=proposal_submit,json=proposalSubmit,proto3,oneof"`
}

type Action_ProposalWithdraw struct {
	ProposalWithdraw *ProposalWithdraw `protobuf:"bytes,19,opt,name=proposal_withdraw,json=proposalWithdraw,proto3,oneof"`
}

type Action_ValidatorVote struct {
	ValidatorVote *ValidatorVote `protobuf:"bytes,20,opt,name=validator_vote,json=validatorVote,proto3,oneof"` // DelegatorVote delegator_vote = 21;
}

type Action_PositionOpen struct {
	PositionOpen *PositionOpen `protobuf:"bytes,30,opt,name=position_open,json=positionOpen,proto3,oneof"`
}

type Action_PositionClose struct {
	PositionClose *PositionClose `protobuf:"bytes,31,opt,name=position_close,json=positionClose,proto3,oneof"`
}

type Action_PositionWithdraw struct {
	PositionWithdraw *PositionWithdraw `protobuf:"bytes,32,opt,name=position_withdraw,json=positionWithdraw,proto3,oneof"`
}

type Action_PositionRewardClaim struct {
	PositionRewardClaim *PositionRewardClaim `protobuf:"bytes,34,opt,name=position_reward_claim,json=positionRewardClaim,proto3,oneof"`
}

type Action_Ics20Withdrawal struct {
	Ics20Withdrawal *ICS20Withdrawal `protobuf:"bytes,200,opt,name=ics20_withdrawal,json=ics20Withdrawal,proto3,oneof"`
}

func (*Action_Spend) isAction_Action() {}

func (*Action_Output) isAction_Action() {}

func (*Action_Delegate) isAction_Action() {}

func (*Action_Undelegate) isAction_Action() {}

func (*Action_Swap) isAction_Action() {}

func (*Action_SwapClaim) isAction_Action() {}

func (*Action_ValidatorDefinition) isAction_Action() {}

func (*Action_IbcAction) isAction_Action() {}

func (*Action_ProposalSubmit) isAction_Action() {}

func (*Action_ProposalWithdraw) isAction_Action() {}

func (*Action_ValidatorVote) isAction_Action() {}

func (*Action_PositionOpen) isAction_Action() {}

func (*Action_PositionClose) isAction_Action() {}

func (*Action_PositionWithdraw) isAction_Action() {}

func (*Action_PositionRewardClaim) isAction_Action() {}

func (*Action_Ics20Withdrawal) isAction_Action() {}

// Spends a shielded note.
type Spend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The authorizing data for the spend, which is included in the authorization hash used for signing.
	Body *SpendBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// The spend authorization signature is effecting data.
	AuthSig *SpendAuthSignature `protobuf:"bytes,2,opt,name=auth_sig,json=authSig,proto3" json:"auth_sig,omitempty"`
	// The spend proof is effecting data.
	Proof []byte `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *Spend) Reset() {
	*x = Spend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spend) ProtoMessage() {}

func (x *Spend) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spend.ProtoReflect.Descriptor instead.
func (*Spend) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *Spend) GetBody() *SpendBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Spend) GetAuthSig() *SpendAuthSignature {
	if x != nil {
		return x.AuthSig
	}
	return nil
}

func (x *Spend) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

// The body of a spend description, containing only the "authorizing" data
// included in the authorization hash used for signing, and not the "effecting"
// data which is bound to the authorizing data by some other means.
type SpendBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A commitment to the value of the input note.
	ValueCommitment *ValueCommitment `protobuf:"bytes,1,opt,name=value_commitment,json=valueCommitment,proto3" json:"value_commitment,omitempty"`
	// The nullifier of the input note.
	Nullifier []byte `protobuf:"bytes,3,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	// The randomized validating key for the spend authorization signature.
	Rk []byte `protobuf:"bytes,4,opt,name=rk,proto3" json:"rk,omitempty"`
}

func (x *SpendBody) Reset() {
	*x = SpendBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendBody) ProtoMessage() {}

func (x *SpendBody) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendBody.ProtoReflect.Descriptor instead.
func (*SpendBody) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *SpendBody) GetValueCommitment() *ValueCommitment {
	if x != nil {
		return x.ValueCommitment
	}
	return nil
}

func (x *SpendBody) GetNullifier() []byte {
	if x != nil {
		return x.Nullifier
	}
	return nil
}

func (x *SpendBody) GetRk() []byte {
	if x != nil {
		return x.Rk
	}
	return nil
}

// Creates a new shielded note.
type Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The authorizing data for the output.
	Body *OutputBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// The output proof is effecting data.
	Proof []byte `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *Output) Reset() {
	*x = Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{6}
}

func (x *Output) GetBody() *OutputBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Output) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

// The body of an output description, containing only the "authorizing" data
// included in the authorization hash used for signing, and not the "effecting"
// data which is bound to the authorizing data by some other means.
type OutputBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimal data required to scan and process the new output note.
	NotePayload *NotePayload `protobuf:"bytes,1,opt,name=note_payload,json=notePayload,proto3" json:"note_payload,omitempty"`
	// A commitment to the value of the output note. 32 bytes.
	ValueCommitment *ValueCommitment `protobuf:"bytes,2,opt,name=value_commitment,json=valueCommitment,proto3" json:"value_commitment,omitempty"`
	// An encrypted key for decrypting the memo.
	WrappedMemoKey []byte `protobuf:"bytes,3,opt,name=wrapped_memo_key,json=wrappedMemoKey,proto3" json:"wrapped_memo_key,omitempty"`
	// The key material used for note encryption, wrapped in encryption to the
	// sender's outgoing viewing key. 80 bytes.
	OvkWrappedKey []byte `protobuf:"bytes,4,opt,name=ovk_wrapped_key,json=ovkWrappedKey,proto3" json:"ovk_wrapped_key,omitempty"`
}

func (x *OutputBody) Reset() {
	*x = OutputBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputBody) ProtoMessage() {}

func (x *OutputBody) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputBody.ProtoReflect.Descriptor instead.
func (*OutputBody) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{7}
}

func (x *OutputBody) GetNotePayload() *NotePayload {
	if x != nil {
		return x.NotePayload
	}
	return nil
}

func (x *OutputBody) GetValueCommitment() *ValueCommitment {
	if x != nil {
		return x.ValueCommitment
	}
	return nil
}

func (x *OutputBody) GetWrappedMemoKey() []byte {
	if x != nil {
		return x.WrappedMemoKey
	}
	return nil
}

func (x *OutputBody) GetOvkWrappedKey() []byte {
	if x != nil {
		return x.OvkWrappedKey
	}
	return nil
}

type ProposalSubmit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The proposal to be submitted.
	Proposal *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// The ephemeral transparent refund address for the refund of the proposal deposit.
	DepositRefundAddress *Address `protobuf:"bytes,2,opt,name=deposit_refund_address,json=depositRefundAddress,proto3" json:"deposit_refund_address,omitempty"`
	// The amount of the proposal deposit.
	DepositAmount uint64 `protobuf:"varint,3,opt,name=deposit_amount,json=depositAmount,proto3" json:"deposit_amount,omitempty"`
	// The randomized proposer key (a randomization of the proposer's spend verification key).
	Rk []byte `protobuf:"bytes,4,opt,name=rk,proto3" json:"rk,omitempty"`
}

func (x *ProposalSubmit) Reset() {
	*x = ProposalSubmit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalSubmit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalSubmit) ProtoMessage() {}

func (x *ProposalSubmit) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalSubmit.ProtoReflect.Descriptor instead.
func (*ProposalSubmit) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{8}
}

func (x *ProposalSubmit) GetProposal() *Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *ProposalSubmit) GetDepositRefundAddress() *Address {
	if x != nil {
		return x.DepositRefundAddress
	}
	return nil
}

func (x *ProposalSubmit) GetDepositAmount() uint64 {
	if x != nil {
		return x.DepositAmount
	}
	return 0
}

func (x *ProposalSubmit) GetRk() []byte {
	if x != nil {
		return x.Rk
	}
	return nil
}

type ProposalWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The body of the proposal withdraw message.
	Body *ProposalWithdrawBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// The signature with the randomized proposer key of the withdrawal.
	AuthSig *SpendAuthSignature `protobuf:"bytes,2,opt,name=auth_sig,json=authSig,proto3" json:"auth_sig,omitempty"`
}

func (x *ProposalWithdraw) Reset() {
	*x = ProposalWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalWithdraw) ProtoMessage() {}

func (x *ProposalWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalWithdraw.ProtoReflect.Descriptor instead.
func (*ProposalWithdraw) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{9}
}

func (x *ProposalWithdraw) GetBody() *ProposalWithdrawBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *ProposalWithdraw) GetAuthSig() *SpendAuthSignature {
	if x != nil {
		return x.AuthSig
	}
	return nil
}

type ProposalWithdrawBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The proposal to be withdrawn.
	Proposal uint64 `protobuf:"varint,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// The reason for the proposal being withdrawn.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ProposalWithdrawBody) Reset() {
	*x = ProposalWithdrawBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalWithdrawBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalWithdrawBody) ProtoMessage() {}

func (x *ProposalWithdrawBody) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalWithdrawBody.ProtoReflect.Descriptor instead.
func (*ProposalWithdrawBody) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{10}
}

func (x *ProposalWithdrawBody) GetProposal() uint64 {
	if x != nil {
		return x.Proposal
	}
	return 0
}

func (x *ProposalWithdrawBody) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ValidatorVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The authorizing data for the vote.
	Body *ValidatorVoteBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// The vote authorization signature is effecting data.
	AuthSig *SpendAuthSignature `protobuf:"bytes,2,opt,name=auth_sig,json=authSig,proto3" json:"auth_sig,omitempty"`
}

func (x *ValidatorVote) Reset() {
	*x = ValidatorVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorVote) ProtoMessage() {}

func (x *ValidatorVote) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorVote.ProtoReflect.Descriptor instead.
func (*ValidatorVote) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{11}
}

func (x *ValidatorVote) GetBody() *ValidatorVoteBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *ValidatorVote) GetAuthSig() *SpendAuthSignature {
	if x != nil {
		return x.AuthSig
	}
	return nil
}

type ValidatorVoteBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The proposal being voted on.
	Proposal uint64 `protobuf:"varint,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// The vote.
	Vote *Vote `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
	// The validator identity.
	IdentityKey *IdentityKey `protobuf:"bytes,3,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	// The validator governance key.
	GovernanceKey *GovernanceKey `protobuf:"bytes,4,opt,name=governance_key,json=governanceKey,proto3" json:"governance_key,omitempty"`
}

func (x *ValidatorVoteBody) Reset() {
	*x = ValidatorVoteBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorVoteBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorVoteBody) ProtoMessage() {}

func (x *ValidatorVoteBody) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorVoteBody.ProtoReflect.Descriptor instead.
func (*ValidatorVoteBody) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{12}
}

func (x *ValidatorVoteBody) GetProposal() uint64 {
	if x != nil {
		return x.Proposal
	}
	return 0
}

func (x *ValidatorVoteBody) GetVote() *Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

func (x *ValidatorVoteBody) GetIdentityKey() *IdentityKey {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

func (x *ValidatorVoteBody) GetGovernanceKey() *GovernanceKey {
	if x != nil {
		return x.GovernanceKey
	}
	return nil
}

type DelegatorVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The authorizing data for the vote, which is included in the authorization hash used for signing.
	Body *DelegatorVoteBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// The vote authorization signature is effecting data.
	AuthSig *SpendAuthSignature `protobuf:"bytes,2,opt,name=auth_sig,json=authSig,proto3" json:"auth_sig,omitempty"`
	// The vote proof is effecting data.
	Proof []byte `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *DelegatorVote) Reset() {
	*x = DelegatorVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatorVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatorVote) ProtoMessage() {}

func (x *DelegatorVote) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatorVote.ProtoReflect.Descriptor instead.
func (*DelegatorVote) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{13}
}

func (x *DelegatorVote) GetBody() *DelegatorVoteBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *DelegatorVote) GetAuthSig() *SpendAuthSignature {
	if x != nil {
		return x.AuthSig
	}
	return nil
}

func (x *DelegatorVote) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

type DelegatorVoteBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The proposal being voted on.
	Proposal uint64 `protobuf:"varint,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// The nullifier of the input note.
	Nullifier []byte `protobuf:"bytes,3,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	// The randomized validating key for the spend authorization signature.
	Rk []byte `protobuf:"bytes,4,opt,name=rk,proto3" json:"rk,omitempty"`
	// A commitment to the value voted for "yes".
	//
	// A rational voter will place all their voting weight on one vote.
	YesValueCommitment *ValueCommitment `protobuf:"bytes,5,opt,name=yes_value_commitment,json=yesValueCommitment,proto3" json:"yes_value_commitment,omitempty"`
	// A commitment to the value voted for "no".
	//
	// A rational voter will place all their voting weight on one vote.
	NoValueCommitment *ValueCommitment `protobuf:"bytes,6,opt,name=no_value_commitment,json=noValueCommitment,proto3" json:"no_value_commitment,omitempty"`
	// A commitment to the value voted for "abstain".
	//
	// A rational voter will place all their voting weight on one vote.
	AbstainValueCommitment *ValueCommitment `protobuf:"bytes,7,opt,name=abstain_value_commitment,json=abstainValueCommitment,proto3" json:"abstain_value_commitment,omitempty"`
	// A commitment to the value voted for "no with veto".
	//
	// A rational voter will place all their voting weight on one vote.
	NoWithVetoValueCommitment *ValueCommitment `protobuf:"bytes,8,opt,name=no_with_veto_value_commitment,json=noWithVetoValueCommitment,proto3" json:"no_with_veto_value_commitment,omitempty"`
}

func (x *DelegatorVoteBody) Reset() {
	*x = DelegatorVoteBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatorVoteBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatorVoteBody) ProtoMessage() {}

func (x *DelegatorVoteBody) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatorVoteBody.ProtoReflect.Descriptor instead.
func (*DelegatorVoteBody) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{14}
}

func (x *DelegatorVoteBody) GetProposal() uint64 {
	if x != nil {
		return x.Proposal
	}
	return 0
}

func (x *DelegatorVoteBody) GetNullifier() []byte {
	if x != nil {
		return x.Nullifier
	}
	return nil
}

func (x *DelegatorVoteBody) GetRk() []byte {
	if x != nil {
		return x.Rk
	}
	return nil
}

func (x *DelegatorVoteBody) GetYesValueCommitment() *ValueCommitment {
	if x != nil {
		return x.YesValueCommitment
	}
	return nil
}

func (x *DelegatorVoteBody) GetNoValueCommitment() *ValueCommitment {
	if x != nil {
		return x.NoValueCommitment
	}
	return nil
}

func (x *DelegatorVoteBody) GetAbstainValueCommitment() *ValueCommitment {
	if x != nil {
		return x.AbstainValueCommitment
	}
	return nil
}

func (x *DelegatorVoteBody) GetNoWithVetoValueCommitment() *ValueCommitment {
	if x != nil {
		return x.NoWithVetoValueCommitment
	}
	return nil
}

// The data required to authorize a transaction plan.
type AuthorizationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The computed auth hash for the approved transaction plan.
	AuthHash *AuthHash `protobuf:"bytes,1,opt,name=auth_hash,json=authHash,proto3" json:"auth_hash,omitempty"`
	// The required spend authorizations, returned in the same order as the
	// Spend actions in the original request.
	SpendAuths []*SpendAuthSignature `protobuf:"bytes,2,rep,name=spend_auths,json=spendAuths,proto3" json:"spend_auths,omitempty"`
	// The required withdraw proposal authorizations, returned in the same order as the
	// ProposalWithdraw actions in the original request.
	WithdrawProposalAuths []*SpendAuthSignature `protobuf:"bytes,3,rep,name=withdraw_proposal_auths,json=withdrawProposalAuths,proto3" json:"withdraw_proposal_auths,omitempty"`
}

func (x *AuthorizationData) Reset() {
	*x = AuthorizationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationData) ProtoMessage() {}

func (x *AuthorizationData) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationData.ProtoReflect.Descriptor instead.
func (*AuthorizationData) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{15}
}

func (x *AuthorizationData) GetAuthHash() *AuthHash {
	if x != nil {
		return x.AuthHash
	}
	return nil
}

func (x *AuthorizationData) GetSpendAuths() []*SpendAuthSignature {
	if x != nil {
		return x.SpendAuths
	}
	return nil
}

func (x *AuthorizationData) GetWithdrawProposalAuths() []*SpendAuthSignature {
	if x != nil {
		return x.WithdrawProposalAuths
	}
	return nil
}

// The data required for proving when building a transaction from a plan.
type WitnessData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The anchor for the state transition proofs.
	Anchor *MerkleRoot `protobuf:"bytes,1,opt,name=anchor,proto3" json:"anchor,omitempty"`
	// The auth paths for the notes the transaction spends, in the
	// same order as the spends in the transaction plan.
	NoteCommitmentProofs []*NoteCommitmentProof `protobuf:"bytes,2,rep,name=note_commitment_proofs,json=noteCommitmentProofs,proto3" json:"note_commitment_proofs,omitempty"`
}

func (x *WitnessData) Reset() {
	*x = WitnessData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WitnessData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WitnessData) ProtoMessage() {}

func (x *WitnessData) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WitnessData.ProtoReflect.Descriptor instead.
func (*WitnessData) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{16}
}

func (x *WitnessData) GetAnchor() *MerkleRoot {
	if x != nil {
		return x.Anchor
	}
	return nil
}

func (x *WitnessData) GetNoteCommitmentProofs() []*NoteCommitmentProof {
	if x != nil {
		return x.NoteCommitmentProofs
	}
	return nil
}

// Describes a planned transaction.
type TransactionPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions      []*ActionPlan `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	ExpiryHeight uint64        `protobuf:"varint,2,opt,name=expiry_height,json=expiryHeight,proto3" json:"expiry_height,omitempty"`
	ChainId      string        `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Fee          *Fee          `protobuf:"bytes,4,opt,name=fee,proto3" json:"fee,omitempty"`
	CluePlans    []*CluePlan   `protobuf:"bytes,5,rep,name=clue_plans,json=cluePlans,proto3" json:"clue_plans,omitempty"`
	MemoPlan     *MemoPlan     `protobuf:"bytes,6,opt,name=memo_plan,json=memoPlan,proto3" json:"memo_plan,omitempty"`
}

func (x *TransactionPlan) Reset() {
	*x = TransactionPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPlan) ProtoMessage() {}

func (x *TransactionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPlan.ProtoReflect.Descriptor instead.
func (*TransactionPlan) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{17}
}

func (x *TransactionPlan) GetActions() []*ActionPlan {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *TransactionPlan) GetExpiryHeight() uint64 {
	if x != nil {
		return x.ExpiryHeight
	}
	return 0
}

func (x *TransactionPlan) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *TransactionPlan) GetFee() *Fee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *TransactionPlan) GetCluePlans() []*CluePlan {
	if x != nil {
		return x.CluePlans
	}
	return nil
}

func (x *TransactionPlan) GetMemoPlan() *MemoPlan {
	if x != nil {
		return x.MemoPlan
	}
	return nil
}

// Describes a planned transaction action.
//
// Some transaction Actions don't have any private data and are treated as being plans
// themselves.
type ActionPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*ActionPlan_Spend
	//	*ActionPlan_Output
	//	*ActionPlan_Delegate
	//	*ActionPlan_Undelegate
	//	*ActionPlan_ValidatorDefinition
	//	*ActionPlan_IbcAction
	//	*ActionPlan_ProposalSubmit
	//	*ActionPlan_ProposalWithdraw
	//	*ActionPlan_ValidatorVote
	//	*ActionPlan_DelegatorVote
	//	*ActionPlan_PositionOpen
	//	*ActionPlan_PositionClose
	//	*ActionPlan_PositionWithdraw
	//	*ActionPlan_PositionRewardClaim
	//	*ActionPlan_Swap
	//	*ActionPlan_SwapClaim
	Action isActionPlan_Action `protobuf_oneof:"action"`
}

func (x *ActionPlan) Reset() {
	*x = ActionPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionPlan) ProtoMessage() {}

func (x *ActionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionPlan.ProtoReflect.Descriptor instead.
func (*ActionPlan) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{18}
}

func (m *ActionPlan) GetAction() isActionPlan_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ActionPlan) GetSpend() *SpendPlan {
	if x, ok := x.GetAction().(*ActionPlan_Spend); ok {
		return x.Spend
	}
	return nil
}

func (x *ActionPlan) GetOutput() *OutputPlan {
	if x, ok := x.GetAction().(*ActionPlan_Output); ok {
		return x.Output
	}
	return nil
}

func (x *ActionPlan) GetDelegate() *Delegate {
	if x, ok := x.GetAction().(*ActionPlan_Delegate); ok {
		return x.Delegate
	}
	return nil
}

func (x *ActionPlan) GetUndelegate() *Undelegate {
	if x, ok := x.GetAction().(*ActionPlan_Undelegate); ok {
		return x.Undelegate
	}
	return nil
}

func (x *ActionPlan) GetValidatorDefinition() *ValidatorDefinition {
	if x, ok := x.GetAction().(*ActionPlan_ValidatorDefinition); ok {
		return x.ValidatorDefinition
	}
	return nil
}

func (x *ActionPlan) GetIbcAction() *IBCAction {
	if x, ok := x.GetAction().(*ActionPlan_IbcAction); ok {
		return x.IbcAction
	}
	return nil
}

func (x *ActionPlan) GetProposalSubmit() *ProposalSubmit {
	if x, ok := x.GetAction().(*ActionPlan_ProposalSubmit); ok {
		return x.ProposalSubmit
	}
	return nil
}

func (x *ActionPlan) GetProposalWithdraw() *ProposalWithdrawPlan {
	if x, ok := x.GetAction().(*ActionPlan_ProposalWithdraw); ok {
		return x.ProposalWithdraw
	}
	return nil
}

func (x *ActionPlan) GetValidatorVote() *ValidatorVote {
	if x, ok := x.GetAction().(*ActionPlan_ValidatorVote); ok {
		return x.ValidatorVote
	}
	return nil
}

func (x *ActionPlan) GetDelegatorVote() *DelegatorVotePlan {
	if x, ok := x.GetAction().(*ActionPlan_DelegatorVote); ok {
		return x.DelegatorVote
	}
	return nil
}

func (x *ActionPlan) GetPositionOpen() *PositionOpen {
	if x, ok := x.GetAction().(*ActionPlan_PositionOpen); ok {
		return x.PositionOpen
	}
	return nil
}

func (x *ActionPlan) GetPositionClose() *PositionClose {
	if x, ok := x.GetAction().(*ActionPlan_PositionClose); ok {
		return x.PositionClose
	}
	return nil
}

func (x *ActionPlan) GetPositionWithdraw() *PositionWithdraw {
	if x, ok := x.GetAction().(*ActionPlan_PositionWithdraw); ok {
		return x.PositionWithdraw
	}
	return nil
}

func (x *ActionPlan) GetPositionRewardClaim() *PositionRewardClaim {
	if x, ok := x.GetAction().(*ActionPlan_PositionRewardClaim); ok {
		return x.PositionRewardClaim
	}
	return nil
}

func (x *ActionPlan) GetSwap() *SwapPlan {
	if x, ok := x.GetAction().(*ActionPlan_Swap); ok {
		return x.Swap
	}
	return nil
}

func (x *ActionPlan) GetSwapClaim() *SwapClaimPlan {
	if x, ok := x.GetAction().(*ActionPlan_SwapClaim); ok {
		return x.SwapClaim
	}
	return nil
}

type isActionPlan_Action interface {
	isActionPlan_Action()
}

type ActionPlan_Spend struct {
	Spend *SpendPlan `protobuf:"bytes,1,opt,name=spend,proto3,oneof"`
}

type ActionPlan_Output struct {
	Output *OutputPlan `protobuf:"bytes,2,opt,name=output,proto3,oneof"`
}

type ActionPlan_Delegate struct {
	// We don't need any extra information (yet) to understand delegations,
	// because we don't yet use flow encryption.
	Delegate *Delegate `protobuf:"bytes,3,opt,name=delegate,proto3,oneof"`
}

type ActionPlan_Undelegate struct {
	// We don't need any extra information (yet) to understand undelegations,
	// because we don't yet use flow encryption.
	Undelegate *Undelegate `protobuf:"bytes,4,opt,name=undelegate,proto3,oneof"`
}

type ActionPlan_ValidatorDefinition struct {
	// This is just a message relayed to the chain.
	ValidatorDefinition *ValidatorDefinition `protobuf:"bytes,16,opt,name=validator_definition,json=validatorDefinition,proto3,oneof"`
}

type ActionPlan_IbcAction struct {
	// This is just a message relayed to the chain.
	IbcAction *IBCAction `protobuf:"bytes,17,opt,name=ibc_action,json=ibcAction,proto3,oneof"`
}

type ActionPlan_ProposalSubmit struct {
	// Governance:
	ProposalSubmit *ProposalSubmit `protobuf:"bytes,18,opt,name=proposal_submit,json=proposalSubmit,proto3,oneof"`
}

type ActionPlan_ProposalWithdraw struct {
	ProposalWithdraw *ProposalWithdrawPlan `protobuf:"bytes,19,opt,name=proposal_withdraw,json=proposalWithdraw,proto3,oneof"`
}

type ActionPlan_ValidatorVote struct {
	ValidatorVote *ValidatorVote `protobuf:"bytes,20,opt,name=validator_vote,json=validatorVote,proto3,oneof"`
}

type ActionPlan_DelegatorVote struct {
	DelegatorVote *DelegatorVotePlan `protobuf:"bytes,21,opt,name=delegator_vote,json=delegatorVote,proto3,oneof"`
}

type ActionPlan_PositionOpen struct {
	PositionOpen *PositionOpen `protobuf:"bytes,30,opt,name=position_open,json=positionOpen,proto3,oneof"`
}

type ActionPlan_PositionClose struct {
	PositionClose *PositionClose `protobuf:"bytes,31,opt,name=position_close,json=positionClose,proto3,oneof"`
}

type ActionPlan_PositionWithdraw struct {
	PositionWithdraw *PositionWithdraw `protobuf:"bytes,32,opt,name=position_withdraw,json=positionWithdraw,proto3,oneof"`
}

type ActionPlan_PositionRewardClaim struct {
	PositionRewardClaim *PositionRewardClaim `protobuf:"bytes,34,opt,name=position_reward_claim,json=positionRewardClaim,proto3,oneof"`
}

type ActionPlan_Swap struct {
	Swap *SwapPlan `protobuf:"bytes,40,opt,name=swap,proto3,oneof"`
}

type ActionPlan_SwapClaim struct {
	SwapClaim *SwapClaimPlan `protobuf:"bytes,41,opt,name=swap_claim,json=swapClaim,proto3,oneof"`
}

func (*ActionPlan_Spend) isActionPlan_Action() {}

func (*ActionPlan_Output) isActionPlan_Action() {}

func (*ActionPlan_Delegate) isActionPlan_Action() {}

func (*ActionPlan_Undelegate) isActionPlan_Action() {}

func (*ActionPlan_ValidatorDefinition) isActionPlan_Action() {}

func (*ActionPlan_IbcAction) isActionPlan_Action() {}

func (*ActionPlan_ProposalSubmit) isActionPlan_Action() {}

func (*ActionPlan_ProposalWithdraw) isActionPlan_Action() {}

func (*ActionPlan_ValidatorVote) isActionPlan_Action() {}

func (*ActionPlan_DelegatorVote) isActionPlan_Action() {}

func (*ActionPlan_PositionOpen) isActionPlan_Action() {}

func (*ActionPlan_PositionClose) isActionPlan_Action() {}

func (*ActionPlan_PositionWithdraw) isActionPlan_Action() {}

func (*ActionPlan_PositionRewardClaim) isActionPlan_Action() {}

func (*ActionPlan_Swap) isActionPlan_Action() {}

func (*ActionPlan_SwapClaim) isActionPlan_Action() {}

// Describes a plan for forming a `Clue`.
type CluePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address.
	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The random seed to use for the clue plan.
	Rseed []byte `protobuf:"bytes,2,opt,name=rseed,proto3" json:"rseed,omitempty"`
	// The bits of precision.
	PrecisionBits uint64 `protobuf:"varint,3,opt,name=precision_bits,json=precisionBits,proto3" json:"precision_bits,omitempty"`
}

func (x *CluePlan) Reset() {
	*x = CluePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CluePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CluePlan) ProtoMessage() {}

func (x *CluePlan) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CluePlan.ProtoReflect.Descriptor instead.
func (*CluePlan) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{19}
}

func (x *CluePlan) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CluePlan) GetRseed() []byte {
	if x != nil {
		return x.Rseed
	}
	return nil
}

func (x *CluePlan) GetPrecisionBits() uint64 {
	if x != nil {
		return x.PrecisionBits
	}
	return 0
}

// Describes a plan for forming a `Memo`.
type MemoPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The plaintext.
	Plaintext []byte `protobuf:"bytes,1,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	// The key to use to encrypt the memo.
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *MemoPlan) Reset() {
	*x = MemoPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoPlan) ProtoMessage() {}

func (x *MemoPlan) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoPlan.ProtoReflect.Descriptor instead.
func (*MemoPlan) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{20}
}

func (x *MemoPlan) GetPlaintext() []byte {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

func (x *MemoPlan) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type SpendPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The plaintext note we plan to spend.
	Note *Note `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	// The position of the note we plan to spend.
	Position uint64 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	// The randomizer to use for the spend.
	Randomizer []byte `protobuf:"bytes,3,opt,name=randomizer,proto3" json:"randomizer,omitempty"`
	// The blinding factor to use for the value commitment.
	ValueBlinding []byte `protobuf:"bytes,4,opt,name=value_blinding,json=valueBlinding,proto3" json:"value_blinding,omitempty"`
}

func (x *SpendPlan) Reset() {
	*x = SpendPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendPlan) ProtoMessage() {}

func (x *SpendPlan) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendPlan.ProtoReflect.Descriptor instead.
func (*SpendPlan) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{21}
}

func (x *SpendPlan) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *SpendPlan) GetPosition() uint64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *SpendPlan) GetRandomizer() []byte {
	if x != nil {
		return x.Randomizer
	}
	return nil
}

func (x *SpendPlan) GetValueBlinding() []byte {
	if x != nil {
		return x.ValueBlinding
	}
	return nil
}

type OutputPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value to send to this output.
	Value *Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// The destination address to send it to.
	DestAddress *Address `protobuf:"bytes,2,opt,name=dest_address,json=destAddress,proto3" json:"dest_address,omitempty"`
	// The blinding factor to use for the new note.
	NoteBlinding []byte `protobuf:"bytes,3,opt,name=note_blinding,json=noteBlinding,proto3" json:"note_blinding,omitempty"`
	// The blinding factor to use for the value commitment.
	ValueBlinding []byte `protobuf:"bytes,4,opt,name=value_blinding,json=valueBlinding,proto3" json:"value_blinding,omitempty"`
	// The ephemeral secret key to use for the note encryption.
	Esk []byte `protobuf:"bytes,5,opt,name=esk,proto3" json:"esk,omitempty"`
}

func (x *OutputPlan) Reset() {
	*x = OutputPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputPlan) ProtoMessage() {}

func (x *OutputPlan) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputPlan.ProtoReflect.Descriptor instead.
func (*OutputPlan) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{22}
}

func (x *OutputPlan) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *OutputPlan) GetDestAddress() *Address {
	if x != nil {
		return x.DestAddress
	}
	return nil
}

func (x *OutputPlan) GetNoteBlinding() []byte {
	if x != nil {
		return x.NoteBlinding
	}
	return nil
}

func (x *OutputPlan) GetValueBlinding() []byte {
	if x != nil {
		return x.ValueBlinding
	}
	return nil
}

func (x *OutputPlan) GetEsk() []byte {
	if x != nil {
		return x.Esk
	}
	return nil
}

type SwapPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The plaintext version of the swap to be performed.
	SwapPlaintext *SwapPlaintext `protobuf:"bytes,1,opt,name=swap_plaintext,json=swapPlaintext,proto3" json:"swap_plaintext,omitempty"`
	// The blinding factor for the fee commitment. The fee in the SwapPlan is private to prevent linkability with the SwapClaim.
	FeeBlinding []byte `protobuf:"bytes,5,opt,name=fee_blinding,json=feeBlinding,proto3" json:"fee_blinding,omitempty"`
	// The blinding factor to use for the new swap NFT note.
	NoteBlinding []byte `protobuf:"bytes,7,opt,name=note_blinding,json=noteBlinding,proto3" json:"note_blinding,omitempty"`
	// The ephemeral secret key to use for the swap NFT note encryption.
	Esk []byte `protobuf:"bytes,8,opt,name=esk,proto3" json:"esk,omitempty"`
}

func (x *SwapPlan) Reset() {
	*x = SwapPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapPlan) ProtoMessage() {}

func (x *SwapPlan) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapPlan.ProtoReflect.Descriptor instead.
func (*SwapPlan) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{23}
}

func (x *SwapPlan) GetSwapPlaintext() *SwapPlaintext {
	if x != nil {
		return x.SwapPlaintext
	}
	return nil
}

func (x *SwapPlan) GetFeeBlinding() []byte {
	if x != nil {
		return x.FeeBlinding
	}
	return nil
}

func (x *SwapPlan) GetNoteBlinding() []byte {
	if x != nil {
		return x.NoteBlinding
	}
	return nil
}

func (x *SwapPlan) GetEsk() []byte {
	if x != nil {
		return x.Esk
	}
	return nil
}

type SwapClaimPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The input swap NFT note to be spent.
	SwapNftNote *Note `protobuf:"bytes,1,opt,name=swap_nft_note,json=swapNftNote,proto3" json:"swap_nft_note,omitempty"`
	// The position of the input swap NFT note.
	SwapNftPosition uint64 `protobuf:"varint,2,opt,name=swap_nft_position,json=swapNftPosition,proto3" json:"swap_nft_position,omitempty"`
	// The plaintext version of the swap to be performed.
	SwapPlaintext *SwapPlaintext `protobuf:"bytes,3,opt,name=swap_plaintext,json=swapPlaintext,proto3" json:"swap_plaintext,omitempty"`
	// Input and output amounts for the Swap.
	OutputData *BatchSwapOutputData `protobuf:"bytes,11,opt,name=output_data,json=outputData,proto3" json:"output_data,omitempty"`
	// The blinding factor used for the first output note.
	Output_1Blinding []byte `protobuf:"bytes,15,opt,name=output_1_blinding,json=output1Blinding,proto3" json:"output_1_blinding,omitempty"`
	// The blinding factor used for the second output note.
	Output_2Blinding []byte `protobuf:"bytes,16,opt,name=output_2_blinding,json=output2Blinding,proto3" json:"output_2_blinding,omitempty"`
	// The ephemeral secret key used for the first output note encryption.
	Esk_1 []byte `protobuf:"bytes,17,opt,name=esk_1,json=esk1,proto3" json:"esk_1,omitempty"`
	// The ephemeral secret key used for the second output note encryption.
	Esk_2 []byte `protobuf:"bytes,18,opt,name=esk_2,json=esk2,proto3" json:"esk_2,omitempty"`
	// The epoch duration when the swap claim took place.
	EpochDuration uint64 `protobuf:"varint,20,opt,name=epoch_duration,json=epochDuration,proto3" json:"epoch_duration,omitempty"`
}

func (x *SwapClaimPlan) Reset() {
	*x = SwapClaimPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapClaimPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapClaimPlan) ProtoMessage() {}

func (x *SwapClaimPlan) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapClaimPlan.ProtoReflect.Descriptor instead.
func (*SwapClaimPlan) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{24}
}

func (x *SwapClaimPlan) GetSwapNftNote() *Note {
	if x != nil {
		return x.SwapNftNote
	}
	return nil
}

func (x *SwapClaimPlan) GetSwapNftPosition() uint64 {
	if x != nil {
		return x.SwapNftPosition
	}
	return 0
}

func (x *SwapClaimPlan) GetSwapPlaintext() *SwapPlaintext {
	if x != nil {
		return x.SwapPlaintext
	}
	return nil
}

func (x *SwapClaimPlan) GetOutputData() *BatchSwapOutputData {
	if x != nil {
		return x.OutputData
	}
	return nil
}

func (x *SwapClaimPlan) GetOutput_1Blinding() []byte {
	if x != nil {
		return x.Output_1Blinding
	}
	return nil
}

func (x *SwapClaimPlan) GetOutput_2Blinding() []byte {
	if x != nil {
		return x.Output_2Blinding
	}
	return nil
}

func (x *SwapClaimPlan) GetEsk_1() []byte {
	if x != nil {
		return x.Esk_1
	}
	return nil
}

func (x *SwapClaimPlan) GetEsk_2() []byte {
	if x != nil {
		return x.Esk_2
	}
	return nil
}

func (x *SwapClaimPlan) GetEpochDuration() uint64 {
	if x != nil {
		return x.EpochDuration
	}
	return 0
}

type ProposalWithdrawPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The body of the proposal withdrawal.
	Body *ProposalWithdrawBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// The randomizer to use for signing the proposal withdrawal.
	Randomizer []byte `protobuf:"bytes,2,opt,name=randomizer,proto3" json:"randomizer,omitempty"`
}

func (x *ProposalWithdrawPlan) Reset() {
	*x = ProposalWithdrawPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalWithdrawPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalWithdrawPlan) ProtoMessage() {}

func (x *ProposalWithdrawPlan) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalWithdrawPlan.ProtoReflect.Descriptor instead.
func (*ProposalWithdrawPlan) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{25}
}

func (x *ProposalWithdrawPlan) GetBody() *ProposalWithdrawBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *ProposalWithdrawPlan) GetRandomizer() []byte {
	if x != nil {
		return x.Randomizer
	}
	return nil
}

type DelegatorVotePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The proposal to vote on.
	Proposal uint64 `protobuf:"varint,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// The vote to cast.
	Vote *Vote `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
	// The delegation note to prove that we can vote.
	StakedNote *Note `protobuf:"bytes,3,opt,name=staked_note,json=stakedNote,proto3" json:"staked_note,omitempty"`
	// The position of that delegation note.
	Position uint64 `protobuf:"varint,4,opt,name=position,proto3" json:"position,omitempty"`
	// The randomizer to use for the proof of spend capability.
	Randomizer []byte `protobuf:"bytes,5,opt,name=randomizer,proto3" json:"randomizer,omitempty"`
}

func (x *DelegatorVotePlan) Reset() {
	*x = DelegatorVotePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatorVotePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatorVotePlan) ProtoMessage() {}

func (x *DelegatorVotePlan) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatorVotePlan.ProtoReflect.Descriptor instead.
func (*DelegatorVotePlan) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{26}
}

func (x *DelegatorVotePlan) GetProposal() uint64 {
	if x != nil {
		return x.Proposal
	}
	return 0
}

func (x *DelegatorVotePlan) GetVote() *Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

func (x *DelegatorVotePlan) GetStakedNote() *Note {
	if x != nil {
		return x.StakedNote
	}
	return nil
}

func (x *DelegatorVotePlan) GetPosition() uint64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *DelegatorVotePlan) GetRandomizer() []byte {
	if x != nil {
		return x.Randomizer
	}
	return nil
}

// A proposal to be voted upon.
type Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// A natural-language description of the effect of the proposal and its justification.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The payload of the proposal.
	Payload *Proposal_Payload `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

func (x *Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{27}
}

func (x *Proposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Proposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Proposal) GetPayload() *Proposal_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The kind of the proposal and details relevant only to that kind of proposal.
type Proposal_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*Proposal_Payload_Signaling
	//	*Proposal_Payload_Emergency
	//	*Proposal_Payload_ParameterChange
	//	*Proposal_Payload_DaoSpend
	Payload isProposal_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *Proposal_Payload) Reset() {
	*x = Proposal_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal_Payload) ProtoMessage() {}

func (x *Proposal_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal_Payload.ProtoReflect.Descriptor instead.
func (*Proposal_Payload) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{27, 0}
}

func (m *Proposal_Payload) GetPayload() isProposal_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Proposal_Payload) GetSignaling() *Proposal_Signaling {
	if x, ok := x.GetPayload().(*Proposal_Payload_Signaling); ok {
		return x.Signaling
	}
	return nil
}

func (x *Proposal_Payload) GetEmergency() *Proposal_Emergency {
	if x, ok := x.GetPayload().(*Proposal_Payload_Emergency); ok {
		return x.Emergency
	}
	return nil
}

func (x *Proposal_Payload) GetParameterChange() *Proposal_ParameterChange {
	if x, ok := x.GetPayload().(*Proposal_Payload_ParameterChange); ok {
		return x.ParameterChange
	}
	return nil
}

func (x *Proposal_Payload) GetDaoSpend() *Proposal_DaoSpend {
	if x, ok := x.GetPayload().(*Proposal_Payload_DaoSpend); ok {
		return x.DaoSpend
	}
	return nil
}

type isProposal_Payload_Payload interface {
	isProposal_Payload_Payload()
}

type Proposal_Payload_Signaling struct {
	// A signaling proposal.
	Signaling *Proposal_Signaling `protobuf:"bytes,2,opt,name=signaling,proto3,oneof"`
}

type Proposal_Payload_Emergency struct {
	// An emergency proposal.
	Emergency *Proposal_Emergency `protobuf:"bytes,3,opt,name=emergency,proto3,oneof"`
}

type Proposal_Payload_ParameterChange struct {
	// A parameter change proposal.
	ParameterChange *Proposal_ParameterChange `protobuf:"bytes,4,opt,name=parameter_change,json=parameterChange,proto3,oneof"`
}

type Proposal_Payload_DaoSpend struct {
	// A DAO spend proposal.
	DaoSpend *Proposal_DaoSpend `protobuf:"bytes,5,opt,name=dao_spend,json=daoSpend,proto3,oneof"`
}

func (*Proposal_Payload_Signaling) isProposal_Payload_Payload() {}

func (*Proposal_Payload_Emergency) isProposal_Payload_Payload() {}

func (*Proposal_Payload_ParameterChange) isProposal_Payload_Payload() {}

func (*Proposal_Payload_DaoSpend) isProposal_Payload_Payload() {}

// It optionally contains a reference to a commit which contains code to upgrade the chain.
type Proposal_Signaling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The commit to be voted upon, if any is relevant.
	Commit *string `protobuf:"bytes,1,opt,name=commit,proto3,oneof" json:"commit,omitempty"`
}

func (x *Proposal_Signaling) Reset() {
	*x = Proposal_Signaling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal_Signaling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal_Signaling) ProtoMessage() {}

func (x *Proposal_Signaling) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal_Signaling.ProtoReflect.Descriptor instead.
func (*Proposal_Signaling) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{27, 1}
}

func (x *Proposal_Signaling) GetCommit() string {
	if x != nil && x.Commit != nil {
		return *x.Commit
	}
	return ""
}

// An emergency proposal can be passed instantaneously by a 2/3 majority of validators, without
// waiting for the voting period to expire.
//
// If the boolean `halt_chain` is set to `true`, then the chain will halt immediately when the
// proposal is passed.
type Proposal_Emergency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If `true`, the chain will halt immediately when the proposal is passed.
	HaltChain bool `protobuf:"varint,1,opt,name=halt_chain,json=haltChain,proto3" json:"halt_chain,omitempty"`
}

func (x *Proposal_Emergency) Reset() {
	*x = Proposal_Emergency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal_Emergency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal_Emergency) ProtoMessage() {}

func (x *Proposal_Emergency) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal_Emergency.ProtoReflect.Descriptor instead.
func (*Proposal_Emergency) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{27, 2}
}

func (x *Proposal_Emergency) GetHaltChain() bool {
	if x != nil {
		return x.HaltChain
	}
	return false
}

// A parameter change proposal describes an alteration to one or more chain parameters, which
// should take effect at a particular block height `effective_height` (which should be at least
// the height when the proposal would be passed).
type Proposal_ParameterChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The height at which the change should take effect.
	EffectiveHeight uint64 `protobuf:"varint,1,opt,name=effective_height,json=effectiveHeight,proto3" json:"effective_height,omitempty"`
	// The set of changes to chain parameters.
	NewParameters []*Proposal_ParameterChange_SetParameter `protobuf:"bytes,2,rep,name=new_parameters,json=newParameters,proto3" json:"new_parameters,omitempty"`
}

func (x *Proposal_ParameterChange) Reset() {
	*x = Proposal_ParameterChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal_ParameterChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal_ParameterChange) ProtoMessage() {}

func (x *Proposal_ParameterChange) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal_ParameterChange.ProtoReflect.Descriptor instead.
func (*Proposal_ParameterChange) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{27, 3}
}

func (x *Proposal_ParameterChange) GetEffectiveHeight() uint64 {
	if x != nil {
		return x.EffectiveHeight
	}
	return 0
}

func (x *Proposal_ParameterChange) GetNewParameters() []*Proposal_ParameterChange_SetParameter {
	if x != nil {
		return x.NewParameters
	}
	return nil
}

// A DAO spend proposal describes zero or more transactions to execute on behalf of the DAO, with
// access to its funds, and zero or more scheduled transactions from previous passed proposals to
// cancel.
type Proposal_DaoSpend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sequence of transactions to schedule for execution.
	ScheduleTransactions []*Proposal_DaoSpend_ScheduleTransaction `protobuf:"bytes,1,rep,name=schedule_transactions,json=scheduleTransactions,proto3" json:"schedule_transactions,omitempty"`
	// A sequence of previously-scheduled transactions to cancel before they are executed.
	CancelTransactions []*Proposal_DaoSpend_CancelTransaction `protobuf:"bytes,2,rep,name=cancel_transactions,json=cancelTransactions,proto3" json:"cancel_transactions,omitempty"`
}

func (x *Proposal_DaoSpend) Reset() {
	*x = Proposal_DaoSpend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal_DaoSpend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal_DaoSpend) ProtoMessage() {}

func (x *Proposal_DaoSpend) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal_DaoSpend.ProtoReflect.Descriptor instead.
func (*Proposal_DaoSpend) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{27, 4}
}

func (x *Proposal_DaoSpend) GetScheduleTransactions() []*Proposal_DaoSpend_ScheduleTransaction {
	if x != nil {
		return x.ScheduleTransactions
	}
	return nil
}

func (x *Proposal_DaoSpend) GetCancelTransactions() []*Proposal_DaoSpend_CancelTransaction {
	if x != nil {
		return x.CancelTransactions
	}
	return nil
}

// A single change to an individual chain parameter.
type Proposal_ParameterChange_SetParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the parameter.
	Parameter string `protobuf:"bytes,1,opt,name=parameter,proto3" json:"parameter,omitempty"`
	// Its new value, as a string (this will be parsed as appropriate for the parameter's type).
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Proposal_ParameterChange_SetParameter) Reset() {
	*x = Proposal_ParameterChange_SetParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal_ParameterChange_SetParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal_ParameterChange_SetParameter) ProtoMessage() {}

func (x *Proposal_ParameterChange_SetParameter) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal_ParameterChange_SetParameter.ProtoReflect.Descriptor instead.
func (*Proposal_ParameterChange_SetParameter) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{27, 3, 0}
}

func (x *Proposal_ParameterChange_SetParameter) GetParameter() string {
	if x != nil {
		return x.Parameter
	}
	return ""
}

func (x *Proposal_ParameterChange_SetParameter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// A transaction to be executed as a consequence of this proposal.
//
// It is permissible for there to be duplicate transactions scheduled for a given height; they
// will both be executed.
type Proposal_DaoSpend_ScheduleTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The height at which the transaction should be executed.
	ExecuteAtHeight uint64 `protobuf:"varint,1,opt,name=execute_at_height,json=executeAtHeight,proto3" json:"execute_at_height,omitempty"`
	// The transaction to be executed.
	Transaction *TransactionPlan `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *Proposal_DaoSpend_ScheduleTransaction) Reset() {
	*x = Proposal_DaoSpend_ScheduleTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal_DaoSpend_ScheduleTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal_DaoSpend_ScheduleTransaction) ProtoMessage() {}

func (x *Proposal_DaoSpend_ScheduleTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal_DaoSpend_ScheduleTransaction.ProtoReflect.Descriptor instead.
func (*Proposal_DaoSpend_ScheduleTransaction) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{27, 4, 0}
}

func (x *Proposal_DaoSpend_ScheduleTransaction) GetExecuteAtHeight() uint64 {
	if x != nil {
		return x.ExecuteAtHeight
	}
	return 0
}

func (x *Proposal_DaoSpend_ScheduleTransaction) GetTransaction() *TransactionPlan {
	if x != nil {
		return x.Transaction
	}
	return nil
}

// A transaction to be canceled as a consequence of this proposal.
//
// If there are multiple duplicate transactions at the height, this cancels only the first.
// To cancel more of them, specify duplicate cancellations.
type Proposal_DaoSpend_CancelTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The height for which the transaction was scheduled.
	ScheduledAtHeight uint64 `protobuf:"varint,1,opt,name=scheduled_at_height,json=scheduledAtHeight,proto3" json:"scheduled_at_height,omitempty"`
	// The auth hash of the transaction to cancel.
	AuthHash *AuthHash `protobuf:"bytes,2,opt,name=auth_hash,json=authHash,proto3" json:"auth_hash,omitempty"`
}

func (x *Proposal_DaoSpend_CancelTransaction) Reset() {
	*x = Proposal_DaoSpend_CancelTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal_DaoSpend_CancelTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal_DaoSpend_CancelTransaction) ProtoMessage() {}

func (x *Proposal_DaoSpend_CancelTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal_DaoSpend_CancelTransaction.ProtoReflect.Descriptor instead.
func (*Proposal_DaoSpend_CancelTransaction) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{27, 4, 1}
}

func (x *Proposal_DaoSpend_CancelTransaction) GetScheduledAtHeight() uint64 {
	if x != nil {
		return x.ScheduledAtHeight
	}
	return 0
}

func (x *Proposal_DaoSpend_CancelTransaction) GetAuthHash() *AuthHash {
	if x != nil {
		return x.AuthHash
	}
	return nil
}

var File_transaction_proto protoreflect.FileDescriptor

var file_transaction_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x69, 0x62, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x09, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x20, 0x0a, 0x08,
	0x41, 0x75, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x9e,
	0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22,
	0xa4, 0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x66,
	0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x03,
	0x66, 0x65, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x66, 0x6d, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x66,
	0x6d, 0x64, 0x43, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x22, 0xe1, 0x08, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x36,
	0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x55, 0x6e, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65,
	0x78, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00, 0x52, 0x04, 0x73, 0x77, 0x61, 0x70, 0x12, 0x38,
	0x0a, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65,
	0x78, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x73,
	0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x58, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x62, 0x63, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x49, 0x42, 0x43, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x09, 0x69, 0x62, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x4c, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f,
	0x74, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x57, 0x0a, 0x15, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00, 0x52, 0x13,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x12, 0x4b, 0x0a, 0x10, 0x69, 0x63, 0x73, 0x32, 0x30, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x49, 0x43,
	0x53, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x0f, 0x69, 0x63, 0x73, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x05, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x3e, 0x0a, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22,
	0x86, 0x01, 0x0a, 0x09, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x4b, 0x0a,
	0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75,
	0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e,
	0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x72, 0x6b, 0x22, 0x54, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0xec,
	0x01, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3f, 0x0a,
	0x0c, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4b,
	0x0a, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4d, 0x65,
	0x6d, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x76, 0x6b, 0x5f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x6f, 0x76, 0x6b, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x22, 0xd3, 0x01,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x12, 0x3a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x16,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x14, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x72, 0x6b, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x3e, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x3e, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65,
	0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x07, 0x61, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x22, 0x4a, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x12, 0x3e, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74,
	0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68,
	0x53, 0x69, 0x67, 0x22, 0xe6, 0x01, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x67,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x04,
	0x76, 0x6f, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x0e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x67,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x22, 0xa2, 0x01, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x3e, 0x0a, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x53, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x22, 0xc3, 0x03, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x56,
	0x6f, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x72,
	0x6b, 0x12, 0x52, 0x0a, 0x14, 0x79, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x12, 0x79, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x6e, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x18, 0x61, 0x62, 0x73, 0x74, 0x61,
	0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x61, 0x62, 0x73,
	0x74, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x1d, 0x6e, 0x6f, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76,
	0x65, 0x74, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x19, 0x6e, 0x6f,
	0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x74, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xf3, 0x01, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x73,
	0x12, 0x5b, 0x0a, 0x17, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x15, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x73, 0x22, 0x9e, 0x01,
	0x0a, 0x0b, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x12, 0x5a, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x22, 0xb1,
	0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x46, 0x65,
	0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x65, 0x6d, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x50, 0x6c,
	0x61, 0x6e, 0x22, 0x8e, 0x09, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x50, 0x6c, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x3c,
	0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x14,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x62, 0x63, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x49, 0x42, 0x43, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x62, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4f, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x12, 0x59, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x4c, 0x0a, 0x0e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64,
	0x65, 0x78, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x48,
	0x00, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x44, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x48, 0x00, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x57, 0x0a, 0x15, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64,
	0x65, 0x78, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00, 0x52, 0x13, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x34, 0x0a,
	0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x73,
	0x77, 0x61, 0x70, 0x12, 0x44, 0x0a, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x08, 0x43, 0x6c, 0x75, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x32, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x72, 0x73, 0x65, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x73,
	0x22, 0x3a, 0x0a, 0x08, 0x4d, 0x65, 0x6d, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x99, 0x01, 0x0a,
	0x09, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xd5, 0x01, 0x0a, 0x0a, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x65, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65, 0x73, 0x6b,
	0x22, 0xa8, 0x01, 0x0a, 0x08, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x42, 0x0a,
	0x0e, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x62, 0x6c, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6e, 0x6f, 0x74,
	0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x73, 0x6b,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65, 0x73, 0x6b, 0x22, 0xa7, 0x03, 0x0a, 0x0d,
	0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x39, 0x0a,
	0x0d, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x0b, 0x73, 0x77, 0x61,
	0x70, 0x4e, 0x66, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x4e, 0x66, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x77, 0x61, 0x70,
	0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x50,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x31, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x31,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x32, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x32, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x73, 0x6b, 0x5f, 0x31, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x65, 0x73, 0x6b, 0x31, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x73, 0x6b,
	0x5f, 0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x65, 0x73, 0x6b, 0x32, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x3e, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x22, 0xd2, 0x01,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12,
	0x2d, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x36,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x72, 0x22, 0x97, 0x0a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xcd, 0x02, 0x0a, 0x07, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x48, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12,
	0x48, 0x0a, 0x09, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x09,
	0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x5b, 0x0a, 0x10, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x61, 0x6f, 0x5f, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x2e, 0x44, 0x61, 0x6f, 0x53, 0x70, 0x65,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x6f, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x33, 0x0a, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x1a, 0x2a,
	0x0a, 0x09, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x68,
	0x61, 0x6c, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x68, 0x61, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0xe4, 0x01, 0x0a, 0x0f, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x62, 0x0a, 0x0e, 0x6e, 0x65, 0x77,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0d,
	0x6e, 0x65, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x42, 0x0a,
	0x0c, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0xf8, 0x03, 0x0a, 0x08, 0x44, 0x61, 0x6f, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x70,
	0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x2e, 0x44, 0x61,
	0x6f, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x6a, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x2e, 0x44, 0x61,
	0x6f, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x8a, 0x01, 0x0a,
	0x13, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f,
	0x61, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x47, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x80, 0x01, 0x0a, 0x11, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x3b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x42, 0x32, 0x5a, 0x30,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2d, 0x7a, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transaction_proto_rawDescOnce sync.Once
	file_transaction_proto_rawDescData = file_transaction_proto_rawDesc
)

func file_transaction_proto_rawDescGZIP() []byte {
	file_transaction_proto_rawDescOnce.Do(func() {
		file_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_transaction_proto_rawDescData)
	})
	return file_transaction_proto_rawDescData
}

var file_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_transaction_proto_goTypes = []interface{}{
	(*AuthHash)(nil),                              // 0: penumbra.transaction.AuthHash
	(*Transaction)(nil),                           // 1: penumbra.transaction.Transaction
	(*TransactionBody)(nil),                       // 2: penumbra.transaction.TransactionBody
	(*Action)(nil),                                // 3: penumbra.transaction.Action
	(*Spend)(nil),                                 // 4: penumbra.transaction.Spend
	(*SpendBody)(nil),                             // 5: penumbra.transaction.SpendBody
	(*Output)(nil),                                // 6: penumbra.transaction.Output
	(*OutputBody)(nil),                            // 7: penumbra.transaction.OutputBody
	(*ProposalSubmit)(nil),                        // 8: penumbra.transaction.ProposalSubmit
	(*ProposalWithdraw)(nil),                      // 9: penumbra.transaction.ProposalWithdraw
	(*ProposalWithdrawBody)(nil),                  // 10: penumbra.transaction.ProposalWithdrawBody
	(*ValidatorVote)(nil),                         // 11: penumbra.transaction.ValidatorVote
	(*ValidatorVoteBody)(nil),                     // 12: penumbra.transaction.ValidatorVoteBody
	(*DelegatorVote)(nil),                         // 13: penumbra.transaction.DelegatorVote
	(*DelegatorVoteBody)(nil),                     // 14: penumbra.transaction.DelegatorVoteBody
	(*AuthorizationData)(nil),                     // 15: penumbra.transaction.AuthorizationData
	(*WitnessData)(nil),                           // 16: penumbra.transaction.WitnessData
	(*TransactionPlan)(nil),                       // 17: penumbra.transaction.TransactionPlan
	(*ActionPlan)(nil),                            // 18: penumbra.transaction.ActionPlan
	(*CluePlan)(nil),                              // 19: penumbra.transaction.CluePlan
	(*MemoPlan)(nil),                              // 20: penumbra.transaction.MemoPlan
	(*SpendPlan)(nil),                             // 21: penumbra.transaction.SpendPlan
	(*OutputPlan)(nil),                            // 22: penumbra.transaction.OutputPlan
	(*SwapPlan)(nil),                              // 23: penumbra.transaction.SwapPlan
	(*SwapClaimPlan)(nil),                         // 24: penumbra.transaction.SwapClaimPlan
	(*ProposalWithdrawPlan)(nil),                  // 25: penumbra.transaction.ProposalWithdrawPlan
	(*DelegatorVotePlan)(nil),                     // 26: penumbra.transaction.DelegatorVotePlan
	(*Proposal)(nil),                              // 27: penumbra.transaction.Proposal
	(*Proposal_Payload)(nil),                      // 28: penumbra.transaction.Proposal.Payload
	(*Proposal_Signaling)(nil),                    // 29: penumbra.transaction.Proposal.Signaling
	(*Proposal_Emergency)(nil),                    // 30: penumbra.transaction.Proposal.Emergency
	(*Proposal_ParameterChange)(nil),              // 31: penumbra.transaction.Proposal.ParameterChange
	(*Proposal_DaoSpend)(nil),                     // 32: penumbra.transaction.Proposal.DaoSpend
	(*Proposal_ParameterChange_SetParameter)(nil), // 33: penumbra.transaction.Proposal.ParameterChange.SetParameter
	(*Proposal_DaoSpend_ScheduleTransaction)(nil), // 34: penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction
	(*Proposal_DaoSpend_CancelTransaction)(nil),   // 35: penumbra.transaction.Proposal.DaoSpend.CancelTransaction
	(*MerkleRoot)(nil),                            // 36: penumbra.crypto.MerkleRoot
	(*Fee)(nil),                                   // 37: penumbra.crypto.Fee
	(*Clue)(nil),                                  // 38: penumbra.crypto.Clue
	(*Delegate)(nil),                              // 39: penumbra.stake.Delegate
	(*Undelegate)(nil),                            // 40: penumbra.stake.Undelegate
	(*Swap)(nil),                                  // 41: penumbra.dex.Swap
	(*SwapClaim)(nil),                             // 42: penumbra.dex.SwapClaim
	(*ValidatorDefinition)(nil),                   // 43: penumbra.stake.ValidatorDefinition
	(*IBCAction)(nil),                             // 44: penumbra.ibc.IBCAction
	(*PositionOpen)(nil),                          // 45: penumbra.dex.PositionOpen
	(*PositionClose)(nil),                         // 46: penumbra.dex.PositionClose
	(*PositionWithdraw)(nil),                      // 47: penumbra.dex.PositionWithdraw
	(*PositionRewardClaim)(nil),                   // 48: penumbra.dex.PositionRewardClaim
	(*ICS20Withdrawal)(nil),                       // 49: penumbra.ibc.ICS20Withdrawal
	(*SpendAuthSignature)(nil),                    // 50: penumbra.crypto.SpendAuthSignature
	(*ValueCommitment)(nil),                       // 51: penumbra.crypto.ValueCommitment
	(*NotePayload)(nil),                           // 52: penumbra.crypto.NotePayload
	(*Address)(nil),                               // 53: penumbra.crypto.Address
	(*Vote)(nil),                                  // 54: penumbra.governance.Vote
	(*IdentityKey)(nil),                           // 55: penumbra.crypto.IdentityKey
	(*GovernanceKey)(nil),                         // 56: penumbra.crypto.GovernanceKey
	(*NoteCommitmentProof)(nil),                   // 57: penumbra.crypto.NoteCommitmentProof
	(*Note)(nil),                                  // 58: penumbra.crypto.Note
	(*Value)(nil),                                 // 59: penumbra.crypto.Value
	(*SwapPlaintext)(nil),                         // 60: penumbra.dex.SwapPlaintext
	(*BatchSwapOutputData)(nil),                   // 61: penumbra.dex.BatchSwapOutputData
}
var file_transaction_proto_depIdxs = []int32{
	2,  // 0: penumbra.transaction.Transaction.body:type_name -> penumbra.transaction.TransactionBody
	36, // 1: penumbra.transaction.Transaction.anchor:type_name -> penumbra.crypto.MerkleRoot
	3,  // 2: penumbra.transaction.TransactionBody.actions:type_name -> penumbra.transaction.Action
	37, // 3: penumbra.transaction.TransactionBody.fee:type_name -> penumbra.crypto.Fee
	38, // 4: penumbra.transaction.TransactionBody.fmd_clues:type_name -> penumbra.crypto.Clue
	4,  // 5: penumbra.transaction.Action.spend:type_name -> penumbra.transaction.Spend
	6,  // 6: penumbra.transaction.Action.output:type_name -> penumbra.transaction.Output
	39, // 7: penumbra.transaction.Action.delegate:type_name -> penumbra.stake.Delegate
	40, // 8: penumbra.transaction.Action.undelegate:type_name -> penumbra.stake.Undelegate
	41, // 9: penumbra.transaction.Action.swap:type_name -> penumbra.dex.Swap
	42, // 10: penumbra.transaction.Action.swap_claim:type_name -> penumbra.dex.SwapClaim
	43, // 11: penumbra.transaction.Action.validator_definition:type_name -> penumbra.stake.ValidatorDefinition
	44, // 12: penumbra.transaction.Action.ibc_action:type_name -> penumbra.ibc.IBCAction
	8,  // 13: penumbra.transaction.Action.proposal_submit:type_name -> penumbra.transaction.ProposalSubmit
	9,  // 14: penumbra.transaction.Action.proposal_withdraw:type_name -> penumbra.transaction.ProposalWithdraw
	11, // 15: penumbra.transaction.Action.validator_vote:type_name -> penumbra.transaction.ValidatorVote
	45, // 16: penumbra.transaction.Action.position_open:type_name -> penumbra.dex.PositionOpen
	46, // 17: penumbra.transaction.Action.position_close:type_name -> penumbra.dex.PositionClose
	47, // 18: penumbra.transaction.Action.position_withdraw:type_name -> penumbra.dex.PositionWithdraw
	48, // 19: penumbra.transaction.Action.position_reward_claim:type_name -> penumbra.dex.PositionRewardClaim
	49, // 20: penumbra.transaction.Action.ics20_withdrawal:type_name -> penumbra.ibc.ICS20Withdrawal
	5,  // 21: penumbra.transaction.Spend.body:type_name -> penumbra.transaction.SpendBody
	50, // 22: penumbra.transaction.Spend.auth_sig:type_name -> penumbra.crypto.SpendAuthSignature
	51, // 23: penumbra.transaction.SpendBody.value_commitment:type_name -> penumbra.crypto.ValueCommitment
	7,  // 24: penumbra.transaction.Output.body:type_name -> penumbra.transaction.OutputBody
	52, // 25: penumbra.transaction.OutputBody.note_payload:type_name -> penumbra.crypto.NotePayload
	51, // 26: penumbra.transaction.OutputBody.value_commitment:type_name -> penumbra.crypto.ValueCommitment
	27, // 27: penumbra.transaction.ProposalSubmit.proposal:type_name -> penumbra.transaction.Proposal
	53, // 28: penumbra.transaction.ProposalSubmit.deposit_refund_address:type_name -> penumbra.crypto.Address
	10, // 29: penumbra.transaction.ProposalWithdraw.body:type_name -> penumbra.transaction.ProposalWithdrawBody
	50, // 30: penumbra.transaction.ProposalWithdraw.auth_sig:type_name -> penumbra.crypto.SpendAuthSignature
	12, // 31: penumbra.transaction.ValidatorVote.body:type_name -> penumbra.transaction.ValidatorVoteBody
	50, // 32: penumbra.transaction.ValidatorVote.auth_sig:type_name -> penumbra.crypto.SpendAuthSignature
	54, // 33: penumbra.transaction.ValidatorVoteBody.vote:type_name -> penumbra.governance.Vote
	55, // 34: penumbra.transaction.ValidatorVoteBody.identity_key:type_name -> penumbra.crypto.IdentityKey
	56, // 35: penumbra.transaction.ValidatorVoteBody.governance_key:type_name -> penumbra.crypto.GovernanceKey
	14, // 36: penumbra.transaction.DelegatorVote.body:type_name -> penumbra.transaction.DelegatorVoteBody
	50, // 37: penumbra.transaction.DelegatorVote.auth_sig:type_name -> penumbra.crypto.SpendAuthSignature
	51, // 38: penumbra.transaction.DelegatorVoteBody.yes_value_commitment:type_name -> penumbra.crypto.ValueCommitment
	51, // 39: penumbra.transaction.DelegatorVoteBody.no_value_commitment:type_name -> penumbra.crypto.ValueCommitment
	51, // 40: penumbra.transaction.DelegatorVoteBody.abstain_value_commitment:type_name -> penumbra.crypto.ValueCommitment
	51, // 41: penumbra.transaction.DelegatorVoteBody.no_with_veto_value_commitment:type_name -> penumbra.crypto.ValueCommitment
	0,  // 42: penumbra.transaction.AuthorizationData.auth_hash:type_name -> penumbra.transaction.AuthHash
	50, // 43: penumbra.transaction.AuthorizationData.spend_auths:type_name -> penumbra.crypto.SpendAuthSignature
	50, // 44: penumbra.transaction.AuthorizationData.withdraw_proposal_auths:type_name -> penumbra.crypto.SpendAuthSignature
	36, // 45: penumbra.transaction.WitnessData.anchor:type_name -> penumbra.crypto.MerkleRoot
	57, // 46: penumbra.transaction.WitnessData.note_commitment_proofs:type_name -> penumbra.crypto.NoteCommitmentProof
	18, // 47: penumbra.transaction.TransactionPlan.actions:type_name -> penumbra.transaction.ActionPlan
	37, // 48: penumbra.transaction.TransactionPlan.fee:type_name -> penumbra.crypto.Fee
	19, // 49: penumbra.transaction.TransactionPlan.clue_plans:type_name -> penumbra.transaction.CluePlan
	20, // 50: penumbra.transaction.TransactionPlan.memo_plan:type_name -> penumbra.transaction.MemoPlan
	21, // 51: penumbra.transaction.ActionPlan.spend:type_name -> penumbra.transaction.SpendPlan
	22, // 52: penumbra.transaction.ActionPlan.output:type_name -> penumbra.transaction.OutputPlan
	39, // 53: penumbra.transaction.ActionPlan.delegate:type_name -> penumbra.stake.Delegate
	40, // 54: penumbra.transaction.ActionPlan.undelegate:type_name -> penumbra.stake.Undelegate
	43, // 55: penumbra.transaction.ActionPlan.validator_definition:type_name -> penumbra.stake.ValidatorDefinition
	44, // 56: penumbra.transaction.ActionPlan.ibc_action:type_name -> penumbra.ibc.IBCAction
	8,  // 57: penumbra.transaction.ActionPlan.proposal_submit:type_name -> penumbra.transaction.ProposalSubmit
	25, // 58: penumbra.transaction.ActionPlan.proposal_withdraw:type_name -> penumbra.transaction.ProposalWithdrawPlan
	11, // 59: penumbra.transaction.ActionPlan.validator_vote:type_name -> penumbra.transaction.ValidatorVote
	26, // 60: penumbra.transaction.ActionPlan.delegator_vote:type_name -> penumbra.transaction.DelegatorVotePlan
	45, // 61: penumbra.transaction.ActionPlan.position_open:type_name -> penumbra.dex.PositionOpen
	46, // 62: penumbra.transaction.ActionPlan.position_close:type_name -> penumbra.dex.PositionClose
	47, // 63: penumbra.transaction.ActionPlan.position_withdraw:type_name -> penumbra.dex.PositionWithdraw
	48, // 64: penumbra.transaction.ActionPlan.position_reward_claim:type_name -> penumbra.dex.PositionRewardClaim
	23, // 65: penumbra.transaction.ActionPlan.swap:type_name -> penumbra.transaction.SwapPlan
	24, // 66: penumbra.transaction.ActionPlan.swap_claim:type_name -> penumbra.transaction.SwapClaimPlan
	53, // 67: penumbra.transaction.CluePlan.address:type_name -> penumbra.crypto.Address
	58, // 68: penumbra.transaction.SpendPlan.note:type_name -> penumbra.crypto.Note
	59, // 69: penumbra.transaction.OutputPlan.value:type_name -> penumbra.crypto.Value
	53, // 70: penumbra.transaction.OutputPlan.dest_address:type_name -> penumbra.crypto.Address
	60, // 71: penumbra.transaction.SwapPlan.swap_plaintext:type_name -> penumbra.dex.SwapPlaintext
	58, // 72: penumbra.transaction.SwapClaimPlan.swap_nft_note:type_name -> penumbra.crypto.Note
	60, // 73: penumbra.transaction.SwapClaimPlan.swap_plaintext:type_name -> penumbra.dex.SwapPlaintext
	61, // 74: penumbra.transaction.SwapClaimPlan.output_data:type_name -> penumbra.dex.BatchSwapOutputData
	10, // 75: penumbra.transaction.ProposalWithdrawPlan.body:type_name -> penumbra.transaction.ProposalWithdrawBody
	54, // 76: penumbra.transaction.DelegatorVotePlan.vote:type_name -> penumbra.governance.Vote
	58, // 77: penumbra.transaction.DelegatorVotePlan.staked_note:type_name -> penumbra.crypto.Note
	28, // 78: penumbra.transaction.Proposal.payload:type_name -> penumbra.transaction.Proposal.Payload
	29, // 79: penumbra.transaction.Proposal.Payload.signaling:type_name -> penumbra.transaction.Proposal.Signaling
	30, // 80: penumbra.transaction.Proposal.Payload.emergency:type_name -> penumbra.transaction.Proposal.Emergency
	31, // 81: penumbra.transaction.Proposal.Payload.parameter_change:type_name -> penumbra.transaction.Proposal.ParameterChange
	32, // 82: penumbra.transaction.Proposal.Payload.dao_spend:type_name -> penumbra.transaction.Proposal.DaoSpend
	33, // 83: penumbra.transaction.Proposal.ParameterChange.new_parameters:type_name -> penumbra.transaction.Proposal.ParameterChange.SetParameter
	34, // 84: penumbra.transaction.Proposal.DaoSpend.schedule_transactions:type_name -> penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction
	35, // 85: penumbra.transaction.Proposal.DaoSpend.cancel_transactions:type_name -> penumbra.transaction.Proposal.DaoSpend.CancelTransaction
	17, // 86: penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.transaction:type_name -> penumbra.transaction.TransactionPlan
	0,  // 87: penumbra.transaction.Proposal.DaoSpend.CancelTransaction.auth_hash:type_name -> penumbra.transaction.AuthHash
	88, // [88:88] is the sub-list for method output_type
	88, // [88:88] is the sub-list for method input_type
	88, // [88:88] is the sub-list for extension type_name
	88, // [88:88] is the sub-list for extension extendee
	0,  // [0:88] is the sub-list for field type_name
}

func init() { file_transaction_proto_init() }
func file_transaction_proto_init() {
	if File_transaction_proto != nil {
		return
	}
	file_crypto_proto_init()
	file_stake_proto_init()
	file_ibc_proto_init()
	file_dex_proto_init()
	file_governance_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalSubmit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalWithdrawBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorVoteBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatorVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatorVoteBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WitnessData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CluePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapClaimPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalWithdrawPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatorVotePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal_Signaling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal_Emergency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal_ParameterChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal_DaoSpend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal_ParameterChange_SetParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal_DaoSpend_ScheduleTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal_DaoSpend_CancelTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_transaction_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_transaction_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Action_Spend)(nil),
		(*Action_Output)(nil),
		(*Action_Delegate)(nil),
		(*Action_Undelegate)(nil),
		(*Action_Swap)(nil),
		(*Action_SwapClaim)(nil),
		(*Action_ValidatorDefinition)(nil),
		(*Action_IbcAction)(nil),
		(*Action_ProposalSubmit)(nil),
		(*Action_ProposalWithdraw)(nil),
		(*Action_ValidatorVote)(nil),
		(*Action_PositionOpen)(nil),
		(*Action_PositionClose)(nil),
		(*Action_PositionWithdraw)(nil),
		(*Action_PositionRewardClaim)(nil),
		(*Action_Ics20Withdrawal)(nil),
	}
	file_transaction_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*ActionPlan_Spend)(nil),
		(*ActionPlan_Output)(nil),
		(*ActionPlan_Delegate)(nil),
		(*ActionPlan_Undelegate)(nil),
		(*ActionPlan_ValidatorDefinition)(nil),
		(*ActionPlan_IbcAction)(nil),
		(*ActionPlan_ProposalSubmit)(nil),
		(*ActionPlan_ProposalWithdraw)(nil),
		(*ActionPlan_ValidatorVote)(nil),
		(*ActionPlan_DelegatorVote)(nil),
		(*ActionPlan_PositionOpen)(nil),
		(*ActionPlan_PositionClose)(nil),
		(*ActionPlan_PositionWithdraw)(nil),
		(*ActionPlan_PositionRewardClaim)(nil),
		(*ActionPlan_Swap)(nil),
		(*ActionPlan_SwapClaim)(nil),
	}
	file_transaction_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*Proposal_Payload_Signaling)(nil),
		(*Proposal_Payload_Emergency)(nil),
		(*Proposal_Payload_ParameterChange)(nil),
		(*Proposal_Payload_DaoSpend)(nil),
	}
	file_transaction_proto_msgTypes[29].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transaction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transaction_proto_goTypes,
		DependencyIndexes: file_transaction_proto_depIdxs,
		MessageInfos:      file_transaction_proto_msgTypes,
	}.Build()
	File_transaction_proto = out.File
	file_transaction_proto_rawDesc = nil
	file_transaction_proto_goTypes = nil
	file_transaction_proto_depIdxs = nil
}
