// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: dex.proto

package go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PositionState_PositionStateEnum int32

const (
	// The position has been opened, is active, has reserves and accumulated
	// fees, and can be traded against.
	PositionState_OPENED PositionState_PositionStateEnum = 0
	// The position has been closed, is inactive and can no longer be traded
	// against, but still has reserves and accumulated fees.
	PositionState_CLOSED PositionState_PositionStateEnum = 1
	// The final reserves and accumulated fees have been withdrawn, leaving an
	// empty, inactive position awaiting (possible) retroactive rewards.
	PositionState_WITHDRAWN PositionState_PositionStateEnum = 2
	// Any retroactive rewards have been claimed. The position is now an inert,
	// historical artefact.
	PositionState_CLAIMED PositionState_PositionStateEnum = 3
)

// Enum value maps for PositionState_PositionStateEnum.
var (
	PositionState_PositionStateEnum_name = map[int32]string{
		0: "OPENED",
		1: "CLOSED",
		2: "WITHDRAWN",
		3: "CLAIMED",
	}
	PositionState_PositionStateEnum_value = map[string]int32{
		"OPENED":    0,
		"CLOSED":    1,
		"WITHDRAWN": 2,
		"CLAIMED":   3,
	}
)

func (x PositionState_PositionStateEnum) Enum() *PositionState_PositionStateEnum {
	p := new(PositionState_PositionStateEnum)
	*p = x
	return p
}

func (x PositionState_PositionStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionState_PositionStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dex_proto_enumTypes[0].Descriptor()
}

func (PositionState_PositionStateEnum) Type() protoreflect.EnumType {
	return &file_dex_proto_enumTypes[0]
}

func (x PositionState_PositionStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PositionState_PositionStateEnum.Descriptor instead.
func (PositionState_PositionStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{14, 0}
}

// A transaction action that submits a swap to the dex.
type Swap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the Swap proof.
	Proof []byte `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	// MockFlowCiphertext dropped until flow encryption/ABCI++ available
	// // Encrypted amount of asset 1 of the trading pair.
	// MockFlowCiphertext enc_amount_1 = 2;
	// // Encrypted amount of asset 2 of the trading pair.
	// MockFlowCiphertext enc_amount_2 = 3;
	// Encapsulates the authorized fields of the Swap action, used in signing.
	Body *SwapBody `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Swap) Reset() {
	*x = Swap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Swap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swap) ProtoMessage() {}

func (x *Swap) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swap.ProtoReflect.Descriptor instead.
func (*Swap) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{0}
}

func (x *Swap) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *Swap) GetBody() *SwapBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// A transaction action that obtains assets previously confirmed
// via a Swap transaction. Does not include a spend authorization
// signature, as it is only capable of consuming the NFT from a
// Swap transaction.
type SwapClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the SwapClaim proof.
	Proof []byte `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	// Encapsulates the authorized fields of the SwapClaim action, used in signing.
	Body *SwapClaimBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SwapClaim) Reset() {
	*x = SwapClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapClaim) ProtoMessage() {}

func (x *SwapClaim) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapClaim.ProtoReflect.Descriptor instead.
func (*SwapClaim) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{1}
}

func (x *SwapClaim) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *SwapClaim) GetBody() *SwapClaimBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// Encapsulates the authorized fields of the SwapClaim action, used in signing.
type SwapClaimBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nullifier for the Swap NFT to be consumed.
	Nullifier *Nullifier `protobuf:"bytes,1,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	// The fee allows `SwapClaim` without an additional `Spend`.
	Fee *Fee `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
	// Note output for asset 1.
	Output_1 *NotePayload `protobuf:"bytes,3,opt,name=output_1,json=output1,proto3" json:"output_1,omitempty"`
	// Note output for asset 2.
	Output_2 *NotePayload `protobuf:"bytes,4,opt,name=output_2,json=output2,proto3" json:"output_2,omitempty"`
	// Input and output amounts, and asset IDs for the assets in the swap.
	OutputData *BatchSwapOutputData `protobuf:"bytes,6,opt,name=output_data,json=outputData,proto3" json:"output_data,omitempty"`
	// The epoch duration of the chain when the swap claim took place.
	EpochDuration uint64 `protobuf:"varint,7,opt,name=epoch_duration,json=epochDuration,proto3" json:"epoch_duration,omitempty"`
}

func (x *SwapClaimBody) Reset() {
	*x = SwapClaimBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapClaimBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapClaimBody) ProtoMessage() {}

func (x *SwapClaimBody) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapClaimBody.ProtoReflect.Descriptor instead.
func (*SwapClaimBody) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{2}
}

func (x *SwapClaimBody) GetNullifier() *Nullifier {
	if x != nil {
		return x.Nullifier
	}
	return nil
}

func (x *SwapClaimBody) GetFee() *Fee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *SwapClaimBody) GetOutput_1() *NotePayload {
	if x != nil {
		return x.Output_1
	}
	return nil
}

func (x *SwapClaimBody) GetOutput_2() *NotePayload {
	if x != nil {
		return x.Output_2
	}
	return nil
}

func (x *SwapClaimBody) GetOutputData() *BatchSwapOutputData {
	if x != nil {
		return x.OutputData
	}
	return nil
}

func (x *SwapClaimBody) GetEpochDuration() uint64 {
	if x != nil {
		return x.EpochDuration
	}
	return 0
}

// For storing the list of claimed swaps between the dex and shielded pool components.
type ClaimedSwapList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Claims []*ClaimedSwap `protobuf:"bytes,1,rep,name=claims,proto3" json:"claims,omitempty"`
}

func (x *ClaimedSwapList) Reset() {
	*x = ClaimedSwapList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimedSwapList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimedSwapList) ProtoMessage() {}

func (x *ClaimedSwapList) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimedSwapList.ProtoReflect.Descriptor instead.
func (*ClaimedSwapList) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{3}
}

func (x *ClaimedSwapList) GetClaims() []*ClaimedSwap {
	if x != nil {
		return x.Claims
	}
	return nil
}

// Represents a swap claimed in a particular transaction.
type ClaimedSwap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Claim *SwapClaimBody `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
	Txid  []byte         `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *ClaimedSwap) Reset() {
	*x = ClaimedSwap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimedSwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimedSwap) ProtoMessage() {}

func (x *ClaimedSwap) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimedSwap.ProtoReflect.Descriptor instead.
func (*ClaimedSwap) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{4}
}

func (x *ClaimedSwap) GetClaim() *SwapClaimBody {
	if x != nil {
		return x.Claim
	}
	return nil
}

func (x *ClaimedSwap) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

// The authorized data of a Swap transaction.
type SwapBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The trading pair to swap.
	TradingPair *TradingPair `protobuf:"bytes,1,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
	// @exclude These will become commitments when flow encryption/ABCI++ are available
	// The amount for asset 1.
	Delta_1 uint64 `protobuf:"varint,2,opt,name=delta_1,json=delta1,proto3" json:"delta_1,omitempty"`
	// The amount for asset 2.
	Delta_2 uint64 `protobuf:"varint,3,opt,name=delta_2,json=delta2,proto3" json:"delta_2,omitempty"`
	// @exclude // Commitment to the amount for asset 1 (delta 1).
	// @exclude bytes delta_1_commitment = 2;
	// @exclude // Commitment to the amount for asset 2 (delta 2).
	// @exclude bytes delta_2_commitment = 3;
	// A commitment to a prepaid fee for the future SwapClaim.
	FeeCommitment []byte `protobuf:"bytes,4,opt,name=fee_commitment,json=feeCommitment,proto3" json:"fee_commitment,omitempty"`
	// Swap NFT recording the user's contribution.
	SwapNft *NotePayload `protobuf:"bytes,5,opt,name=swap_nft,json=swapNft,proto3" json:"swap_nft,omitempty"`
	// Encrypted version of the original `Swap`, symmetrically encrypted w/ viewing key.
	SwapCiphertext []byte `protobuf:"bytes,6,opt,name=swap_ciphertext,json=swapCiphertext,proto3" json:"swap_ciphertext,omitempty"`
}

func (x *SwapBody) Reset() {
	*x = SwapBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapBody) ProtoMessage() {}

func (x *SwapBody) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapBody.ProtoReflect.Descriptor instead.
func (*SwapBody) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{5}
}

func (x *SwapBody) GetTradingPair() *TradingPair {
	if x != nil {
		return x.TradingPair
	}
	return nil
}

func (x *SwapBody) GetDelta_1() uint64 {
	if x != nil {
		return x.Delta_1
	}
	return 0
}

func (x *SwapBody) GetDelta_2() uint64 {
	if x != nil {
		return x.Delta_2
	}
	return 0
}

func (x *SwapBody) GetFeeCommitment() []byte {
	if x != nil {
		return x.FeeCommitment
	}
	return nil
}

func (x *SwapBody) GetSwapNft() *NotePayload {
	if x != nil {
		return x.SwapNft
	}
	return nil
}

func (x *SwapBody) GetSwapCiphertext() []byte {
	if x != nil {
		return x.SwapCiphertext
	}
	return nil
}

type SwapPlaintext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The trading pair to swap.
	TradingPair *TradingPair `protobuf:"bytes,1,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
	// Input amount of asset 1
	Delta_1 uint64 `protobuf:"varint,2,opt,name=delta_1,json=delta1,proto3" json:"delta_1,omitempty"`
	// Input amount of asset 2
	Delta_2 uint64 `protobuf:"varint,3,opt,name=delta_2,json=delta2,proto3" json:"delta_2,omitempty"`
	// Pre-paid fee to claim the swap
	ClaimFee *Fee `protobuf:"bytes,4,opt,name=claim_fee,json=claimFee,proto3" json:"claim_fee,omitempty"`
	// Address that will claim the swap outputs via SwapClaim.
	ClaimAddress *Address `protobuf:"bytes,5,opt,name=claim_address,json=claimAddress,proto3" json:"claim_address,omitempty"`
}

func (x *SwapPlaintext) Reset() {
	*x = SwapPlaintext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapPlaintext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapPlaintext) ProtoMessage() {}

func (x *SwapPlaintext) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapPlaintext.ProtoReflect.Descriptor instead.
func (*SwapPlaintext) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{6}
}

func (x *SwapPlaintext) GetTradingPair() *TradingPair {
	if x != nil {
		return x.TradingPair
	}
	return nil
}

func (x *SwapPlaintext) GetDelta_1() uint64 {
	if x != nil {
		return x.Delta_1
	}
	return 0
}

func (x *SwapPlaintext) GetDelta_2() uint64 {
	if x != nil {
		return x.Delta_2
	}
	return 0
}

func (x *SwapPlaintext) GetClaimFee() *Fee {
	if x != nil {
		return x.ClaimFee
	}
	return nil
}

func (x *SwapPlaintext) GetClaimAddress() *Address {
	if x != nil {
		return x.ClaimAddress
	}
	return nil
}

type MockFlowCiphertext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Represents this transaction's contribution to flow's value.
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MockFlowCiphertext) Reset() {
	*x = MockFlowCiphertext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockFlowCiphertext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockFlowCiphertext) ProtoMessage() {}

func (x *MockFlowCiphertext) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockFlowCiphertext.ProtoReflect.Descriptor instead.
func (*MockFlowCiphertext) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{7}
}

func (x *MockFlowCiphertext) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Holds two asset IDs. Ordering doesn't reflect trading direction, however
// since the `AssetId` type is `Ord + PartialOrd`, there can be only one
// `TradingPair` per asset pair.
type TradingPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first asset of the pair.
	Asset_1 *AssetId `protobuf:"bytes,1,opt,name=asset_1,json=asset1,proto3" json:"asset_1,omitempty"`
	// The second asset of the pair.
	Asset_2 *AssetId `protobuf:"bytes,2,opt,name=asset_2,json=asset2,proto3" json:"asset_2,omitempty"`
}

func (x *TradingPair) Reset() {
	*x = TradingPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingPair) ProtoMessage() {}

func (x *TradingPair) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingPair.ProtoReflect.Descriptor instead.
func (*TradingPair) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{8}
}

func (x *TradingPair) GetAsset_1() *AssetId {
	if x != nil {
		return x.Asset_1
	}
	return nil
}

func (x *TradingPair) GetAsset_2() *AssetId {
	if x != nil {
		return x.Asset_2
	}
	return nil
}

// Records the result of a batch swap on-chain.
//
// Used as a public input to a swap claim proof, as it implies the effective
// clearing price for the batch.
type BatchSwapOutputData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total amount of asset 1 that was input to the batch swap.
	Delta_1 uint64 `protobuf:"varint,1,opt,name=delta_1,json=delta1,proto3" json:"delta_1,omitempty"`
	// The total amount of asset 2 that was input to the batch swap.
	Delta_2 uint64 `protobuf:"varint,2,opt,name=delta_2,json=delta2,proto3" json:"delta_2,omitempty"`
	// The total amount of asset 1 that was output from the batch swap.
	Lambda_1 uint64 `protobuf:"varint,3,opt,name=lambda_1,json=lambda1,proto3" json:"lambda_1,omitempty"`
	// The total amount of asset 2 that was output from the batch swap.
	Lambda_2 uint64 `protobuf:"varint,4,opt,name=lambda_2,json=lambda2,proto3" json:"lambda_2,omitempty"`
	// Whether the swap succeeded or not.
	Success bool `protobuf:"varint,5,opt,name=success,proto3" json:"success,omitempty"`
	// The height for which the batch swap data is valid.
	Height uint64 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	// The trading pair associated with the batch swap.
	TradingPair *TradingPair `protobuf:"bytes,7,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
}

func (x *BatchSwapOutputData) Reset() {
	*x = BatchSwapOutputData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSwapOutputData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSwapOutputData) ProtoMessage() {}

func (x *BatchSwapOutputData) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSwapOutputData.ProtoReflect.Descriptor instead.
func (*BatchSwapOutputData) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{9}
}

func (x *BatchSwapOutputData) GetDelta_1() uint64 {
	if x != nil {
		return x.Delta_1
	}
	return 0
}

func (x *BatchSwapOutputData) GetDelta_2() uint64 {
	if x != nil {
		return x.Delta_2
	}
	return 0
}

func (x *BatchSwapOutputData) GetLambda_1() uint64 {
	if x != nil {
		return x.Lambda_1
	}
	return 0
}

func (x *BatchSwapOutputData) GetLambda_2() uint64 {
	if x != nil {
		return x.Lambda_2
	}
	return 0
}

func (x *BatchSwapOutputData) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BatchSwapOutputData) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BatchSwapOutputData) GetTradingPair() *TradingPair {
	if x != nil {
		return x.TradingPair
	}
	return nil
}

// The data describing a trading function.
//
// This implicitly treats the trading function as being between assets 1 and 2,
// without specifying what those assets are, to avoid duplicating data (each
// asset ID alone is twice the size of the trading function).
//
// The trading function is `phi(R) = p*R_1 + q*R_2`.
// This is used as a CFMM with constant `k` and fee `fee` (gamma).
type TradingFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NOTE: the use of floats here is a placeholder, so we can stub out the
	// implementation and then decide what type of fixed-point, deterministic
	// arithmetic should be used.
	Fee float64 `protobuf:"fixed64,2,opt,name=fee,proto3" json:"fee,omitempty"`
	K   float64 `protobuf:"fixed64,3,opt,name=k,proto3" json:"k,omitempty"`
	P   float64 `protobuf:"fixed64,4,opt,name=p,proto3" json:"p,omitempty"`
	Q   float64 `protobuf:"fixed64,5,opt,name=q,proto3" json:"q,omitempty"`
}

func (x *TradingFunction) Reset() {
	*x = TradingFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingFunction) ProtoMessage() {}

func (x *TradingFunction) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingFunction.ProtoReflect.Descriptor instead.
func (*TradingFunction) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{10}
}

func (x *TradingFunction) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TradingFunction) GetK() float64 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *TradingFunction) GetP() float64 {
	if x != nil {
		return x.P
	}
	return 0
}

func (x *TradingFunction) GetQ() float64 {
	if x != nil {
		return x.Q
	}
	return 0
}

// The reserves of a position.
//
// Like a position, this implicitly treats the trading function as being
// between assets 1 and 2, without specifying what those assets are, to avoid
// duplicating data (each asset ID alone is four times the size of the
// reserves).
type Reserves struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R1 uint64 `protobuf:"varint,1,opt,name=r1,proto3" json:"r1,omitempty"`
	R2 uint64 `protobuf:"varint,2,opt,name=r2,proto3" json:"r2,omitempty"`
}

func (x *Reserves) Reset() {
	*x = Reserves{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reserves) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reserves) ProtoMessage() {}

func (x *Reserves) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reserves.ProtoReflect.Descriptor instead.
func (*Reserves) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{11}
}

func (x *Reserves) GetR1() uint64 {
	if x != nil {
		return x.R1
	}
	return 0
}

func (x *Reserves) GetR2() uint64 {
	if x != nil {
		return x.R2
	}
	return 0
}

// Data identifying a position.
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair *TradingPair     `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	Phi  *TradingFunction `protobuf:"bytes,2,opt,name=phi,proto3" json:"phi,omitempty"`
	// A random value used to disambiguate different positions with the exact same
	// trading function.  The chain should reject newly created positions with the
	// same nonce as an existing position.  This ensures that `PositionId`s will
	// be unique, and allows us to track position ownership with a
	// sequence of stateful NFTs based on the `PositionId`.
	Nonce []byte `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{12}
}

func (x *Position) GetPair() *TradingPair {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *Position) GetPhi() *TradingFunction {
	if x != nil {
		return x.Phi
	}
	return nil
}

func (x *Position) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

// A hash of a `Position`.
type PositionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *PositionId) Reset() {
	*x = PositionId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionId) ProtoMessage() {}

func (x *PositionId) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionId.ProtoReflect.Descriptor instead.
func (*PositionId) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{13}
}

func (x *PositionId) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// The state of a position.
type PositionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State PositionState_PositionStateEnum `protobuf:"varint,1,opt,name=state,proto3,enum=penumbra.dex.PositionState_PositionStateEnum" json:"state,omitempty"`
}

func (x *PositionState) Reset() {
	*x = PositionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionState) ProtoMessage() {}

func (x *PositionState) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionState.ProtoReflect.Descriptor instead.
func (*PositionState) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{14}
}

func (x *PositionState) GetState() PositionState_PositionStateEnum {
	if x != nil {
		return x.State
	}
	return PositionState_OPENED
}

// An LPNFT tracking both ownership and state of a position.
//
// Tracking the state as part of the LPNFT means that all LP-related actions can
// be authorized by spending funds: a state transition (e.g., closing a
// position) is modeled as spending an "open position LPNFT" and minting a
// "closed position LPNFT" for the same (globally unique) position ID.
//
// This means that the LP mechanics can be agnostic to the mechanism used to
// record custody and spend authorization.  For instance, they can be recorded
// in the shielded pool, where custody is based on off-chain keys, or they could
// be recorded in a programmatic on-chain account (in the future, e.g., to
// support interchain accounts).  This also means that LP-related actions don't
// require any cryptographic implementation (proofs, signatures, etc), other
// than hooking into the value commitment mechanism used for transaction
// balances.
type LpNft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId *PositionId    `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	State      *PositionState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *LpNft) Reset() {
	*x = LpNft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LpNft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LpNft) ProtoMessage() {}

func (x *LpNft) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LpNft.ProtoReflect.Descriptor instead.
func (*LpNft) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{15}
}

func (x *LpNft) GetPositionId() *PositionId {
	if x != nil {
		return x.PositionId
	}
	return nil
}

func (x *LpNft) GetState() *PositionState {
	if x != nil {
		return x.State
	}
	return nil
}

// A transaction action that opens a new position.
//
// This action's contribution to the transaction's value balance is to consume
// the initial reserves and contribute an opened position NFT.
type PositionOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the data defining the position, sufficient to compute its `PositionId`.
	//
	// Positions are immutable, so the `PositionData` (and hence the `PositionId`)
	// are unchanged over the entire lifetime of the position.
	Position *Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	// The initial reserves of the position.  Unlike the `PositionData`, the
	// reserves evolve over time as trades are executed against the position.
	InitialReserves *Reserves `protobuf:"bytes,2,opt,name=initial_reserves,json=initialReserves,proto3" json:"initial_reserves,omitempty"`
}

func (x *PositionOpen) Reset() {
	*x = PositionOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionOpen) ProtoMessage() {}

func (x *PositionOpen) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionOpen.ProtoReflect.Descriptor instead.
func (*PositionOpen) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{16}
}

func (x *PositionOpen) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PositionOpen) GetInitialReserves() *Reserves {
	if x != nil {
		return x.InitialReserves
	}
	return nil
}

// A transaction action that closes a position.
//
// This action's contribution to the transaction's value balance is to consume
// an opened position NFT and contribute a closed position NFT.
//
// Closing a position does not immediately withdraw funds, because Penumbra
// transactions (like any ZK transaction model) are early-binding: the prover
// must know the state transition they prove knowledge of, and they cannot know
// the final reserves with certainty until after the position has been deactivated.
type PositionClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId *PositionId `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *PositionClose) Reset() {
	*x = PositionClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionClose) ProtoMessage() {}

func (x *PositionClose) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionClose.ProtoReflect.Descriptor instead.
func (*PositionClose) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{17}
}

func (x *PositionClose) GetPositionId() *PositionId {
	if x != nil {
		return x.PositionId
	}
	return nil
}

// A transaction action that withdraws funds from a closed position.
//
// This action's contribution to the transaction's value balance is to consume a
// closed position NFT and contribute a withdrawn position NFT, as well as all
// of the funds that were in the position at the time of closing.
type PositionWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId *PositionId `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	// A transparent (zero blinding factor) commitment to the position's final reserves and fees.
	//
	// The chain will check this commitment by recomputing it with the on-chain state.
	ReservesCommitment *ValueCommitment `protobuf:"bytes,2,opt,name=reserves_commitment,json=reservesCommitment,proto3" json:"reserves_commitment,omitempty"`
}

func (x *PositionWithdraw) Reset() {
	*x = PositionWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionWithdraw) ProtoMessage() {}

func (x *PositionWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionWithdraw.ProtoReflect.Descriptor instead.
func (*PositionWithdraw) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{18}
}

func (x *PositionWithdraw) GetPositionId() *PositionId {
	if x != nil {
		return x.PositionId
	}
	return nil
}

func (x *PositionWithdraw) GetReservesCommitment() *ValueCommitment {
	if x != nil {
		return x.ReservesCommitment
	}
	return nil
}

// A transaction action that claims retroactive rewards for a historical
// position.
//
// This action's contribution to the transaction's value balance is to consume a
// withdrawn position NFT and contribute its reward balance.
type PositionRewardClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId *PositionId `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	// A transparent (zero blinding factor) commitment to the position's accumulated rewards.
	//
	// The chain will check this commitment by recomputing it with the on-chain state.
	RewardsCommitment *ValueCommitment `protobuf:"bytes,2,opt,name=rewards_commitment,json=rewardsCommitment,proto3" json:"rewards_commitment,omitempty"`
}

func (x *PositionRewardClaim) Reset() {
	*x = PositionRewardClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionRewardClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionRewardClaim) ProtoMessage() {}

func (x *PositionRewardClaim) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionRewardClaim.ProtoReflect.Descriptor instead.
func (*PositionRewardClaim) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{19}
}

func (x *PositionRewardClaim) GetPositionId() *PositionId {
	if x != nil {
		return x.PositionId
	}
	return nil
}

func (x *PositionRewardClaim) GetRewardsCommitment() *ValueCommitment {
	if x != nil {
		return x.RewardsCommitment
	}
	return nil
}

var File_dex_proto protoreflect.FileDescriptor

var file_dex_proto_rawDesc = []byte{
	0x0a, 0x09, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x1a, 0x0c, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x48, 0x0a, 0x04, 0x53, 0x77, 0x61, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64,
	0x65, 0x78, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0x52, 0x0a, 0x09, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65,
	0x78, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xce, 0x02, 0x0a, 0x0d, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x31, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x32, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x32, 0x12, 0x42, 0x0a, 0x0b, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x53, 0x77, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64,
	0x53, 0x77, 0x61, 0x70, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x22, 0x54, 0x0a, 0x0b,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x12, 0x31, 0x0a, 0x05, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x08, 0x53, 0x77, 0x61, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x3c, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x64, 0x65, 0x78, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f,
	0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x32, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x66, 0x65, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6e,
	0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x73, 0x77, 0x61, 0x70, 0x4e, 0x66, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x43, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x0d, 0x53, 0x77, 0x61,
	0x70, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x5f, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x31, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x32, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x46, 0x65, 0x65, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x46, 0x65, 0x65, 0x12, 0x3d, 0x0a,
	0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2a, 0x0a, 0x12,
	0x4d, 0x6f, 0x63, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x73, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x31, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x32, 0x22, 0xed, 0x01,
	0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x31, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x62, 0x64,
	0x61, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x61, 0x6d, 0x62, 0x64,
	0x61, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x5f, 0x32, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x32, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x3c, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x64, 0x65, 0x78, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x22, 0x4d, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66,
	0x65, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x6b,
	0x12, 0x0c, 0x0a, 0x01, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x70, 0x12, 0x0c,
	0x0a, 0x01, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x71, 0x22, 0x2a, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x72, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x72, 0x32, 0x22, 0x80, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64,
	0x65, 0x78, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04,
	0x70, 0x61, 0x69, 0x72, 0x12, 0x2f, 0x0a, 0x03, 0x70, 0x68, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65, 0x78,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x70, 0x68, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x22, 0x0a, 0x0a, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22,
	0x9d, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x47, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0a, 0x0a, 0x06, 0x4f,
	0x50, 0x45, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x4e,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x10, 0x03, 0x22,
	0x75, 0x0a, 0x05, 0x4c, 0x70, 0x4e, 0x66, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65,
	0x78, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x10, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x64, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x52, 0x0f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x22, 0x4a,
	0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x64, 0x65, 0x78, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x10, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12,
	0x39, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x64, 0x65, 0x78, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x13, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa1, 0x01,
	0x0a, 0x13, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x4f, 0x0a, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2d, 0x7a, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dex_proto_rawDescOnce sync.Once
	file_dex_proto_rawDescData = file_dex_proto_rawDesc
)

func file_dex_proto_rawDescGZIP() []byte {
	file_dex_proto_rawDescOnce.Do(func() {
		file_dex_proto_rawDescData = protoimpl.X.CompressGZIP(file_dex_proto_rawDescData)
	})
	return file_dex_proto_rawDescData
}

var file_dex_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dex_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_dex_proto_goTypes = []interface{}{
	(PositionState_PositionStateEnum)(0), // 0: penumbra.dex.PositionState.PositionStateEnum
	(*Swap)(nil),                         // 1: penumbra.dex.Swap
	(*SwapClaim)(nil),                    // 2: penumbra.dex.SwapClaim
	(*SwapClaimBody)(nil),                // 3: penumbra.dex.SwapClaimBody
	(*ClaimedSwapList)(nil),              // 4: penumbra.dex.ClaimedSwapList
	(*ClaimedSwap)(nil),                  // 5: penumbra.dex.ClaimedSwap
	(*SwapBody)(nil),                     // 6: penumbra.dex.SwapBody
	(*SwapPlaintext)(nil),                // 7: penumbra.dex.SwapPlaintext
	(*MockFlowCiphertext)(nil),           // 8: penumbra.dex.MockFlowCiphertext
	(*TradingPair)(nil),                  // 9: penumbra.dex.TradingPair
	(*BatchSwapOutputData)(nil),          // 10: penumbra.dex.BatchSwapOutputData
	(*TradingFunction)(nil),              // 11: penumbra.dex.TradingFunction
	(*Reserves)(nil),                     // 12: penumbra.dex.Reserves
	(*Position)(nil),                     // 13: penumbra.dex.Position
	(*PositionId)(nil),                   // 14: penumbra.dex.PositionId
	(*PositionState)(nil),                // 15: penumbra.dex.PositionState
	(*LpNft)(nil),                        // 16: penumbra.dex.LpNft
	(*PositionOpen)(nil),                 // 17: penumbra.dex.PositionOpen
	(*PositionClose)(nil),                // 18: penumbra.dex.PositionClose
	(*PositionWithdraw)(nil),             // 19: penumbra.dex.PositionWithdraw
	(*PositionRewardClaim)(nil),          // 20: penumbra.dex.PositionRewardClaim
	(*Nullifier)(nil),                    // 21: penumbra.crypto.Nullifier
	(*Fee)(nil),                          // 22: penumbra.crypto.Fee
	(*NotePayload)(nil),                  // 23: penumbra.crypto.NotePayload
	(*Address)(nil),                      // 24: penumbra.crypto.Address
	(*AssetId)(nil),                      // 25: penumbra.crypto.AssetId
	(*ValueCommitment)(nil),              // 26: penumbra.crypto.ValueCommitment
}
var file_dex_proto_depIdxs = []int32{
	6,  // 0: penumbra.dex.Swap.body:type_name -> penumbra.dex.SwapBody
	3,  // 1: penumbra.dex.SwapClaim.body:type_name -> penumbra.dex.SwapClaimBody
	21, // 2: penumbra.dex.SwapClaimBody.nullifier:type_name -> penumbra.crypto.Nullifier
	22, // 3: penumbra.dex.SwapClaimBody.fee:type_name -> penumbra.crypto.Fee
	23, // 4: penumbra.dex.SwapClaimBody.output_1:type_name -> penumbra.crypto.NotePayload
	23, // 5: penumbra.dex.SwapClaimBody.output_2:type_name -> penumbra.crypto.NotePayload
	10, // 6: penumbra.dex.SwapClaimBody.output_data:type_name -> penumbra.dex.BatchSwapOutputData
	5,  // 7: penumbra.dex.ClaimedSwapList.claims:type_name -> penumbra.dex.ClaimedSwap
	3,  // 8: penumbra.dex.ClaimedSwap.claim:type_name -> penumbra.dex.SwapClaimBody
	9,  // 9: penumbra.dex.SwapBody.trading_pair:type_name -> penumbra.dex.TradingPair
	23, // 10: penumbra.dex.SwapBody.swap_nft:type_name -> penumbra.crypto.NotePayload
	9,  // 11: penumbra.dex.SwapPlaintext.trading_pair:type_name -> penumbra.dex.TradingPair
	22, // 12: penumbra.dex.SwapPlaintext.claim_fee:type_name -> penumbra.crypto.Fee
	24, // 13: penumbra.dex.SwapPlaintext.claim_address:type_name -> penumbra.crypto.Address
	25, // 14: penumbra.dex.TradingPair.asset_1:type_name -> penumbra.crypto.AssetId
	25, // 15: penumbra.dex.TradingPair.asset_2:type_name -> penumbra.crypto.AssetId
	9,  // 16: penumbra.dex.BatchSwapOutputData.trading_pair:type_name -> penumbra.dex.TradingPair
	9,  // 17: penumbra.dex.Position.pair:type_name -> penumbra.dex.TradingPair
	11, // 18: penumbra.dex.Position.phi:type_name -> penumbra.dex.TradingFunction
	0,  // 19: penumbra.dex.PositionState.state:type_name -> penumbra.dex.PositionState.PositionStateEnum
	14, // 20: penumbra.dex.LpNft.position_id:type_name -> penumbra.dex.PositionId
	15, // 21: penumbra.dex.LpNft.state:type_name -> penumbra.dex.PositionState
	13, // 22: penumbra.dex.PositionOpen.position:type_name -> penumbra.dex.Position
	12, // 23: penumbra.dex.PositionOpen.initial_reserves:type_name -> penumbra.dex.Reserves
	14, // 24: penumbra.dex.PositionClose.position_id:type_name -> penumbra.dex.PositionId
	14, // 25: penumbra.dex.PositionWithdraw.position_id:type_name -> penumbra.dex.PositionId
	26, // 26: penumbra.dex.PositionWithdraw.reserves_commitment:type_name -> penumbra.crypto.ValueCommitment
	14, // 27: penumbra.dex.PositionRewardClaim.position_id:type_name -> penumbra.dex.PositionId
	26, // 28: penumbra.dex.PositionRewardClaim.rewards_commitment:type_name -> penumbra.crypto.ValueCommitment
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_dex_proto_init() }
func file_dex_proto_init() {
	if File_dex_proto != nil {
		return
	}
	file_crypto_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dex_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Swap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapClaimBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimedSwapList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimedSwap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapPlaintext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockFlowCiphertext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSwapOutputData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reserves); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LpNft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionRewardClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dex_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dex_proto_goTypes,
		DependencyIndexes: file_dex_proto_depIdxs,
		EnumInfos:         file_dex_proto_enumTypes,
		MessageInfos:      file_dex_proto_msgTypes,
	}.Build()
	File_dex_proto = out.File
	file_dex_proto_rawDesc = nil
	file_dex_proto_goTypes = nil
	file_dex_proto_depIdxs = nil
}
