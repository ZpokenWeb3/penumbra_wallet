// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: chain.proto

package go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Global chain configuration data, such as chain ID, epoch duration, etc.
type ChainParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the chain.
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The duration of each epoch, in number of blocks.
	EpochDuration uint64 `protobuf:"varint,2,opt,name=epoch_duration,json=epochDuration,proto3" json:"epoch_duration,omitempty"`
	// The number of epochs an unbonding note for before being released.
	UnbondingEpochs uint64 `protobuf:"varint,3,opt,name=unbonding_epochs,json=unbondingEpochs,proto3" json:"unbonding_epochs,omitempty"`
	// The maximum number of validators in the consensus set.
	ActiveValidatorLimit uint64 `protobuf:"varint,4,opt,name=active_validator_limit,json=activeValidatorLimit,proto3" json:"active_validator_limit,omitempty"`
	// The base reward rate, expressed in basis points of basis points
	BaseRewardRate uint64 `protobuf:"varint,9,opt,name=base_reward_rate,json=baseRewardRate,proto3" json:"base_reward_rate,omitempty"`
	// The penalty for slashing due to misbehavior, expressed in basis points.
	SlashingPenaltyMisbehaviorBps uint64 `protobuf:"varint,5,opt,name=slashing_penalty_misbehavior_bps,json=slashingPenaltyMisbehaviorBps,proto3" json:"slashing_penalty_misbehavior_bps,omitempty"`
	// The penalty for slashing due to downtime, expressed in basis points.
	SlashingPenaltyDowntimeBps uint64 `protobuf:"varint,10,opt,name=slashing_penalty_downtime_bps,json=slashingPenaltyDowntimeBps,proto3" json:"slashing_penalty_downtime_bps,omitempty"`
	// The number of blocks in the window to check for downtime.
	SignedBlocksWindowLen uint64 `protobuf:"varint,11,opt,name=signed_blocks_window_len,json=signedBlocksWindowLen,proto3" json:"signed_blocks_window_len,omitempty"`
	// The maximum number of blocks in the window each validator can miss signing without slashing.
	MissedBlocksMaximum uint64 `protobuf:"varint,12,opt,name=missed_blocks_maximum,json=missedBlocksMaximum,proto3" json:"missed_blocks_maximum,omitempty"`
	// Whether IBC (forming connections, processing IBC packets) is enabled.
	IbcEnabled bool `protobuf:"varint,6,opt,name=ibc_enabled,json=ibcEnabled,proto3" json:"ibc_enabled,omitempty"`
	// Whether inbound ICS-20 transfers are enabled
	InboundIcs20TransfersEnabled bool `protobuf:"varint,7,opt,name=inbound_ics20_transfers_enabled,json=inboundIcs20TransfersEnabled,proto3" json:"inbound_ics20_transfers_enabled,omitempty"`
	// Whether outbound ICS-20 transfers are enabled
	OutboundIcs20TransfersEnabled bool `protobuf:"varint,8,opt,name=outbound_ics20_transfers_enabled,json=outboundIcs20TransfersEnabled,proto3" json:"outbound_ics20_transfers_enabled,omitempty"`
	// The number of blocks during which a proposal is voted on.
	ProposalVotingBlocks uint64 `protobuf:"varint,20,opt,name=proposal_voting_blocks,json=proposalVotingBlocks,proto3" json:"proposal_voting_blocks,omitempty"`
	// The deposit required to create a proposal.
	ProposalDepositAmount uint64 `protobuf:"varint,21,opt,name=proposal_deposit_amount,json=proposalDepositAmount,proto3" json:"proposal_deposit_amount,omitempty"`
	// The quorum required for a proposal to be considered valid, as a fraction of the total stake
	// weight of the network.
	ProposalValidQuorum *Ratio `protobuf:"bytes,22,opt,name=proposal_valid_quorum,json=proposalValidQuorum,proto3" json:"proposal_valid_quorum,omitempty"`
	// The threshold for a proposal to pass voting, as a ratio of "yes" votes over "no" votes.
	ProposalPassThreshold *Ratio `protobuf:"bytes,23,opt,name=proposal_pass_threshold,json=proposalPassThreshold,proto3" json:"proposal_pass_threshold,omitempty"`
	// The threshold for a proposal to be vetoed, regardless of whether the "yes" and "no" votes would
	// have passed it, as a ratio of "no with veto" votes over all total votes.
	ProposalVetoThreshold *Ratio `protobuf:"bytes,24,opt,name=proposal_veto_threshold,json=proposalVetoThreshold,proto3" json:"proposal_veto_threshold,omitempty"`
}

func (x *ChainParameters) Reset() {
	*x = ChainParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainParameters) ProtoMessage() {}

func (x *ChainParameters) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainParameters.ProtoReflect.Descriptor instead.
func (*ChainParameters) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{0}
}

func (x *ChainParameters) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *ChainParameters) GetEpochDuration() uint64 {
	if x != nil {
		return x.EpochDuration
	}
	return 0
}

func (x *ChainParameters) GetUnbondingEpochs() uint64 {
	if x != nil {
		return x.UnbondingEpochs
	}
	return 0
}

func (x *ChainParameters) GetActiveValidatorLimit() uint64 {
	if x != nil {
		return x.ActiveValidatorLimit
	}
	return 0
}

func (x *ChainParameters) GetBaseRewardRate() uint64 {
	if x != nil {
		return x.BaseRewardRate
	}
	return 0
}

func (x *ChainParameters) GetSlashingPenaltyMisbehaviorBps() uint64 {
	if x != nil {
		return x.SlashingPenaltyMisbehaviorBps
	}
	return 0
}

func (x *ChainParameters) GetSlashingPenaltyDowntimeBps() uint64 {
	if x != nil {
		return x.SlashingPenaltyDowntimeBps
	}
	return 0
}

func (x *ChainParameters) GetSignedBlocksWindowLen() uint64 {
	if x != nil {
		return x.SignedBlocksWindowLen
	}
	return 0
}

func (x *ChainParameters) GetMissedBlocksMaximum() uint64 {
	if x != nil {
		return x.MissedBlocksMaximum
	}
	return 0
}

func (x *ChainParameters) GetIbcEnabled() bool {
	if x != nil {
		return x.IbcEnabled
	}
	return false
}

func (x *ChainParameters) GetInboundIcs20TransfersEnabled() bool {
	if x != nil {
		return x.InboundIcs20TransfersEnabled
	}
	return false
}

func (x *ChainParameters) GetOutboundIcs20TransfersEnabled() bool {
	if x != nil {
		return x.OutboundIcs20TransfersEnabled
	}
	return false
}

func (x *ChainParameters) GetProposalVotingBlocks() uint64 {
	if x != nil {
		return x.ProposalVotingBlocks
	}
	return 0
}

func (x *ChainParameters) GetProposalDepositAmount() uint64 {
	if x != nil {
		return x.ProposalDepositAmount
	}
	return 0
}

func (x *ChainParameters) GetProposalValidQuorum() *Ratio {
	if x != nil {
		return x.ProposalValidQuorum
	}
	return nil
}

func (x *ChainParameters) GetProposalPassThreshold() *Ratio {
	if x != nil {
		return x.ProposalPassThreshold
	}
	return nil
}

func (x *ChainParameters) GetProposalVetoThreshold() *Ratio {
	if x != nil {
		return x.ProposalVetoThreshold
	}
	return nil
}

// The ratio between two numbers, used in governance to describe vote thresholds and quorums.
type Ratio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The numerator.
	Numerator uint64 `protobuf:"varint,1,opt,name=numerator,proto3" json:"numerator,omitempty"`
	// The denominator.
	Denominator uint64 `protobuf:"varint,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
}

func (x *Ratio) Reset() {
	*x = Ratio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ratio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ratio) ProtoMessage() {}

func (x *Ratio) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ratio.ProtoReflect.Descriptor instead.
func (*Ratio) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{1}
}

func (x *Ratio) GetNumerator() uint64 {
	if x != nil {
		return x.Numerator
	}
	return 0
}

func (x *Ratio) GetDenominator() uint64 {
	if x != nil {
		return x.Denominator
	}
	return 0
}

// Parameters for Fuzzy Message Detection
type FmdParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrecisionBits   uint32 `protobuf:"varint,1,opt,name=precision_bits,json=precisionBits,proto3" json:"precision_bits,omitempty"`
	AsOfBlockHeight uint64 `protobuf:"varint,2,opt,name=as_of_block_height,json=asOfBlockHeight,proto3" json:"as_of_block_height,omitempty"`
}

func (x *FmdParameters) Reset() {
	*x = FmdParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FmdParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FmdParameters) ProtoMessage() {}

func (x *FmdParameters) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FmdParameters.ProtoReflect.Descriptor instead.
func (*FmdParameters) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{2}
}

func (x *FmdParameters) GetPrecisionBits() uint32 {
	if x != nil {
		return x.PrecisionBits
	}
	return 0
}

func (x *FmdParameters) GetAsOfBlockHeight() uint64 {
	if x != nil {
		return x.AsOfBlockHeight
	}
	return 0
}

// TODO: delete with legacy code
// Information about a given asset at a given time (as specified by block
// height). Currently this only contains the total supply.
type AssetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId         *AssetId `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Denom           *Denom   `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	AsOfBlockHeight uint64   `protobuf:"varint,3,opt,name=as_of_block_height,json=asOfBlockHeight,proto3" json:"as_of_block_height,omitempty"`
	TotalSupply     uint64   `protobuf:"varint,4,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
}

func (x *AssetInfo) Reset() {
	*x = AssetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetInfo) ProtoMessage() {}

func (x *AssetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetInfo.ProtoReflect.Descriptor instead.
func (*AssetInfo) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{3}
}

func (x *AssetInfo) GetAssetId() *AssetId {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *AssetInfo) GetDenom() *Denom {
	if x != nil {
		return x.Denom
	}
	return nil
}

func (x *AssetInfo) GetAsOfBlockHeight() uint64 {
	if x != nil {
		return x.AsOfBlockHeight
	}
	return 0
}

func (x *AssetInfo) GetTotalSupply() uint64 {
	if x != nil {
		return x.TotalSupply
	}
	return 0
}

// Contains the minimum data needed to update client state.
type CompactBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// NotePayloads describing new notes.
	NotePayloads []*AnnotatedNotePayload `protobuf:"bytes,2,rep,name=note_payloads,json=notePayloads,proto3" json:"note_payloads,omitempty"`
	// Nullifiers identifying spent notes.
	Nullifiers []*Nullifier `protobuf:"bytes,3,rep,name=nullifiers,proto3" json:"nullifiers,omitempty"`
	// The block root of this block.
	BlockRoot *MerkleRoot `protobuf:"bytes,4,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	// The epoch root of this epoch (only present when the block is the last in an epoch).
	EpochRoot *MerkleRoot `protobuf:"bytes,5,opt,name=epoch_root,json=epochRoot,proto3" json:"epoch_root,omitempty"`
	// Newly quarantined things in this block.
	Quarantined *Quarantined `protobuf:"bytes,6,opt,name=quarantined,proto3" json:"quarantined,omitempty"`
	// Validators slashed in this block.
	Slashed []*IdentityKey `protobuf:"bytes,16,rep,name=slashed,proto3" json:"slashed,omitempty"`
	// If a proposal started voting in this block, this is set to `true`.
	ProposalStarted bool `protobuf:"varint,20,opt,name=proposal_started,json=proposalStarted,proto3" json:"proposal_started,omitempty"`
	// Latest Fuzzy Message Detection parameters.
	FmdParameters *FmdParameters `protobuf:"bytes,100,opt,name=fmd_parameters,json=fmdParameters,proto3" json:"fmd_parameters,omitempty"`
}

func (x *CompactBlock) Reset() {
	*x = CompactBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactBlock) ProtoMessage() {}

func (x *CompactBlock) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactBlock.ProtoReflect.Descriptor instead.
func (*CompactBlock) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{4}
}

func (x *CompactBlock) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CompactBlock) GetNotePayloads() []*AnnotatedNotePayload {
	if x != nil {
		return x.NotePayloads
	}
	return nil
}

func (x *CompactBlock) GetNullifiers() []*Nullifier {
	if x != nil {
		return x.Nullifiers
	}
	return nil
}

func (x *CompactBlock) GetBlockRoot() *MerkleRoot {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *CompactBlock) GetEpochRoot() *MerkleRoot {
	if x != nil {
		return x.EpochRoot
	}
	return nil
}

func (x *CompactBlock) GetQuarantined() *Quarantined {
	if x != nil {
		return x.Quarantined
	}
	return nil
}

func (x *CompactBlock) GetSlashed() []*IdentityKey {
	if x != nil {
		return x.Slashed
	}
	return nil
}

func (x *CompactBlock) GetProposalStarted() bool {
	if x != nil {
		return x.ProposalStarted
	}
	return false
}

func (x *CompactBlock) GetFmdParameters() *FmdParameters {
	if x != nil {
		return x.FmdParameters
	}
	return nil
}

// A note payload, annotated with the note source.
type AnnotatedNotePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *NotePayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Source  *NoteSource  `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *AnnotatedNotePayload) Reset() {
	*x = AnnotatedNotePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotatedNotePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotatedNotePayload) ProtoMessage() {}

func (x *AnnotatedNotePayload) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotatedNotePayload.ProtoReflect.Descriptor instead.
func (*AnnotatedNotePayload) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{5}
}

func (x *AnnotatedNotePayload) GetPayload() *NotePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *AnnotatedNotePayload) GetSource() *NoteSource {
	if x != nil {
		return x.Source
	}
	return nil
}

type KnownAssets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []*Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *KnownAssets) Reset() {
	*x = KnownAssets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnownAssets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnownAssets) ProtoMessage() {}

func (x *KnownAssets) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnownAssets.ProtoReflect.Descriptor instead.
func (*KnownAssets) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{6}
}

func (x *KnownAssets) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

// A spicy transaction ID
type NoteSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *NoteSource) Reset() {
	*x = NoteSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteSource) ProtoMessage() {}

func (x *NoteSource) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteSource.ProtoReflect.Descriptor instead.
func (*NoteSource) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{7}
}

func (x *NoteSource) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// A spicier transaction ID: one which can be missing
type DelibleNoteSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *NoteSource `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *DelibleNoteSource) Reset() {
	*x = DelibleNoteSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelibleNoteSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelibleNoteSource) ProtoMessage() {}

func (x *DelibleNoteSource) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelibleNoteSource.ProtoReflect.Descriptor instead.
func (*DelibleNoteSource) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{8}
}

func (x *DelibleNoteSource) GetSource() *NoteSource {
	if x != nil {
		return x.Source
	}
	return nil
}

type GenesisAppState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainParams *ChainParameters              `protobuf:"bytes,1,opt,name=chain_params,json=chainParams,proto3" json:"chain_params,omitempty"`
	Validators  []*Validator                  `protobuf:"bytes,2,rep,name=validators,proto3" json:"validators,omitempty"`
	Allocations []*GenesisAppState_Allocation `protobuf:"bytes,3,rep,name=allocations,proto3" json:"allocations,omitempty"`
}

func (x *GenesisAppState) Reset() {
	*x = GenesisAppState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisAppState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisAppState) ProtoMessage() {}

func (x *GenesisAppState) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisAppState.ProtoReflect.Descriptor instead.
func (*GenesisAppState) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{9}
}

func (x *GenesisAppState) GetChainParams() *ChainParameters {
	if x != nil {
		return x.ChainParams
	}
	return nil
}

func (x *GenesisAppState) GetValidators() []*Validator {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *GenesisAppState) GetAllocations() []*GenesisAppState_Allocation {
	if x != nil {
		return x.Allocations
	}
	return nil
}

type Quarantined struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerEpoch []*Quarantined_EpochEntry `protobuf:"bytes,1,rep,name=per_epoch,json=perEpoch,proto3" json:"per_epoch,omitempty"`
}

func (x *Quarantined) Reset() {
	*x = Quarantined{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quarantined) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quarantined) ProtoMessage() {}

func (x *Quarantined) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quarantined.ProtoReflect.Descriptor instead.
func (*Quarantined) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{10}
}

func (x *Quarantined) GetPerEpoch() []*Quarantined_EpochEntry {
	if x != nil {
		return x.PerEpoch
	}
	return nil
}

type Slashed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validators []*IdentityKey `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (x *Slashed) Reset() {
	*x = Slashed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slashed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slashed) ProtoMessage() {}

func (x *Slashed) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slashed.ProtoReflect.Descriptor instead.
func (*Slashed) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{11}
}

func (x *Slashed) GetValidators() []*IdentityKey {
	if x != nil {
		return x.Validators
	}
	return nil
}

type GenesisAppState_Allocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount  uint64   `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Denom   string   `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Address *Address `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GenesisAppState_Allocation) Reset() {
	*x = GenesisAppState_Allocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisAppState_Allocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisAppState_Allocation) ProtoMessage() {}

func (x *GenesisAppState_Allocation) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisAppState_Allocation.ProtoReflect.Descriptor instead.
func (*GenesisAppState_Allocation) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{9, 0}
}

func (x *GenesisAppState_Allocation) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GenesisAppState_Allocation) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *GenesisAppState_Allocation) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type Quarantined_Unbonding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotePayloads []*AnnotatedNotePayload `protobuf:"bytes,1,rep,name=note_payloads,json=notePayloads,proto3" json:"note_payloads,omitempty"`
	Nullifiers   []*Nullifier            `protobuf:"bytes,2,rep,name=nullifiers,proto3" json:"nullifiers,omitempty"`
}

func (x *Quarantined_Unbonding) Reset() {
	*x = Quarantined_Unbonding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quarantined_Unbonding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quarantined_Unbonding) ProtoMessage() {}

func (x *Quarantined_Unbonding) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quarantined_Unbonding.ProtoReflect.Descriptor instead.
func (*Quarantined_Unbonding) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Quarantined_Unbonding) GetNotePayloads() []*AnnotatedNotePayload {
	if x != nil {
		return x.NotePayloads
	}
	return nil
}

func (x *Quarantined_Unbonding) GetNullifiers() []*Nullifier {
	if x != nil {
		return x.Nullifiers
	}
	return nil
}

type Quarantined_ValidatorEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityKey *IdentityKey           `protobuf:"bytes,1,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	Unbonding   *Quarantined_Unbonding `protobuf:"bytes,2,opt,name=unbonding,proto3" json:"unbonding,omitempty"`
}

func (x *Quarantined_ValidatorEntry) Reset() {
	*x = Quarantined_ValidatorEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quarantined_ValidatorEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quarantined_ValidatorEntry) ProtoMessage() {}

func (x *Quarantined_ValidatorEntry) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quarantined_ValidatorEntry.ProtoReflect.Descriptor instead.
func (*Quarantined_ValidatorEntry) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{10, 1}
}

func (x *Quarantined_ValidatorEntry) GetIdentityKey() *IdentityKey {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

func (x *Quarantined_ValidatorEntry) GetUnbonding() *Quarantined_Unbonding {
	if x != nil {
		return x.Unbonding
	}
	return nil
}

type Quarantined_Scheduled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerValidator []*Quarantined_ValidatorEntry `protobuf:"bytes,1,rep,name=per_validator,json=perValidator,proto3" json:"per_validator,omitempty"`
}

func (x *Quarantined_Scheduled) Reset() {
	*x = Quarantined_Scheduled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quarantined_Scheduled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quarantined_Scheduled) ProtoMessage() {}

func (x *Quarantined_Scheduled) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quarantined_Scheduled.ProtoReflect.Descriptor instead.
func (*Quarantined_Scheduled) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{10, 2}
}

func (x *Quarantined_Scheduled) GetPerValidator() []*Quarantined_ValidatorEntry {
	if x != nil {
		return x.PerValidator
	}
	return nil
}

type Quarantined_EpochEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnbondingEpoch uint64                 `protobuf:"varint,1,opt,name=unbonding_epoch,json=unbondingEpoch,proto3" json:"unbonding_epoch,omitempty"`
	Scheduled      *Quarantined_Scheduled `protobuf:"bytes,2,opt,name=scheduled,proto3" json:"scheduled,omitempty"`
}

func (x *Quarantined_EpochEntry) Reset() {
	*x = Quarantined_EpochEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quarantined_EpochEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quarantined_EpochEntry) ProtoMessage() {}

func (x *Quarantined_EpochEntry) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quarantined_EpochEntry.ProtoReflect.Descriptor instead.
func (*Quarantined_EpochEntry) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{10, 3}
}

func (x *Quarantined_EpochEntry) GetUnbondingEpoch() uint64 {
	if x != nil {
		return x.UnbondingEpoch
	}
	return 0
}

func (x *Quarantined_EpochEntry) GetScheduled() *Quarantined_Scheduled {
	if x != nil {
		return x.Scheduled
	}
	return nil
}

var File_chain_proto protoreflect.FileDescriptor

var file_chain_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x0c, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x07, 0x0a, 0x0f, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x73, 0x6c, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x6d, 0x69,
	0x73, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1d, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x4d, 0x69, 0x73, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x42,
	0x70, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x62, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x73, 0x6c, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x70, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x65,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x12, 0x32,
	0x0a, 0x15, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6d,
	0x69, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x62, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x62, 0x63, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69,
	0x63, 0x73, 0x32, 0x30, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x63, 0x73, 0x32, 0x30, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x20, 0x6f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x63, 0x73, 0x32, 0x30, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x63,
	0x73, 0x32, 0x30, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f,
	0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x49, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x4d, 0x0a, 0x17,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x61,
	0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4d, 0x0a, 0x17, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x65, 0x74,
	0x6f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x47, 0x0a, 0x05, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x22, 0x63, 0x0a, 0x0d, 0x46, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x61,
	0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x73, 0x4f, 0x66, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x09, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x64,
	0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6e,
	0x6f, 0x6d, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x73, 0x5f,
	0x6f, 0x66, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x73, 0x4f, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x22, 0x8d, 0x04, 0x0a, 0x0c, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x0c, 0x6e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x3a, 0x0a,
	0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x6e,
	0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x71, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x36, 0x0a, 0x07, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x52,
	0x07, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x66, 0x6d, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x46, 0x6d, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x66, 0x6d, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x3d,
	0x0a, 0x0b, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0x22, 0x0a,
	0x0a, 0x4e, 0x6f, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x22, 0x47, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x69, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xce, 0x02, 0x0a, 0x0f, 0x47,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x4c, 0x0a,
	0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x41, 0x70, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x6e, 0x0a, 0x0a, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xda, 0x04, 0x0a, 0x0b,
	0x51, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x70,
	0x65, 0x72, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x51, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x65, 0x72, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x1a, 0x92, 0x01, 0x0a, 0x09, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x49,
	0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0c, 0x6e, 0x6f, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x6e, 0x75, 0x6c,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x1a, 0x96, 0x01, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x09, 0x75, 0x6e, 0x62,
	0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x51, 0x75,
	0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x09, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x5c,
	0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x0d, 0x70,
	0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x70, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x7a, 0x0a, 0x0a,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e,
	0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x22, 0x47, 0x0a, 0x07, 0x53, 0x6c, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2d, 0x7a, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chain_proto_rawDescOnce sync.Once
	file_chain_proto_rawDescData = file_chain_proto_rawDesc
)

func file_chain_proto_rawDescGZIP() []byte {
	file_chain_proto_rawDescOnce.Do(func() {
		file_chain_proto_rawDescData = protoimpl.X.CompressGZIP(file_chain_proto_rawDescData)
	})
	return file_chain_proto_rawDescData
}

var file_chain_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_chain_proto_goTypes = []interface{}{
	(*ChainParameters)(nil),            // 0: penumbra.chain.ChainParameters
	(*Ratio)(nil),                      // 1: penumbra.chain.Ratio
	(*FmdParameters)(nil),              // 2: penumbra.chain.FmdParameters
	(*AssetInfo)(nil),                  // 3: penumbra.chain.AssetInfo
	(*CompactBlock)(nil),               // 4: penumbra.chain.CompactBlock
	(*AnnotatedNotePayload)(nil),       // 5: penumbra.chain.AnnotatedNotePayload
	(*KnownAssets)(nil),                // 6: penumbra.chain.KnownAssets
	(*NoteSource)(nil),                 // 7: penumbra.chain.NoteSource
	(*DelibleNoteSource)(nil),          // 8: penumbra.chain.DelibleNoteSource
	(*GenesisAppState)(nil),            // 9: penumbra.chain.GenesisAppState
	(*Quarantined)(nil),                // 10: penumbra.chain.Quarantined
	(*Slashed)(nil),                    // 11: penumbra.chain.Slashed
	(*GenesisAppState_Allocation)(nil), // 12: penumbra.chain.GenesisAppState.Allocation
	(*Quarantined_Unbonding)(nil),      // 13: penumbra.chain.Quarantined.Unbonding
	(*Quarantined_ValidatorEntry)(nil), // 14: penumbra.chain.Quarantined.ValidatorEntry
	(*Quarantined_Scheduled)(nil),      // 15: penumbra.chain.Quarantined.Scheduled
	(*Quarantined_EpochEntry)(nil),     // 16: penumbra.chain.Quarantined.EpochEntry
	(*AssetId)(nil),                    // 17: penumbra.crypto.AssetId
	(*Denom)(nil),                      // 18: penumbra.crypto.Denom
	(*Nullifier)(nil),                  // 19: penumbra.crypto.Nullifier
	(*MerkleRoot)(nil),                 // 20: penumbra.crypto.MerkleRoot
	(*IdentityKey)(nil),                // 21: penumbra.crypto.IdentityKey
	(*NotePayload)(nil),                // 22: penumbra.crypto.NotePayload
	(*Asset)(nil),                      // 23: penumbra.crypto.Asset
	(*Validator)(nil),                  // 24: penumbra.stake.Validator
	(*Address)(nil),                    // 25: penumbra.crypto.Address
}
var file_chain_proto_depIdxs = []int32{
	1,  // 0: penumbra.chain.ChainParameters.proposal_valid_quorum:type_name -> penumbra.chain.Ratio
	1,  // 1: penumbra.chain.ChainParameters.proposal_pass_threshold:type_name -> penumbra.chain.Ratio
	1,  // 2: penumbra.chain.ChainParameters.proposal_veto_threshold:type_name -> penumbra.chain.Ratio
	17, // 3: penumbra.chain.AssetInfo.asset_id:type_name -> penumbra.crypto.AssetId
	18, // 4: penumbra.chain.AssetInfo.denom:type_name -> penumbra.crypto.Denom
	5,  // 5: penumbra.chain.CompactBlock.note_payloads:type_name -> penumbra.chain.AnnotatedNotePayload
	19, // 6: penumbra.chain.CompactBlock.nullifiers:type_name -> penumbra.crypto.Nullifier
	20, // 7: penumbra.chain.CompactBlock.block_root:type_name -> penumbra.crypto.MerkleRoot
	20, // 8: penumbra.chain.CompactBlock.epoch_root:type_name -> penumbra.crypto.MerkleRoot
	10, // 9: penumbra.chain.CompactBlock.quarantined:type_name -> penumbra.chain.Quarantined
	21, // 10: penumbra.chain.CompactBlock.slashed:type_name -> penumbra.crypto.IdentityKey
	2,  // 11: penumbra.chain.CompactBlock.fmd_parameters:type_name -> penumbra.chain.FmdParameters
	22, // 12: penumbra.chain.AnnotatedNotePayload.payload:type_name -> penumbra.crypto.NotePayload
	7,  // 13: penumbra.chain.AnnotatedNotePayload.source:type_name -> penumbra.chain.NoteSource
	23, // 14: penumbra.chain.KnownAssets.assets:type_name -> penumbra.crypto.Asset
	7,  // 15: penumbra.chain.DelibleNoteSource.source:type_name -> penumbra.chain.NoteSource
	0,  // 16: penumbra.chain.GenesisAppState.chain_params:type_name -> penumbra.chain.ChainParameters
	24, // 17: penumbra.chain.GenesisAppState.validators:type_name -> penumbra.stake.Validator
	12, // 18: penumbra.chain.GenesisAppState.allocations:type_name -> penumbra.chain.GenesisAppState.Allocation
	16, // 19: penumbra.chain.Quarantined.per_epoch:type_name -> penumbra.chain.Quarantined.EpochEntry
	21, // 20: penumbra.chain.Slashed.validators:type_name -> penumbra.crypto.IdentityKey
	25, // 21: penumbra.chain.GenesisAppState.Allocation.address:type_name -> penumbra.crypto.Address
	5,  // 22: penumbra.chain.Quarantined.Unbonding.note_payloads:type_name -> penumbra.chain.AnnotatedNotePayload
	19, // 23: penumbra.chain.Quarantined.Unbonding.nullifiers:type_name -> penumbra.crypto.Nullifier
	21, // 24: penumbra.chain.Quarantined.ValidatorEntry.identity_key:type_name -> penumbra.crypto.IdentityKey
	13, // 25: penumbra.chain.Quarantined.ValidatorEntry.unbonding:type_name -> penumbra.chain.Quarantined.Unbonding
	14, // 26: penumbra.chain.Quarantined.Scheduled.per_validator:type_name -> penumbra.chain.Quarantined.ValidatorEntry
	15, // 27: penumbra.chain.Quarantined.EpochEntry.scheduled:type_name -> penumbra.chain.Quarantined.Scheduled
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_chain_proto_init() }
func file_chain_proto_init() {
	if File_chain_proto != nil {
		return
	}
	file_crypto_proto_init()
	file_stake_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ratio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FmdParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotatedNotePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnownAssets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelibleNoteSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisAppState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quarantined); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slashed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisAppState_Allocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quarantined_Unbonding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quarantined_ValidatorEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quarantined_Scheduled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quarantined_EpochEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chain_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chain_proto_goTypes,
		DependencyIndexes: file_chain_proto_depIdxs,
		MessageInfos:      file_chain_proto_msgTypes,
	}.Build()
	File_chain_proto = out.File
	file_chain_proto_rawDesc = nil
	file_chain_proto_goTypes = nil
	file_chain_proto_depIdxs = nil
}
