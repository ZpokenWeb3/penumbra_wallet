// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: sighash.proto

package go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The content of a transaction, except for authorization signatures, for use
// as a sighash input.
//
// Analogue of TransactionBody.
type SigHashTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of actions (state changes) performed by this transaction.
	Actions []*SigHashAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	// The root of some previous state of the note commitment tree.
	Anchor []byte `protobuf:"bytes,2,opt,name=anchor,proto3" json:"anchor,omitempty"`
	// The maximum height that this transaction can be included in the chain.
	ExpiryHeight uint32 `protobuf:"varint,3,opt,name=expiry_height,json=expiryHeight,proto3" json:"expiry_height,omitempty"`
	// The chain this transaction is intended for.  Including this prevents
	// replaying a transaction on one chain onto a different chain.
	ChainId string `protobuf:"bytes,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The transaction fee.
	Fee *Fee `protobuf:"bytes,5,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *SigHashTransaction) Reset() {
	*x = SigHashTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sighash_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigHashTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigHashTransaction) ProtoMessage() {}

func (x *SigHashTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_sighash_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigHashTransaction.ProtoReflect.Descriptor instead.
func (*SigHashTransaction) Descriptor() ([]byte, []int) {
	return file_sighash_proto_rawDescGZIP(), []int{0}
}

func (x *SigHashTransaction) GetActions() []*SigHashAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *SigHashTransaction) GetAnchor() []byte {
	if x != nil {
		return x.Anchor
	}
	return nil
}

func (x *SigHashTransaction) GetExpiryHeight() uint32 {
	if x != nil {
		return x.ExpiryHeight
	}
	return 0
}

func (x *SigHashTransaction) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *SigHashTransaction) GetFee() *Fee {
	if x != nil {
		return x.Fee
	}
	return nil
}

// Analogue of Action
type SigHashAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//	*SigHashAction_Spend
	//	*SigHashAction_Output
	//	*SigHashAction_Delegate
	//	*SigHashAction_Undelegate
	//	*SigHashAction_ValidatorDefinition
	//	*SigHashAction_IbcAction
	Action isSigHashAction_Action `protobuf_oneof:"action"`
}

func (x *SigHashAction) Reset() {
	*x = SigHashAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sighash_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigHashAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigHashAction) ProtoMessage() {}

func (x *SigHashAction) ProtoReflect() protoreflect.Message {
	mi := &file_sighash_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigHashAction.ProtoReflect.Descriptor instead.
func (*SigHashAction) Descriptor() ([]byte, []int) {
	return file_sighash_proto_rawDescGZIP(), []int{1}
}

func (m *SigHashAction) GetAction() isSigHashAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *SigHashAction) GetSpend() *SpendBody {
	if x, ok := x.GetAction().(*SigHashAction_Spend); ok {
		return x.Spend
	}
	return nil
}

func (x *SigHashAction) GetOutput() *Output {
	if x, ok := x.GetAction().(*SigHashAction_Output); ok {
		return x.Output
	}
	return nil
}

func (x *SigHashAction) GetDelegate() *Delegate {
	if x, ok := x.GetAction().(*SigHashAction_Delegate); ok {
		return x.Delegate
	}
	return nil
}

func (x *SigHashAction) GetUndelegate() *Undelegate {
	if x, ok := x.GetAction().(*SigHashAction_Undelegate); ok {
		return x.Undelegate
	}
	return nil
}

func (x *SigHashAction) GetValidatorDefinition() *ValidatorDefinition {
	if x, ok := x.GetAction().(*SigHashAction_ValidatorDefinition); ok {
		return x.ValidatorDefinition
	}
	return nil
}

func (x *SigHashAction) GetIbcAction() *IBCAction {
	if x, ok := x.GetAction().(*SigHashAction_IbcAction); ok {
		return x.IbcAction
	}
	return nil
}

type isSigHashAction_Action interface {
	isSigHashAction_Action()
}

type SigHashAction_Spend struct {
	Spend *SpendBody `protobuf:"bytes,1,opt,name=spend,proto3,oneof"`
}

type SigHashAction_Output struct {
	Output *Output `protobuf:"bytes,2,opt,name=output,proto3,oneof"`
}

type SigHashAction_Delegate struct {
	Delegate *Delegate `protobuf:"bytes,3,opt,name=delegate,proto3,oneof"`
}

type SigHashAction_Undelegate struct {
	Undelegate *Undelegate `protobuf:"bytes,4,opt,name=undelegate,proto3,oneof"`
}

type SigHashAction_ValidatorDefinition struct {
	ValidatorDefinition *ValidatorDefinition `protobuf:"bytes,5,opt,name=validator_definition,json=validatorDefinition,proto3,oneof"`
}

type SigHashAction_IbcAction struct {
	IbcAction *IBCAction `protobuf:"bytes,6,opt,name=ibc_action,json=ibcAction,proto3,oneof"`
}

func (*SigHashAction_Spend) isSigHashAction_Action() {}

func (*SigHashAction_Output) isSigHashAction_Action() {}

func (*SigHashAction_Delegate) isSigHashAction_Action() {}

func (*SigHashAction_Undelegate) isSigHashAction_Action() {}

func (*SigHashAction_ValidatorDefinition) isSigHashAction_Action() {}

func (*SigHashAction_IbcAction) isSigHashAction_Action() {}

var File_sighash_proto protoreflect.FileDescriptor

var file_sighash_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x69, 0x67, 0x68, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x73, 0x69, 0x67, 0x68, 0x61, 0x73,
	0x68, 0x1a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x09, 0x69, 0x62, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x01, 0x0a,
	0x12, 0x53, 0x69, 0x67, 0x48, 0x61, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x73, 0x69, 0x67, 0x68, 0x61, 0x73, 0x68, 0x2e, 0x53, 0x69, 0x67, 0x48, 0x61, 0x73, 0x68, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x03,
	0x66, 0x65, 0x65, 0x22, 0x94, 0x03, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x48, 0x61, 0x73, 0x68, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x36,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x3c,
	0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x14,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x62, 0x63, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x49, 0x42, 0x43, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x62, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2d, 0x7a, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sighash_proto_rawDescOnce sync.Once
	file_sighash_proto_rawDescData = file_sighash_proto_rawDesc
)

func file_sighash_proto_rawDescGZIP() []byte {
	file_sighash_proto_rawDescOnce.Do(func() {
		file_sighash_proto_rawDescData = protoimpl.X.CompressGZIP(file_sighash_proto_rawDescData)
	})
	return file_sighash_proto_rawDescData
}

var file_sighash_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_sighash_proto_goTypes = []interface{}{
	(*SigHashTransaction)(nil),  // 0: penumbra.sighash.SigHashTransaction
	(*SigHashAction)(nil),       // 1: penumbra.sighash.SigHashAction
	(*Fee)(nil),                 // 2: penumbra.transaction.Fee
	(*SpendBody)(nil),           // 3: penumbra.transaction.SpendBody
	(*Output)(nil),              // 4: penumbra.transaction.Output
	(*Delegate)(nil),            // 5: penumbra.stake.Delegate
	(*Undelegate)(nil),          // 6: penumbra.stake.Undelegate
	(*ValidatorDefinition)(nil), // 7: penumbra.stake.ValidatorDefinition
	(*IBCAction)(nil),           // 8: penumbra.ibc.IBCAction
}
var file_sighash_proto_depIdxs = []int32{
	1, // 0: penumbra.sighash.SigHashTransaction.actions:type_name -> penumbra.sighash.SigHashAction
	2, // 1: penumbra.sighash.SigHashTransaction.fee:type_name -> penumbra.transaction.Fee
	3, // 2: penumbra.sighash.SigHashAction.spend:type_name -> penumbra.transaction.SpendBody
	4, // 3: penumbra.sighash.SigHashAction.output:type_name -> penumbra.transaction.Output
	5, // 4: penumbra.sighash.SigHashAction.delegate:type_name -> penumbra.stake.Delegate
	6, // 5: penumbra.sighash.SigHashAction.undelegate:type_name -> penumbra.stake.Undelegate
	7, // 6: penumbra.sighash.SigHashAction.validator_definition:type_name -> penumbra.stake.ValidatorDefinition
	8, // 7: penumbra.sighash.SigHashAction.ibc_action:type_name -> penumbra.ibc.IBCAction
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_sighash_proto_init() }
func file_sighash_proto_init() {
	if File_sighash_proto != nil {
		return
	}
	file_transaction_proto_init()
	file_stake_proto_init()
	file_ibc_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sighash_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigHashTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sighash_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigHashAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sighash_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SigHashAction_Spend)(nil),
		(*SigHashAction_Output)(nil),
		(*SigHashAction_Delegate)(nil),
		(*SigHashAction_Undelegate)(nil),
		(*SigHashAction_ValidatorDefinition)(nil),
		(*SigHashAction_IbcAction)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sighash_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sighash_proto_goTypes,
		DependencyIndexes: file_sighash_proto_depIdxs,
		MessageInfos:      file_sighash_proto_msgTypes,
	}.Build()
	File_sighash_proto = out.File
	file_sighash_proto_rawDesc = nil
	file_sighash_proto_goTypes = nil
	file_sighash_proto_depIdxs = nil
}
