syntax = "proto3";
package penumbra.custody;

option go_package = "github.com/penumbra-zone/penumbra/proto/go-proto";

import "transaction.proto";
import "crypto.proto";
import "stake.proto";
import "ibc.proto";

// The custody protocol is used by a wallet client to request authorization for
// a transaction they've constructed.
// 
// Modeling transaction authorization as an asynchronous RPC call encourages
// software to be written in a way that has a compatible data flow with a "soft
// HSM", threshold signing, a hardware wallet, etc.
// 
// The custody protocol does not trust the client to authorize spends, so
// custody requests must contain sufficient information for the custodian to
// understand the transaction and determine whether or not it should be
// authorized.
service CustodyProtocol {
    // Requests authorization of the transaction with the given description.
    rpc Authorize(AuthorizeRequest) returns (transaction.AuthorizationData);
}

message AuthorizeRequest {
    // The transaction plan to authorize.
    transaction.TransactionPlan plan = 1;
    // Identifies the FVK (and hence the spend authorization key) to use for signing.
    crypto.AccountID account_id = 2;
}
