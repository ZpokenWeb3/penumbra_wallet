syntax = "proto3";
package penumbra.client.oblivious;

import "crypto.proto";
import "chain.proto";
import "stake.proto";

// Methods for accessing chain state that are "oblivious" in the sense that they
// do not request specific portions of the chain state that could reveal private
// client data.  For instance, requesting all asset denominations is oblivious,
// but requesting the asset denomination for a specific asset id is not, because
// it reveals that the client has an interest in that asset specifically.
service ObliviousQuery {
  rpc CompactBlockRange(CompactBlockRangeRequest) returns (stream chain.CompactBlock);
  rpc ChainParameters(ChainParamsRequest) returns (chain.ChainParameters);
  rpc ValidatorInfo(ValidatorInfoRequest) returns (stream stake.ValidatorInfo);
  rpc AssetList(AssetListRequest) returns (chain.KnownAssets);
}

// Lists all assets in Asset Registry
message AssetListRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
}

// Requests a range of compact block data.
message CompactBlockRangeRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  // The start height of the range.
  uint64 start_height = 2;
  // The end height of the range.
  //
  // If unset, defaults to the latest block height.
  uint64 end_height = 3;
  // If set, keep the connection alive past end_height,
  // streaming new compact blocks as they are created.
  bool keep_alive = 4;
}

// Requests the global configuration data for the chain.
message ChainParamsRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
}

// Requests information on the chain's validators.
message ValidatorInfoRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  // Whether or not to return inactive validators
  bool show_inactive = 2;
}
