// source: transaction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.penumbra.transaction.ActionPlan');
goog.provide('proto.penumbra.transaction.ActionPlan.ActionCase');
goog.provide('proto.penumbra.transaction.Proposal');
goog.provide('proto.penumbra.transaction.Proposal.DaoSpend');
goog.provide('proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction');
goog.provide('proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction');
goog.provide('proto.penumbra.transaction.Proposal.Emergency');
goog.provide('proto.penumbra.transaction.Proposal.ParameterChange');
goog.provide('proto.penumbra.transaction.Proposal.ParameterChange.SetParameter');
goog.provide('proto.penumbra.transaction.Proposal.Payload');
goog.provide('proto.penumbra.transaction.Proposal.Payload.PayloadCase');
goog.provide('proto.penumbra.transaction.Proposal.Signaling');
goog.provide('proto.penumbra.transaction.ProposalSubmit');
goog.provide('proto.penumbra.transaction.TransactionPlan');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.penumbra.crypto.Address');
goog.require('proto.penumbra.crypto.Fee');
goog.require('proto.penumbra.dex.PositionClose');
goog.require('proto.penumbra.dex.PositionOpen');
goog.require('proto.penumbra.dex.PositionRewardClaim');
goog.require('proto.penumbra.dex.PositionWithdraw');
goog.require('proto.penumbra.ibc.IBCAction');
goog.require('proto.penumbra.stake.Delegate');
goog.require('proto.penumbra.stake.Undelegate');
goog.require('proto.penumbra.stake.ValidatorDefinition');
goog.require('proto.penumbra.transaction.AuthHash');
goog.require('proto.penumbra.transaction.CluePlan');
goog.require('proto.penumbra.transaction.DelegatorVotePlan');
goog.require('proto.penumbra.transaction.MemoPlan');
goog.require('proto.penumbra.transaction.OutputPlan');
goog.require('proto.penumbra.transaction.ProposalWithdrawPlan');
goog.require('proto.penumbra.transaction.SpendPlan');
goog.require('proto.penumbra.transaction.SwapClaimPlan');
goog.require('proto.penumbra.transaction.SwapPlan');
goog.require('proto.penumbra.transaction.ValidatorVote');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.transaction.ActionPlan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.penumbra.transaction.ActionPlan.oneofGroups_);
};
goog.inherits(proto.penumbra.transaction.ActionPlan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.transaction.ActionPlan.displayName = 'proto.penumbra.transaction.ActionPlan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.transaction.Proposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.transaction.Proposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.transaction.Proposal.displayName = 'proto.penumbra.transaction.Proposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.transaction.Proposal.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.penumbra.transaction.Proposal.Payload.oneofGroups_);
};
goog.inherits(proto.penumbra.transaction.Proposal.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.transaction.Proposal.Payload.displayName = 'proto.penumbra.transaction.Proposal.Payload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.transaction.Proposal.Signaling = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.transaction.Proposal.Signaling, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.transaction.Proposal.Signaling.displayName = 'proto.penumbra.transaction.Proposal.Signaling';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.transaction.Proposal.Emergency = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.transaction.Proposal.Emergency, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.transaction.Proposal.Emergency.displayName = 'proto.penumbra.transaction.Proposal.Emergency';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.transaction.Proposal.ParameterChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.penumbra.transaction.Proposal.ParameterChange.repeatedFields_, null);
};
goog.inherits(proto.penumbra.transaction.Proposal.ParameterChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.transaction.Proposal.ParameterChange.displayName = 'proto.penumbra.transaction.Proposal.ParameterChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.transaction.Proposal.ParameterChange.SetParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.transaction.Proposal.ParameterChange.SetParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.transaction.Proposal.ParameterChange.SetParameter.displayName = 'proto.penumbra.transaction.Proposal.ParameterChange.SetParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.transaction.Proposal.DaoSpend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.penumbra.transaction.Proposal.DaoSpend.repeatedFields_, null);
};
goog.inherits(proto.penumbra.transaction.Proposal.DaoSpend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.transaction.Proposal.DaoSpend.displayName = 'proto.penumbra.transaction.Proposal.DaoSpend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.displayName = 'proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.displayName = 'proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.transaction.ProposalSubmit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.transaction.ProposalSubmit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.transaction.ProposalSubmit.displayName = 'proto.penumbra.transaction.ProposalSubmit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.transaction.TransactionPlan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.penumbra.transaction.TransactionPlan.repeatedFields_, null);
};
goog.inherits(proto.penumbra.transaction.TransactionPlan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.transaction.TransactionPlan.displayName = 'proto.penumbra.transaction.TransactionPlan';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.penumbra.transaction.ActionPlan.oneofGroups_ = [[1,2,3,4,16,17,18,19,20,21,30,31,32,34,40,41]];

/**
 * @enum {number}
 */
proto.penumbra.transaction.ActionPlan.ActionCase = {
  ACTION_NOT_SET: 0,
  SPEND: 1,
  OUTPUT: 2,
  DELEGATE: 3,
  UNDELEGATE: 4,
  VALIDATOR_DEFINITION: 16,
  IBC_ACTION: 17,
  PROPOSAL_SUBMIT: 18,
  PROPOSAL_WITHDRAW: 19,
  VALIDATOR_VOTE: 20,
  DELEGATOR_VOTE: 21,
  POSITION_OPEN: 30,
  POSITION_CLOSE: 31,
  POSITION_WITHDRAW: 32,
  POSITION_REWARD_CLAIM: 34,
  SWAP: 40,
  SWAP_CLAIM: 41
};

/**
 * @return {proto.penumbra.transaction.ActionPlan.ActionCase}
 */
proto.penumbra.transaction.ActionPlan.prototype.getActionCase = function() {
  return /** @type {proto.penumbra.transaction.ActionPlan.ActionCase} */(jspb.Message.computeOneofCase(this, proto.penumbra.transaction.ActionPlan.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.transaction.ActionPlan.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.transaction.ActionPlan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.transaction.ActionPlan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.ActionPlan.toObject = function(includeInstance, msg) {
  var f, obj = {
    spend: (f = msg.getSpend()) && proto.penumbra.transaction.SpendPlan.toObject(includeInstance, f),
    output: (f = msg.getOutput()) && proto.penumbra.transaction.OutputPlan.toObject(includeInstance, f),
    delegate: (f = msg.getDelegate()) && proto.penumbra.stake.Delegate.toObject(includeInstance, f),
    undelegate: (f = msg.getUndelegate()) && proto.penumbra.stake.Undelegate.toObject(includeInstance, f),
    validatorDefinition: (f = msg.getValidatorDefinition()) && proto.penumbra.stake.ValidatorDefinition.toObject(includeInstance, f),
    ibcAction: (f = msg.getIbcAction()) && proto.penumbra.ibc.IBCAction.toObject(includeInstance, f),
    proposalSubmit: (f = msg.getProposalSubmit()) && proto.penumbra.transaction.ProposalSubmit.toObject(includeInstance, f),
    proposalWithdraw: (f = msg.getProposalWithdraw()) && proto.penumbra.transaction.ProposalWithdrawPlan.toObject(includeInstance, f),
    validatorVote: (f = msg.getValidatorVote()) && proto.penumbra.transaction.ValidatorVote.toObject(includeInstance, f),
    delegatorVote: (f = msg.getDelegatorVote()) && proto.penumbra.transaction.DelegatorVotePlan.toObject(includeInstance, f),
    positionOpen: (f = msg.getPositionOpen()) && proto.penumbra.dex.PositionOpen.toObject(includeInstance, f),
    positionClose: (f = msg.getPositionClose()) && proto.penumbra.dex.PositionClose.toObject(includeInstance, f),
    positionWithdraw: (f = msg.getPositionWithdraw()) && proto.penumbra.dex.PositionWithdraw.toObject(includeInstance, f),
    positionRewardClaim: (f = msg.getPositionRewardClaim()) && proto.penumbra.dex.PositionRewardClaim.toObject(includeInstance, f),
    swap: (f = msg.getSwap()) && proto.penumbra.transaction.SwapPlan.toObject(includeInstance, f),
    swapClaim: (f = msg.getSwapClaim()) && proto.penumbra.transaction.SwapClaimPlan.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.transaction.ActionPlan}
 */
proto.penumbra.transaction.ActionPlan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.transaction.ActionPlan;
  return proto.penumbra.transaction.ActionPlan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.transaction.ActionPlan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.transaction.ActionPlan}
 */
proto.penumbra.transaction.ActionPlan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.transaction.SpendPlan;
      reader.readMessage(value,proto.penumbra.transaction.SpendPlan.deserializeBinaryFromReader);
      msg.setSpend(value);
      break;
    case 2:
      var value = new proto.penumbra.transaction.OutputPlan;
      reader.readMessage(value,proto.penumbra.transaction.OutputPlan.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    case 3:
      var value = new proto.penumbra.stake.Delegate;
      reader.readMessage(value,proto.penumbra.stake.Delegate.deserializeBinaryFromReader);
      msg.setDelegate(value);
      break;
    case 4:
      var value = new proto.penumbra.stake.Undelegate;
      reader.readMessage(value,proto.penumbra.stake.Undelegate.deserializeBinaryFromReader);
      msg.setUndelegate(value);
      break;
    case 16:
      var value = new proto.penumbra.stake.ValidatorDefinition;
      reader.readMessage(value,proto.penumbra.stake.ValidatorDefinition.deserializeBinaryFromReader);
      msg.setValidatorDefinition(value);
      break;
    case 17:
      var value = new proto.penumbra.ibc.IBCAction;
      reader.readMessage(value,proto.penumbra.ibc.IBCAction.deserializeBinaryFromReader);
      msg.setIbcAction(value);
      break;
    case 18:
      var value = new proto.penumbra.transaction.ProposalSubmit;
      reader.readMessage(value,proto.penumbra.transaction.ProposalSubmit.deserializeBinaryFromReader);
      msg.setProposalSubmit(value);
      break;
    case 19:
      var value = new proto.penumbra.transaction.ProposalWithdrawPlan;
      reader.readMessage(value,proto.penumbra.transaction.ProposalWithdrawPlan.deserializeBinaryFromReader);
      msg.setProposalWithdraw(value);
      break;
    case 20:
      var value = new proto.penumbra.transaction.ValidatorVote;
      reader.readMessage(value,proto.penumbra.transaction.ValidatorVote.deserializeBinaryFromReader);
      msg.setValidatorVote(value);
      break;
    case 21:
      var value = new proto.penumbra.transaction.DelegatorVotePlan;
      reader.readMessage(value,proto.penumbra.transaction.DelegatorVotePlan.deserializeBinaryFromReader);
      msg.setDelegatorVote(value);
      break;
    case 30:
      var value = new proto.penumbra.dex.PositionOpen;
      reader.readMessage(value,proto.penumbra.dex.PositionOpen.deserializeBinaryFromReader);
      msg.setPositionOpen(value);
      break;
    case 31:
      var value = new proto.penumbra.dex.PositionClose;
      reader.readMessage(value,proto.penumbra.dex.PositionClose.deserializeBinaryFromReader);
      msg.setPositionClose(value);
      break;
    case 32:
      var value = new proto.penumbra.dex.PositionWithdraw;
      reader.readMessage(value,proto.penumbra.dex.PositionWithdraw.deserializeBinaryFromReader);
      msg.setPositionWithdraw(value);
      break;
    case 34:
      var value = new proto.penumbra.dex.PositionRewardClaim;
      reader.readMessage(value,proto.penumbra.dex.PositionRewardClaim.deserializeBinaryFromReader);
      msg.setPositionRewardClaim(value);
      break;
    case 40:
      var value = new proto.penumbra.transaction.SwapPlan;
      reader.readMessage(value,proto.penumbra.transaction.SwapPlan.deserializeBinaryFromReader);
      msg.setSwap(value);
      break;
    case 41:
      var value = new proto.penumbra.transaction.SwapClaimPlan;
      reader.readMessage(value,proto.penumbra.transaction.SwapClaimPlan.deserializeBinaryFromReader);
      msg.setSwapClaim(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.transaction.ActionPlan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.transaction.ActionPlan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.transaction.ActionPlan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.ActionPlan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpend();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.penumbra.transaction.SpendPlan.serializeBinaryToWriter
    );
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.penumbra.transaction.OutputPlan.serializeBinaryToWriter
    );
  }
  f = message.getDelegate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.penumbra.stake.Delegate.serializeBinaryToWriter
    );
  }
  f = message.getUndelegate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.penumbra.stake.Undelegate.serializeBinaryToWriter
    );
  }
  f = message.getValidatorDefinition();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.penumbra.stake.ValidatorDefinition.serializeBinaryToWriter
    );
  }
  f = message.getIbcAction();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.penumbra.ibc.IBCAction.serializeBinaryToWriter
    );
  }
  f = message.getProposalSubmit();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.penumbra.transaction.ProposalSubmit.serializeBinaryToWriter
    );
  }
  f = message.getProposalWithdraw();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.penumbra.transaction.ProposalWithdrawPlan.serializeBinaryToWriter
    );
  }
  f = message.getValidatorVote();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.penumbra.transaction.ValidatorVote.serializeBinaryToWriter
    );
  }
  f = message.getDelegatorVote();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.penumbra.transaction.DelegatorVotePlan.serializeBinaryToWriter
    );
  }
  f = message.getPositionOpen();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.penumbra.dex.PositionOpen.serializeBinaryToWriter
    );
  }
  f = message.getPositionClose();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.penumbra.dex.PositionClose.serializeBinaryToWriter
    );
  }
  f = message.getPositionWithdraw();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.penumbra.dex.PositionWithdraw.serializeBinaryToWriter
    );
  }
  f = message.getPositionRewardClaim();
  if (f != null) {
    writer.writeMessage(
      34,
      f,
      proto.penumbra.dex.PositionRewardClaim.serializeBinaryToWriter
    );
  }
  f = message.getSwap();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.penumbra.transaction.SwapPlan.serializeBinaryToWriter
    );
  }
  f = message.getSwapClaim();
  if (f != null) {
    writer.writeMessage(
      41,
      f,
      proto.penumbra.transaction.SwapClaimPlan.serializeBinaryToWriter
    );
  }
};


/**
 * optional SpendPlan spend = 1;
 * @return {?proto.penumbra.transaction.SpendPlan}
 */
proto.penumbra.transaction.ActionPlan.prototype.getSpend = function() {
  return /** @type{?proto.penumbra.transaction.SpendPlan} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.SpendPlan, 1));
};


/**
 * @param {?proto.penumbra.transaction.SpendPlan|undefined} value
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
*/
proto.penumbra.transaction.ActionPlan.prototype.setSpend = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.penumbra.transaction.ActionPlan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
 */
proto.penumbra.transaction.ActionPlan.prototype.clearSpend = function() {
  return this.setSpend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.ActionPlan.prototype.hasSpend = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OutputPlan output = 2;
 * @return {?proto.penumbra.transaction.OutputPlan}
 */
proto.penumbra.transaction.ActionPlan.prototype.getOutput = function() {
  return /** @type{?proto.penumbra.transaction.OutputPlan} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.OutputPlan, 2));
};


/**
 * @param {?proto.penumbra.transaction.OutputPlan|undefined} value
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
*/
proto.penumbra.transaction.ActionPlan.prototype.setOutput = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.penumbra.transaction.ActionPlan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
 */
proto.penumbra.transaction.ActionPlan.prototype.clearOutput = function() {
  return this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.ActionPlan.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional penumbra.stake.Delegate delegate = 3;
 * @return {?proto.penumbra.stake.Delegate}
 */
proto.penumbra.transaction.ActionPlan.prototype.getDelegate = function() {
  return /** @type{?proto.penumbra.stake.Delegate} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.stake.Delegate, 3));
};


/**
 * @param {?proto.penumbra.stake.Delegate|undefined} value
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
*/
proto.penumbra.transaction.ActionPlan.prototype.setDelegate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.penumbra.transaction.ActionPlan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
 */
proto.penumbra.transaction.ActionPlan.prototype.clearDelegate = function() {
  return this.setDelegate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.ActionPlan.prototype.hasDelegate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional penumbra.stake.Undelegate undelegate = 4;
 * @return {?proto.penumbra.stake.Undelegate}
 */
proto.penumbra.transaction.ActionPlan.prototype.getUndelegate = function() {
  return /** @type{?proto.penumbra.stake.Undelegate} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.stake.Undelegate, 4));
};


/**
 * @param {?proto.penumbra.stake.Undelegate|undefined} value
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
*/
proto.penumbra.transaction.ActionPlan.prototype.setUndelegate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.penumbra.transaction.ActionPlan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
 */
proto.penumbra.transaction.ActionPlan.prototype.clearUndelegate = function() {
  return this.setUndelegate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.ActionPlan.prototype.hasUndelegate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional penumbra.stake.ValidatorDefinition validator_definition = 16;
 * @return {?proto.penumbra.stake.ValidatorDefinition}
 */
proto.penumbra.transaction.ActionPlan.prototype.getValidatorDefinition = function() {
  return /** @type{?proto.penumbra.stake.ValidatorDefinition} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.stake.ValidatorDefinition, 16));
};


/**
 * @param {?proto.penumbra.stake.ValidatorDefinition|undefined} value
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
*/
proto.penumbra.transaction.ActionPlan.prototype.setValidatorDefinition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.penumbra.transaction.ActionPlan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
 */
proto.penumbra.transaction.ActionPlan.prototype.clearValidatorDefinition = function() {
  return this.setValidatorDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.ActionPlan.prototype.hasValidatorDefinition = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional penumbra.ibc.IBCAction ibc_action = 17;
 * @return {?proto.penumbra.ibc.IBCAction}
 */
proto.penumbra.transaction.ActionPlan.prototype.getIbcAction = function() {
  return /** @type{?proto.penumbra.ibc.IBCAction} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.ibc.IBCAction, 17));
};


/**
 * @param {?proto.penumbra.ibc.IBCAction|undefined} value
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
*/
proto.penumbra.transaction.ActionPlan.prototype.setIbcAction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.penumbra.transaction.ActionPlan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
 */
proto.penumbra.transaction.ActionPlan.prototype.clearIbcAction = function() {
  return this.setIbcAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.ActionPlan.prototype.hasIbcAction = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional ProposalSubmit proposal_submit = 18;
 * @return {?proto.penumbra.transaction.ProposalSubmit}
 */
proto.penumbra.transaction.ActionPlan.prototype.getProposalSubmit = function() {
  return /** @type{?proto.penumbra.transaction.ProposalSubmit} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.ProposalSubmit, 18));
};


/**
 * @param {?proto.penumbra.transaction.ProposalSubmit|undefined} value
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
*/
proto.penumbra.transaction.ActionPlan.prototype.setProposalSubmit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.penumbra.transaction.ActionPlan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
 */
proto.penumbra.transaction.ActionPlan.prototype.clearProposalSubmit = function() {
  return this.setProposalSubmit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.ActionPlan.prototype.hasProposalSubmit = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional ProposalWithdrawPlan proposal_withdraw = 19;
 * @return {?proto.penumbra.transaction.ProposalWithdrawPlan}
 */
proto.penumbra.transaction.ActionPlan.prototype.getProposalWithdraw = function() {
  return /** @type{?proto.penumbra.transaction.ProposalWithdrawPlan} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.ProposalWithdrawPlan, 19));
};


/**
 * @param {?proto.penumbra.transaction.ProposalWithdrawPlan|undefined} value
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
*/
proto.penumbra.transaction.ActionPlan.prototype.setProposalWithdraw = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.penumbra.transaction.ActionPlan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
 */
proto.penumbra.transaction.ActionPlan.prototype.clearProposalWithdraw = function() {
  return this.setProposalWithdraw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.ActionPlan.prototype.hasProposalWithdraw = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional ValidatorVote validator_vote = 20;
 * @return {?proto.penumbra.transaction.ValidatorVote}
 */
proto.penumbra.transaction.ActionPlan.prototype.getValidatorVote = function() {
  return /** @type{?proto.penumbra.transaction.ValidatorVote} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.ValidatorVote, 20));
};


/**
 * @param {?proto.penumbra.transaction.ValidatorVote|undefined} value
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
*/
proto.penumbra.transaction.ActionPlan.prototype.setValidatorVote = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.penumbra.transaction.ActionPlan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
 */
proto.penumbra.transaction.ActionPlan.prototype.clearValidatorVote = function() {
  return this.setValidatorVote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.ActionPlan.prototype.hasValidatorVote = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional DelegatorVotePlan delegator_vote = 21;
 * @return {?proto.penumbra.transaction.DelegatorVotePlan}
 */
proto.penumbra.transaction.ActionPlan.prototype.getDelegatorVote = function() {
  return /** @type{?proto.penumbra.transaction.DelegatorVotePlan} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.DelegatorVotePlan, 21));
};


/**
 * @param {?proto.penumbra.transaction.DelegatorVotePlan|undefined} value
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
*/
proto.penumbra.transaction.ActionPlan.prototype.setDelegatorVote = function(value) {
  return jspb.Message.setOneofWrapperField(this, 21, proto.penumbra.transaction.ActionPlan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
 */
proto.penumbra.transaction.ActionPlan.prototype.clearDelegatorVote = function() {
  return this.setDelegatorVote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.ActionPlan.prototype.hasDelegatorVote = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional penumbra.dex.PositionOpen position_open = 30;
 * @return {?proto.penumbra.dex.PositionOpen}
 */
proto.penumbra.transaction.ActionPlan.prototype.getPositionOpen = function() {
  return /** @type{?proto.penumbra.dex.PositionOpen} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.dex.PositionOpen, 30));
};


/**
 * @param {?proto.penumbra.dex.PositionOpen|undefined} value
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
*/
proto.penumbra.transaction.ActionPlan.prototype.setPositionOpen = function(value) {
  return jspb.Message.setOneofWrapperField(this, 30, proto.penumbra.transaction.ActionPlan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
 */
proto.penumbra.transaction.ActionPlan.prototype.clearPositionOpen = function() {
  return this.setPositionOpen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.ActionPlan.prototype.hasPositionOpen = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional penumbra.dex.PositionClose position_close = 31;
 * @return {?proto.penumbra.dex.PositionClose}
 */
proto.penumbra.transaction.ActionPlan.prototype.getPositionClose = function() {
  return /** @type{?proto.penumbra.dex.PositionClose} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.dex.PositionClose, 31));
};


/**
 * @param {?proto.penumbra.dex.PositionClose|undefined} value
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
*/
proto.penumbra.transaction.ActionPlan.prototype.setPositionClose = function(value) {
  return jspb.Message.setOneofWrapperField(this, 31, proto.penumbra.transaction.ActionPlan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
 */
proto.penumbra.transaction.ActionPlan.prototype.clearPositionClose = function() {
  return this.setPositionClose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.ActionPlan.prototype.hasPositionClose = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional penumbra.dex.PositionWithdraw position_withdraw = 32;
 * @return {?proto.penumbra.dex.PositionWithdraw}
 */
proto.penumbra.transaction.ActionPlan.prototype.getPositionWithdraw = function() {
  return /** @type{?proto.penumbra.dex.PositionWithdraw} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.dex.PositionWithdraw, 32));
};


/**
 * @param {?proto.penumbra.dex.PositionWithdraw|undefined} value
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
*/
proto.penumbra.transaction.ActionPlan.prototype.setPositionWithdraw = function(value) {
  return jspb.Message.setOneofWrapperField(this, 32, proto.penumbra.transaction.ActionPlan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
 */
proto.penumbra.transaction.ActionPlan.prototype.clearPositionWithdraw = function() {
  return this.setPositionWithdraw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.ActionPlan.prototype.hasPositionWithdraw = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional penumbra.dex.PositionRewardClaim position_reward_claim = 34;
 * @return {?proto.penumbra.dex.PositionRewardClaim}
 */
proto.penumbra.transaction.ActionPlan.prototype.getPositionRewardClaim = function() {
  return /** @type{?proto.penumbra.dex.PositionRewardClaim} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.dex.PositionRewardClaim, 34));
};


/**
 * @param {?proto.penumbra.dex.PositionRewardClaim|undefined} value
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
*/
proto.penumbra.transaction.ActionPlan.prototype.setPositionRewardClaim = function(value) {
  return jspb.Message.setOneofWrapperField(this, 34, proto.penumbra.transaction.ActionPlan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
 */
proto.penumbra.transaction.ActionPlan.prototype.clearPositionRewardClaim = function() {
  return this.setPositionRewardClaim(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.ActionPlan.prototype.hasPositionRewardClaim = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional SwapPlan swap = 40;
 * @return {?proto.penumbra.transaction.SwapPlan}
 */
proto.penumbra.transaction.ActionPlan.prototype.getSwap = function() {
  return /** @type{?proto.penumbra.transaction.SwapPlan} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.SwapPlan, 40));
};


/**
 * @param {?proto.penumbra.transaction.SwapPlan|undefined} value
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
*/
proto.penumbra.transaction.ActionPlan.prototype.setSwap = function(value) {
  return jspb.Message.setOneofWrapperField(this, 40, proto.penumbra.transaction.ActionPlan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
 */
proto.penumbra.transaction.ActionPlan.prototype.clearSwap = function() {
  return this.setSwap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.ActionPlan.prototype.hasSwap = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional SwapClaimPlan swap_claim = 41;
 * @return {?proto.penumbra.transaction.SwapClaimPlan}
 */
proto.penumbra.transaction.ActionPlan.prototype.getSwapClaim = function() {
  return /** @type{?proto.penumbra.transaction.SwapClaimPlan} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.SwapClaimPlan, 41));
};


/**
 * @param {?proto.penumbra.transaction.SwapClaimPlan|undefined} value
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
*/
proto.penumbra.transaction.ActionPlan.prototype.setSwapClaim = function(value) {
  return jspb.Message.setOneofWrapperField(this, 41, proto.penumbra.transaction.ActionPlan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.ActionPlan} returns this
 */
proto.penumbra.transaction.ActionPlan.prototype.clearSwapClaim = function() {
  return this.setSwapClaim(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.ActionPlan.prototype.hasSwapClaim = function() {
  return jspb.Message.getField(this, 41) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.transaction.Proposal.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.transaction.Proposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.transaction.Proposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Proposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    payload: (f = msg.getPayload()) && proto.penumbra.transaction.Proposal.Payload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.transaction.Proposal}
 */
proto.penumbra.transaction.Proposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.transaction.Proposal;
  return proto.penumbra.transaction.Proposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.transaction.Proposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.transaction.Proposal}
 */
proto.penumbra.transaction.Proposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.penumbra.transaction.Proposal.Payload;
      reader.readMessage(value,proto.penumbra.transaction.Proposal.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.transaction.Proposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.transaction.Proposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.transaction.Proposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Proposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.penumbra.transaction.Proposal.Payload.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.penumbra.transaction.Proposal.Payload.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.penumbra.transaction.Proposal.Payload.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  SIGNALING: 2,
  EMERGENCY: 3,
  PARAMETER_CHANGE: 4,
  DAO_SPEND: 5
};

/**
 * @return {proto.penumbra.transaction.Proposal.Payload.PayloadCase}
 */
proto.penumbra.transaction.Proposal.Payload.prototype.getPayloadCase = function() {
  return /** @type {proto.penumbra.transaction.Proposal.Payload.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.penumbra.transaction.Proposal.Payload.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.transaction.Proposal.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.transaction.Proposal.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.transaction.Proposal.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Proposal.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    signaling: (f = msg.getSignaling()) && proto.penumbra.transaction.Proposal.Signaling.toObject(includeInstance, f),
    emergency: (f = msg.getEmergency()) && proto.penumbra.transaction.Proposal.Emergency.toObject(includeInstance, f),
    parameterChange: (f = msg.getParameterChange()) && proto.penumbra.transaction.Proposal.ParameterChange.toObject(includeInstance, f),
    daoSpend: (f = msg.getDaoSpend()) && proto.penumbra.transaction.Proposal.DaoSpend.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.transaction.Proposal.Payload}
 */
proto.penumbra.transaction.Proposal.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.transaction.Proposal.Payload;
  return proto.penumbra.transaction.Proposal.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.transaction.Proposal.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.transaction.Proposal.Payload}
 */
proto.penumbra.transaction.Proposal.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.penumbra.transaction.Proposal.Signaling;
      reader.readMessage(value,proto.penumbra.transaction.Proposal.Signaling.deserializeBinaryFromReader);
      msg.setSignaling(value);
      break;
    case 3:
      var value = new proto.penumbra.transaction.Proposal.Emergency;
      reader.readMessage(value,proto.penumbra.transaction.Proposal.Emergency.deserializeBinaryFromReader);
      msg.setEmergency(value);
      break;
    case 4:
      var value = new proto.penumbra.transaction.Proposal.ParameterChange;
      reader.readMessage(value,proto.penumbra.transaction.Proposal.ParameterChange.deserializeBinaryFromReader);
      msg.setParameterChange(value);
      break;
    case 5:
      var value = new proto.penumbra.transaction.Proposal.DaoSpend;
      reader.readMessage(value,proto.penumbra.transaction.Proposal.DaoSpend.deserializeBinaryFromReader);
      msg.setDaoSpend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.transaction.Proposal.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.transaction.Proposal.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.transaction.Proposal.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Proposal.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignaling();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.penumbra.transaction.Proposal.Signaling.serializeBinaryToWriter
    );
  }
  f = message.getEmergency();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.penumbra.transaction.Proposal.Emergency.serializeBinaryToWriter
    );
  }
  f = message.getParameterChange();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.penumbra.transaction.Proposal.ParameterChange.serializeBinaryToWriter
    );
  }
  f = message.getDaoSpend();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.penumbra.transaction.Proposal.DaoSpend.serializeBinaryToWriter
    );
  }
};


/**
 * optional Signaling signaling = 2;
 * @return {?proto.penumbra.transaction.Proposal.Signaling}
 */
proto.penumbra.transaction.Proposal.Payload.prototype.getSignaling = function() {
  return /** @type{?proto.penumbra.transaction.Proposal.Signaling} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.Proposal.Signaling, 2));
};


/**
 * @param {?proto.penumbra.transaction.Proposal.Signaling|undefined} value
 * @return {!proto.penumbra.transaction.Proposal.Payload} returns this
*/
proto.penumbra.transaction.Proposal.Payload.prototype.setSignaling = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.penumbra.transaction.Proposal.Payload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Proposal.Payload} returns this
 */
proto.penumbra.transaction.Proposal.Payload.prototype.clearSignaling = function() {
  return this.setSignaling(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Proposal.Payload.prototype.hasSignaling = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Emergency emergency = 3;
 * @return {?proto.penumbra.transaction.Proposal.Emergency}
 */
proto.penumbra.transaction.Proposal.Payload.prototype.getEmergency = function() {
  return /** @type{?proto.penumbra.transaction.Proposal.Emergency} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.Proposal.Emergency, 3));
};


/**
 * @param {?proto.penumbra.transaction.Proposal.Emergency|undefined} value
 * @return {!proto.penumbra.transaction.Proposal.Payload} returns this
*/
proto.penumbra.transaction.Proposal.Payload.prototype.setEmergency = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.penumbra.transaction.Proposal.Payload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Proposal.Payload} returns this
 */
proto.penumbra.transaction.Proposal.Payload.prototype.clearEmergency = function() {
  return this.setEmergency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Proposal.Payload.prototype.hasEmergency = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ParameterChange parameter_change = 4;
 * @return {?proto.penumbra.transaction.Proposal.ParameterChange}
 */
proto.penumbra.transaction.Proposal.Payload.prototype.getParameterChange = function() {
  return /** @type{?proto.penumbra.transaction.Proposal.ParameterChange} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.Proposal.ParameterChange, 4));
};


/**
 * @param {?proto.penumbra.transaction.Proposal.ParameterChange|undefined} value
 * @return {!proto.penumbra.transaction.Proposal.Payload} returns this
*/
proto.penumbra.transaction.Proposal.Payload.prototype.setParameterChange = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.penumbra.transaction.Proposal.Payload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Proposal.Payload} returns this
 */
proto.penumbra.transaction.Proposal.Payload.prototype.clearParameterChange = function() {
  return this.setParameterChange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Proposal.Payload.prototype.hasParameterChange = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DaoSpend dao_spend = 5;
 * @return {?proto.penumbra.transaction.Proposal.DaoSpend}
 */
proto.penumbra.transaction.Proposal.Payload.prototype.getDaoSpend = function() {
  return /** @type{?proto.penumbra.transaction.Proposal.DaoSpend} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.Proposal.DaoSpend, 5));
};


/**
 * @param {?proto.penumbra.transaction.Proposal.DaoSpend|undefined} value
 * @return {!proto.penumbra.transaction.Proposal.Payload} returns this
*/
proto.penumbra.transaction.Proposal.Payload.prototype.setDaoSpend = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.penumbra.transaction.Proposal.Payload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Proposal.Payload} returns this
 */
proto.penumbra.transaction.Proposal.Payload.prototype.clearDaoSpend = function() {
  return this.setDaoSpend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Proposal.Payload.prototype.hasDaoSpend = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.transaction.Proposal.Signaling.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.transaction.Proposal.Signaling.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.transaction.Proposal.Signaling} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Proposal.Signaling.toObject = function(includeInstance, msg) {
  var f, obj = {
    commit: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.transaction.Proposal.Signaling}
 */
proto.penumbra.transaction.Proposal.Signaling.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.transaction.Proposal.Signaling;
  return proto.penumbra.transaction.Proposal.Signaling.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.transaction.Proposal.Signaling} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.transaction.Proposal.Signaling}
 */
proto.penumbra.transaction.Proposal.Signaling.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.transaction.Proposal.Signaling.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.transaction.Proposal.Signaling.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.transaction.Proposal.Signaling} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Proposal.Signaling.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string commit = 1;
 * @return {string}
 */
proto.penumbra.transaction.Proposal.Signaling.prototype.getCommit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.transaction.Proposal.Signaling} returns this
 */
proto.penumbra.transaction.Proposal.Signaling.prototype.setCommit = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.penumbra.transaction.Proposal.Signaling} returns this
 */
proto.penumbra.transaction.Proposal.Signaling.prototype.clearCommit = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Proposal.Signaling.prototype.hasCommit = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.transaction.Proposal.Emergency.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.transaction.Proposal.Emergency.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.transaction.Proposal.Emergency} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Proposal.Emergency.toObject = function(includeInstance, msg) {
  var f, obj = {
    haltChain: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.transaction.Proposal.Emergency}
 */
proto.penumbra.transaction.Proposal.Emergency.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.transaction.Proposal.Emergency;
  return proto.penumbra.transaction.Proposal.Emergency.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.transaction.Proposal.Emergency} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.transaction.Proposal.Emergency}
 */
proto.penumbra.transaction.Proposal.Emergency.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHaltChain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.transaction.Proposal.Emergency.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.transaction.Proposal.Emergency.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.transaction.Proposal.Emergency} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Proposal.Emergency.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHaltChain();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool halt_chain = 1;
 * @return {boolean}
 */
proto.penumbra.transaction.Proposal.Emergency.prototype.getHaltChain = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.penumbra.transaction.Proposal.Emergency} returns this
 */
proto.penumbra.transaction.Proposal.Emergency.prototype.setHaltChain = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.penumbra.transaction.Proposal.ParameterChange.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.transaction.Proposal.ParameterChange.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.transaction.Proposal.ParameterChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.transaction.Proposal.ParameterChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Proposal.ParameterChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    effectiveHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    newParametersList: jspb.Message.toObjectList(msg.getNewParametersList(),
    proto.penumbra.transaction.Proposal.ParameterChange.SetParameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.transaction.Proposal.ParameterChange}
 */
proto.penumbra.transaction.Proposal.ParameterChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.transaction.Proposal.ParameterChange;
  return proto.penumbra.transaction.Proposal.ParameterChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.transaction.Proposal.ParameterChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.transaction.Proposal.ParameterChange}
 */
proto.penumbra.transaction.Proposal.ParameterChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEffectiveHeight(value);
      break;
    case 2:
      var value = new proto.penumbra.transaction.Proposal.ParameterChange.SetParameter;
      reader.readMessage(value,proto.penumbra.transaction.Proposal.ParameterChange.SetParameter.deserializeBinaryFromReader);
      msg.addNewParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.transaction.Proposal.ParameterChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.transaction.Proposal.ParameterChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.transaction.Proposal.ParameterChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Proposal.ParameterChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEffectiveHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNewParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.penumbra.transaction.Proposal.ParameterChange.SetParameter.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.transaction.Proposal.ParameterChange.SetParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.transaction.Proposal.ParameterChange.SetParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.transaction.Proposal.ParameterChange.SetParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Proposal.ParameterChange.SetParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    parameter: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.transaction.Proposal.ParameterChange.SetParameter}
 */
proto.penumbra.transaction.Proposal.ParameterChange.SetParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.transaction.Proposal.ParameterChange.SetParameter;
  return proto.penumbra.transaction.Proposal.ParameterChange.SetParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.transaction.Proposal.ParameterChange.SetParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.transaction.Proposal.ParameterChange.SetParameter}
 */
proto.penumbra.transaction.Proposal.ParameterChange.SetParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParameter(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.transaction.Proposal.ParameterChange.SetParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.transaction.Proposal.ParameterChange.SetParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.transaction.Proposal.ParameterChange.SetParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Proposal.ParameterChange.SetParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParameter();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string parameter = 1;
 * @return {string}
 */
proto.penumbra.transaction.Proposal.ParameterChange.SetParameter.prototype.getParameter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.transaction.Proposal.ParameterChange.SetParameter} returns this
 */
proto.penumbra.transaction.Proposal.ParameterChange.SetParameter.prototype.setParameter = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.penumbra.transaction.Proposal.ParameterChange.SetParameter.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.transaction.Proposal.ParameterChange.SetParameter} returns this
 */
proto.penumbra.transaction.Proposal.ParameterChange.SetParameter.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 effective_height = 1;
 * @return {number}
 */
proto.penumbra.transaction.Proposal.ParameterChange.prototype.getEffectiveHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.transaction.Proposal.ParameterChange} returns this
 */
proto.penumbra.transaction.Proposal.ParameterChange.prototype.setEffectiveHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated SetParameter new_parameters = 2;
 * @return {!Array<!proto.penumbra.transaction.Proposal.ParameterChange.SetParameter>}
 */
proto.penumbra.transaction.Proposal.ParameterChange.prototype.getNewParametersList = function() {
  return /** @type{!Array<!proto.penumbra.transaction.Proposal.ParameterChange.SetParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.penumbra.transaction.Proposal.ParameterChange.SetParameter, 2));
};


/**
 * @param {!Array<!proto.penumbra.transaction.Proposal.ParameterChange.SetParameter>} value
 * @return {!proto.penumbra.transaction.Proposal.ParameterChange} returns this
*/
proto.penumbra.transaction.Proposal.ParameterChange.prototype.setNewParametersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.penumbra.transaction.Proposal.ParameterChange.SetParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.penumbra.transaction.Proposal.ParameterChange.SetParameter}
 */
proto.penumbra.transaction.Proposal.ParameterChange.prototype.addNewParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.penumbra.transaction.Proposal.ParameterChange.SetParameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.penumbra.transaction.Proposal.ParameterChange} returns this
 */
proto.penumbra.transaction.Proposal.ParameterChange.prototype.clearNewParametersList = function() {
  return this.setNewParametersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.penumbra.transaction.Proposal.DaoSpend.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.transaction.Proposal.DaoSpend.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.transaction.Proposal.DaoSpend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.transaction.Proposal.DaoSpend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Proposal.DaoSpend.toObject = function(includeInstance, msg) {
  var f, obj = {
    scheduleTransactionsList: jspb.Message.toObjectList(msg.getScheduleTransactionsList(),
    proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.toObject, includeInstance),
    cancelTransactionsList: jspb.Message.toObjectList(msg.getCancelTransactionsList(),
    proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.transaction.Proposal.DaoSpend}
 */
proto.penumbra.transaction.Proposal.DaoSpend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.transaction.Proposal.DaoSpend;
  return proto.penumbra.transaction.Proposal.DaoSpend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.transaction.Proposal.DaoSpend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.transaction.Proposal.DaoSpend}
 */
proto.penumbra.transaction.Proposal.DaoSpend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction;
      reader.readMessage(value,proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.deserializeBinaryFromReader);
      msg.addScheduleTransactions(value);
      break;
    case 2:
      var value = new proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction;
      reader.readMessage(value,proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.deserializeBinaryFromReader);
      msg.addCancelTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.transaction.Proposal.DaoSpend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.transaction.Proposal.DaoSpend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.transaction.Proposal.DaoSpend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Proposal.DaoSpend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScheduleTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.serializeBinaryToWriter
    );
  }
  f = message.getCancelTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    executeAtHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    transaction: (f = msg.getTransaction()) && proto.penumbra.transaction.TransactionPlan.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction}
 */
proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction;
  return proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction}
 */
proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExecuteAtHeight(value);
      break;
    case 2:
      var value = new proto.penumbra.transaction.TransactionPlan;
      reader.readMessage(value,proto.penumbra.transaction.TransactionPlan.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExecuteAtHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.penumbra.transaction.TransactionPlan.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 execute_at_height = 1;
 * @return {number}
 */
proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.prototype.getExecuteAtHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction} returns this
 */
proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.prototype.setExecuteAtHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TransactionPlan transaction = 2;
 * @return {?proto.penumbra.transaction.TransactionPlan}
 */
proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.prototype.getTransaction = function() {
  return /** @type{?proto.penumbra.transaction.TransactionPlan} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.TransactionPlan, 2));
};


/**
 * @param {?proto.penumbra.transaction.TransactionPlan|undefined} value
 * @return {!proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction} returns this
*/
proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.prototype.setTransaction = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction} returns this
 */
proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.prototype.clearTransaction = function() {
  return this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    scheduledAtHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    authHash: (f = msg.getAuthHash()) && proto.penumbra.transaction.AuthHash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction}
 */
proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction;
  return proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction}
 */
proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setScheduledAtHeight(value);
      break;
    case 2:
      var value = new proto.penumbra.transaction.AuthHash;
      reader.readMessage(value,proto.penumbra.transaction.AuthHash.deserializeBinaryFromReader);
      msg.setAuthHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScheduledAtHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAuthHash();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.penumbra.transaction.AuthHash.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 scheduled_at_height = 1;
 * @return {number}
 */
proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.prototype.getScheduledAtHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction} returns this
 */
proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.prototype.setScheduledAtHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional AuthHash auth_hash = 2;
 * @return {?proto.penumbra.transaction.AuthHash}
 */
proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.prototype.getAuthHash = function() {
  return /** @type{?proto.penumbra.transaction.AuthHash} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.AuthHash, 2));
};


/**
 * @param {?proto.penumbra.transaction.AuthHash|undefined} value
 * @return {!proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction} returns this
*/
proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.prototype.setAuthHash = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction} returns this
 */
proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.prototype.clearAuthHash = function() {
  return this.setAuthHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction.prototype.hasAuthHash = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ScheduleTransaction schedule_transactions = 1;
 * @return {!Array<!proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction>}
 */
proto.penumbra.transaction.Proposal.DaoSpend.prototype.getScheduleTransactionsList = function() {
  return /** @type{!Array<!proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction, 1));
};


/**
 * @param {!Array<!proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction>} value
 * @return {!proto.penumbra.transaction.Proposal.DaoSpend} returns this
*/
proto.penumbra.transaction.Proposal.DaoSpend.prototype.setScheduleTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction}
 */
proto.penumbra.transaction.Proposal.DaoSpend.prototype.addScheduleTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.penumbra.transaction.Proposal.DaoSpend} returns this
 */
proto.penumbra.transaction.Proposal.DaoSpend.prototype.clearScheduleTransactionsList = function() {
  return this.setScheduleTransactionsList([]);
};


/**
 * repeated CancelTransaction cancel_transactions = 2;
 * @return {!Array<!proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction>}
 */
proto.penumbra.transaction.Proposal.DaoSpend.prototype.getCancelTransactionsList = function() {
  return /** @type{!Array<!proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction, 2));
};


/**
 * @param {!Array<!proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction>} value
 * @return {!proto.penumbra.transaction.Proposal.DaoSpend} returns this
*/
proto.penumbra.transaction.Proposal.DaoSpend.prototype.setCancelTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction}
 */
proto.penumbra.transaction.Proposal.DaoSpend.prototype.addCancelTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.penumbra.transaction.Proposal.DaoSpend.CancelTransaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.penumbra.transaction.Proposal.DaoSpend} returns this
 */
proto.penumbra.transaction.Proposal.DaoSpend.prototype.clearCancelTransactionsList = function() {
  return this.setCancelTransactionsList([]);
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.penumbra.transaction.Proposal.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.transaction.Proposal} returns this
 */
proto.penumbra.transaction.Proposal.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.penumbra.transaction.Proposal.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.transaction.Proposal} returns this
 */
proto.penumbra.transaction.Proposal.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Payload payload = 3;
 * @return {?proto.penumbra.transaction.Proposal.Payload}
 */
proto.penumbra.transaction.Proposal.prototype.getPayload = function() {
  return /** @type{?proto.penumbra.transaction.Proposal.Payload} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.Proposal.Payload, 3));
};


/**
 * @param {?proto.penumbra.transaction.Proposal.Payload|undefined} value
 * @return {!proto.penumbra.transaction.Proposal} returns this
*/
proto.penumbra.transaction.Proposal.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.Proposal} returns this
 */
proto.penumbra.transaction.Proposal.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.Proposal.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.transaction.ProposalSubmit.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.transaction.ProposalSubmit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.transaction.ProposalSubmit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.ProposalSubmit.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposal: (f = msg.getProposal()) && proto.penumbra.transaction.Proposal.toObject(includeInstance, f),
    depositRefundAddress: (f = msg.getDepositRefundAddress()) && proto.penumbra.crypto.Address.toObject(includeInstance, f),
    depositAmount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rk: msg.getRk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.transaction.ProposalSubmit}
 */
proto.penumbra.transaction.ProposalSubmit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.transaction.ProposalSubmit;
  return proto.penumbra.transaction.ProposalSubmit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.transaction.ProposalSubmit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.transaction.ProposalSubmit}
 */
proto.penumbra.transaction.ProposalSubmit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.transaction.Proposal;
      reader.readMessage(value,proto.penumbra.transaction.Proposal.deserializeBinaryFromReader);
      msg.setProposal(value);
      break;
    case 2:
      var value = new proto.penumbra.crypto.Address;
      reader.readMessage(value,proto.penumbra.crypto.Address.deserializeBinaryFromReader);
      msg.setDepositRefundAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDepositAmount(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.transaction.ProposalSubmit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.transaction.ProposalSubmit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.transaction.ProposalSubmit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.ProposalSubmit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.penumbra.transaction.Proposal.serializeBinaryToWriter
    );
  }
  f = message.getDepositRefundAddress();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.penumbra.crypto.Address.serializeBinaryToWriter
    );
  }
  f = message.getDepositAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getRk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional Proposal proposal = 1;
 * @return {?proto.penumbra.transaction.Proposal}
 */
proto.penumbra.transaction.ProposalSubmit.prototype.getProposal = function() {
  return /** @type{?proto.penumbra.transaction.Proposal} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.Proposal, 1));
};


/**
 * @param {?proto.penumbra.transaction.Proposal|undefined} value
 * @return {!proto.penumbra.transaction.ProposalSubmit} returns this
*/
proto.penumbra.transaction.ProposalSubmit.prototype.setProposal = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.ProposalSubmit} returns this
 */
proto.penumbra.transaction.ProposalSubmit.prototype.clearProposal = function() {
  return this.setProposal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.ProposalSubmit.prototype.hasProposal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional penumbra.crypto.Address deposit_refund_address = 2;
 * @return {?proto.penumbra.crypto.Address}
 */
proto.penumbra.transaction.ProposalSubmit.prototype.getDepositRefundAddress = function() {
  return /** @type{?proto.penumbra.crypto.Address} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.crypto.Address, 2));
};


/**
 * @param {?proto.penumbra.crypto.Address|undefined} value
 * @return {!proto.penumbra.transaction.ProposalSubmit} returns this
*/
proto.penumbra.transaction.ProposalSubmit.prototype.setDepositRefundAddress = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.ProposalSubmit} returns this
 */
proto.penumbra.transaction.ProposalSubmit.prototype.clearDepositRefundAddress = function() {
  return this.setDepositRefundAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.ProposalSubmit.prototype.hasDepositRefundAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 deposit_amount = 3;
 * @return {number}
 */
proto.penumbra.transaction.ProposalSubmit.prototype.getDepositAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.transaction.ProposalSubmit} returns this
 */
proto.penumbra.transaction.ProposalSubmit.prototype.setDepositAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes rk = 4;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.transaction.ProposalSubmit.prototype.getRk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes rk = 4;
 * This is a type-conversion wrapper around `getRk()`
 * @return {string}
 */
proto.penumbra.transaction.ProposalSubmit.prototype.getRk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRk()));
};


/**
 * optional bytes rk = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRk()`
 * @return {!Uint8Array}
 */
proto.penumbra.transaction.ProposalSubmit.prototype.getRk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.transaction.ProposalSubmit} returns this
 */
proto.penumbra.transaction.ProposalSubmit.prototype.setRk = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.penumbra.transaction.TransactionPlan.repeatedFields_ = [1,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.transaction.TransactionPlan.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.transaction.TransactionPlan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.transaction.TransactionPlan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.TransactionPlan.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.penumbra.transaction.ActionPlan.toObject, includeInstance),
    expiryHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chainId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fee: (f = msg.getFee()) && proto.penumbra.crypto.Fee.toObject(includeInstance, f),
    cluePlansList: jspb.Message.toObjectList(msg.getCluePlansList(),
    proto.penumbra.transaction.CluePlan.toObject, includeInstance),
    memoPlan: (f = msg.getMemoPlan()) && proto.penumbra.transaction.MemoPlan.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.transaction.TransactionPlan}
 */
proto.penumbra.transaction.TransactionPlan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.transaction.TransactionPlan;
  return proto.penumbra.transaction.TransactionPlan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.transaction.TransactionPlan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.transaction.TransactionPlan}
 */
proto.penumbra.transaction.TransactionPlan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.transaction.ActionPlan;
      reader.readMessage(value,proto.penumbra.transaction.ActionPlan.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpiryHeight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 4:
      var value = new proto.penumbra.crypto.Fee;
      reader.readMessage(value,proto.penumbra.crypto.Fee.deserializeBinaryFromReader);
      msg.setFee(value);
      break;
    case 5:
      var value = new proto.penumbra.transaction.CluePlan;
      reader.readMessage(value,proto.penumbra.transaction.CluePlan.deserializeBinaryFromReader);
      msg.addCluePlans(value);
      break;
    case 6:
      var value = new proto.penumbra.transaction.MemoPlan;
      reader.readMessage(value,proto.penumbra.transaction.MemoPlan.deserializeBinaryFromReader);
      msg.setMemoPlan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.transaction.TransactionPlan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.transaction.TransactionPlan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.transaction.TransactionPlan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.transaction.TransactionPlan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.penumbra.transaction.ActionPlan.serializeBinaryToWriter
    );
  }
  f = message.getExpiryHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFee();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.penumbra.crypto.Fee.serializeBinaryToWriter
    );
  }
  f = message.getCluePlansList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.penumbra.transaction.CluePlan.serializeBinaryToWriter
    );
  }
  f = message.getMemoPlan();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.penumbra.transaction.MemoPlan.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ActionPlan actions = 1;
 * @return {!Array<!proto.penumbra.transaction.ActionPlan>}
 */
proto.penumbra.transaction.TransactionPlan.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.penumbra.transaction.ActionPlan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.penumbra.transaction.ActionPlan, 1));
};


/**
 * @param {!Array<!proto.penumbra.transaction.ActionPlan>} value
 * @return {!proto.penumbra.transaction.TransactionPlan} returns this
*/
proto.penumbra.transaction.TransactionPlan.prototype.setActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.penumbra.transaction.ActionPlan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.penumbra.transaction.ActionPlan}
 */
proto.penumbra.transaction.TransactionPlan.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.penumbra.transaction.ActionPlan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.penumbra.transaction.TransactionPlan} returns this
 */
proto.penumbra.transaction.TransactionPlan.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};


/**
 * optional uint64 expiry_height = 2;
 * @return {number}
 */
proto.penumbra.transaction.TransactionPlan.prototype.getExpiryHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.transaction.TransactionPlan} returns this
 */
proto.penumbra.transaction.TransactionPlan.prototype.setExpiryHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string chain_id = 3;
 * @return {string}
 */
proto.penumbra.transaction.TransactionPlan.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.transaction.TransactionPlan} returns this
 */
proto.penumbra.transaction.TransactionPlan.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional penumbra.crypto.Fee fee = 4;
 * @return {?proto.penumbra.crypto.Fee}
 */
proto.penumbra.transaction.TransactionPlan.prototype.getFee = function() {
  return /** @type{?proto.penumbra.crypto.Fee} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.crypto.Fee, 4));
};


/**
 * @param {?proto.penumbra.crypto.Fee|undefined} value
 * @return {!proto.penumbra.transaction.TransactionPlan} returns this
*/
proto.penumbra.transaction.TransactionPlan.prototype.setFee = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.TransactionPlan} returns this
 */
proto.penumbra.transaction.TransactionPlan.prototype.clearFee = function() {
  return this.setFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.TransactionPlan.prototype.hasFee = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated CluePlan clue_plans = 5;
 * @return {!Array<!proto.penumbra.transaction.CluePlan>}
 */
proto.penumbra.transaction.TransactionPlan.prototype.getCluePlansList = function() {
  return /** @type{!Array<!proto.penumbra.transaction.CluePlan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.penumbra.transaction.CluePlan, 5));
};


/**
 * @param {!Array<!proto.penumbra.transaction.CluePlan>} value
 * @return {!proto.penumbra.transaction.TransactionPlan} returns this
*/
proto.penumbra.transaction.TransactionPlan.prototype.setCluePlansList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.penumbra.transaction.CluePlan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.penumbra.transaction.CluePlan}
 */
proto.penumbra.transaction.TransactionPlan.prototype.addCluePlans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.penumbra.transaction.CluePlan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.penumbra.transaction.TransactionPlan} returns this
 */
proto.penumbra.transaction.TransactionPlan.prototype.clearCluePlansList = function() {
  return this.setCluePlansList([]);
};


/**
 * optional MemoPlan memo_plan = 6;
 * @return {?proto.penumbra.transaction.MemoPlan}
 */
proto.penumbra.transaction.TransactionPlan.prototype.getMemoPlan = function() {
  return /** @type{?proto.penumbra.transaction.MemoPlan} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.transaction.MemoPlan, 6));
};


/**
 * @param {?proto.penumbra.transaction.MemoPlan|undefined} value
 * @return {!proto.penumbra.transaction.TransactionPlan} returns this
*/
proto.penumbra.transaction.TransactionPlan.prototype.setMemoPlan = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.transaction.TransactionPlan} returns this
 */
proto.penumbra.transaction.TransactionPlan.prototype.clearMemoPlan = function() {
  return this.setMemoPlan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.transaction.TransactionPlan.prototype.hasMemoPlan = function() {
  return jspb.Message.getField(this, 6) != null;
};


