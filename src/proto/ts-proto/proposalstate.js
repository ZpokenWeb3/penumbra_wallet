// source: governance.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.penumbra.governance.ProposalState');
goog.provide('proto.penumbra.governance.ProposalState.Finished');
goog.provide('proto.penumbra.governance.ProposalState.StateCase');
goog.provide('proto.penumbra.governance.ProposalState.Voting');
goog.provide('proto.penumbra.governance.ProposalState.Withdrawn');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.penumbra.governance.ProposalOutcome');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.governance.ProposalState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.penumbra.governance.ProposalState.oneofGroups_);
};
goog.inherits(proto.penumbra.governance.ProposalState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.governance.ProposalState.displayName = 'proto.penumbra.governance.ProposalState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.governance.ProposalState.Voting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.governance.ProposalState.Voting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.governance.ProposalState.Voting.displayName = 'proto.penumbra.governance.ProposalState.Voting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.governance.ProposalState.Withdrawn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.governance.ProposalState.Withdrawn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.governance.ProposalState.Withdrawn.displayName = 'proto.penumbra.governance.ProposalState.Withdrawn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.governance.ProposalState.Finished = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.governance.ProposalState.Finished, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.governance.ProposalState.Finished.displayName = 'proto.penumbra.governance.ProposalState.Finished';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.penumbra.governance.ProposalState.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.penumbra.governance.ProposalState.StateCase = {
  STATE_NOT_SET: 0,
  VOTING: 2,
  WITHDRAWN: 3,
  FINISHED: 4
};

/**
 * @return {proto.penumbra.governance.ProposalState.StateCase}
 */
proto.penumbra.governance.ProposalState.prototype.getStateCase = function() {
  return /** @type {proto.penumbra.governance.ProposalState.StateCase} */(jspb.Message.computeOneofCase(this, proto.penumbra.governance.ProposalState.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.governance.ProposalState.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.governance.ProposalState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.governance.ProposalState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.governance.ProposalState.toObject = function(includeInstance, msg) {
  var f, obj = {
    voting: (f = msg.getVoting()) && proto.penumbra.governance.ProposalState.Voting.toObject(includeInstance, f),
    withdrawn: (f = msg.getWithdrawn()) && proto.penumbra.governance.ProposalState.Withdrawn.toObject(includeInstance, f),
    finished: (f = msg.getFinished()) && proto.penumbra.governance.ProposalState.Finished.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.governance.ProposalState}
 */
proto.penumbra.governance.ProposalState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.governance.ProposalState;
  return proto.penumbra.governance.ProposalState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.governance.ProposalState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.governance.ProposalState}
 */
proto.penumbra.governance.ProposalState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.penumbra.governance.ProposalState.Voting;
      reader.readMessage(value,proto.penumbra.governance.ProposalState.Voting.deserializeBinaryFromReader);
      msg.setVoting(value);
      break;
    case 3:
      var value = new proto.penumbra.governance.ProposalState.Withdrawn;
      reader.readMessage(value,proto.penumbra.governance.ProposalState.Withdrawn.deserializeBinaryFromReader);
      msg.setWithdrawn(value);
      break;
    case 4:
      var value = new proto.penumbra.governance.ProposalState.Finished;
      reader.readMessage(value,proto.penumbra.governance.ProposalState.Finished.deserializeBinaryFromReader);
      msg.setFinished(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.governance.ProposalState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.governance.ProposalState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.governance.ProposalState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.governance.ProposalState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVoting();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.penumbra.governance.ProposalState.Voting.serializeBinaryToWriter
    );
  }
  f = message.getWithdrawn();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.penumbra.governance.ProposalState.Withdrawn.serializeBinaryToWriter
    );
  }
  f = message.getFinished();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.penumbra.governance.ProposalState.Finished.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.governance.ProposalState.Voting.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.governance.ProposalState.Voting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.governance.ProposalState.Voting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.governance.ProposalState.Voting.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.governance.ProposalState.Voting}
 */
proto.penumbra.governance.ProposalState.Voting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.governance.ProposalState.Voting;
  return proto.penumbra.governance.ProposalState.Voting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.governance.ProposalState.Voting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.governance.ProposalState.Voting}
 */
proto.penumbra.governance.ProposalState.Voting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.governance.ProposalState.Voting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.governance.ProposalState.Voting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.governance.ProposalState.Voting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.governance.ProposalState.Voting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.governance.ProposalState.Withdrawn.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.governance.ProposalState.Withdrawn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.governance.ProposalState.Withdrawn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.governance.ProposalState.Withdrawn.toObject = function(includeInstance, msg) {
  var f, obj = {
    reason: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.governance.ProposalState.Withdrawn}
 */
proto.penumbra.governance.ProposalState.Withdrawn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.governance.ProposalState.Withdrawn;
  return proto.penumbra.governance.ProposalState.Withdrawn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.governance.ProposalState.Withdrawn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.governance.ProposalState.Withdrawn}
 */
proto.penumbra.governance.ProposalState.Withdrawn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.governance.ProposalState.Withdrawn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.governance.ProposalState.Withdrawn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.governance.ProposalState.Withdrawn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.governance.ProposalState.Withdrawn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string reason = 1;
 * @return {string}
 */
proto.penumbra.governance.ProposalState.Withdrawn.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.governance.ProposalState.Withdrawn} returns this
 */
proto.penumbra.governance.ProposalState.Withdrawn.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.governance.ProposalState.Finished.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.governance.ProposalState.Finished.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.governance.ProposalState.Finished} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.governance.ProposalState.Finished.toObject = function(includeInstance, msg) {
  var f, obj = {
    outcome: (f = msg.getOutcome()) && proto.penumbra.governance.ProposalOutcome.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.governance.ProposalState.Finished}
 */
proto.penumbra.governance.ProposalState.Finished.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.governance.ProposalState.Finished;
  return proto.penumbra.governance.ProposalState.Finished.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.governance.ProposalState.Finished} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.governance.ProposalState.Finished}
 */
proto.penumbra.governance.ProposalState.Finished.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.governance.ProposalOutcome;
      reader.readMessage(value,proto.penumbra.governance.ProposalOutcome.deserializeBinaryFromReader);
      msg.setOutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.governance.ProposalState.Finished.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.governance.ProposalState.Finished.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.governance.ProposalState.Finished} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.governance.ProposalState.Finished.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutcome();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.penumbra.governance.ProposalOutcome.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProposalOutcome outcome = 1;
 * @return {?proto.penumbra.governance.ProposalOutcome}
 */
proto.penumbra.governance.ProposalState.Finished.prototype.getOutcome = function() {
  return /** @type{?proto.penumbra.governance.ProposalOutcome} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.governance.ProposalOutcome, 1));
};


/**
 * @param {?proto.penumbra.governance.ProposalOutcome|undefined} value
 * @return {!proto.penumbra.governance.ProposalState.Finished} returns this
*/
proto.penumbra.governance.ProposalState.Finished.prototype.setOutcome = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.governance.ProposalState.Finished} returns this
 */
proto.penumbra.governance.ProposalState.Finished.prototype.clearOutcome = function() {
  return this.setOutcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.governance.ProposalState.Finished.prototype.hasOutcome = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Voting voting = 2;
 * @return {?proto.penumbra.governance.ProposalState.Voting}
 */
proto.penumbra.governance.ProposalState.prototype.getVoting = function() {
  return /** @type{?proto.penumbra.governance.ProposalState.Voting} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.governance.ProposalState.Voting, 2));
};


/**
 * @param {?proto.penumbra.governance.ProposalState.Voting|undefined} value
 * @return {!proto.penumbra.governance.ProposalState} returns this
*/
proto.penumbra.governance.ProposalState.prototype.setVoting = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.penumbra.governance.ProposalState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.governance.ProposalState} returns this
 */
proto.penumbra.governance.ProposalState.prototype.clearVoting = function() {
  return this.setVoting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.governance.ProposalState.prototype.hasVoting = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Withdrawn withdrawn = 3;
 * @return {?proto.penumbra.governance.ProposalState.Withdrawn}
 */
proto.penumbra.governance.ProposalState.prototype.getWithdrawn = function() {
  return /** @type{?proto.penumbra.governance.ProposalState.Withdrawn} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.governance.ProposalState.Withdrawn, 3));
};


/**
 * @param {?proto.penumbra.governance.ProposalState.Withdrawn|undefined} value
 * @return {!proto.penumbra.governance.ProposalState} returns this
*/
proto.penumbra.governance.ProposalState.prototype.setWithdrawn = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.penumbra.governance.ProposalState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.governance.ProposalState} returns this
 */
proto.penumbra.governance.ProposalState.prototype.clearWithdrawn = function() {
  return this.setWithdrawn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.governance.ProposalState.prototype.hasWithdrawn = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Finished finished = 4;
 * @return {?proto.penumbra.governance.ProposalState.Finished}
 */
proto.penumbra.governance.ProposalState.prototype.getFinished = function() {
  return /** @type{?proto.penumbra.governance.ProposalState.Finished} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.governance.ProposalState.Finished, 4));
};


/**
 * @param {?proto.penumbra.governance.ProposalState.Finished|undefined} value
 * @return {!proto.penumbra.governance.ProposalState} returns this
*/
proto.penumbra.governance.ProposalState.prototype.setFinished = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.penumbra.governance.ProposalState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.governance.ProposalState} returns this
 */
proto.penumbra.governance.ProposalState.prototype.clearFinished = function() {
  return this.setFinished(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.governance.ProposalState.prototype.hasFinished = function() {
  return jspb.Message.getField(this, 4) != null;
};


