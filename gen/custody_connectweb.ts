// @generated by protoc-gen-connect-web v0.2.1 with parameter "target=ts"
// @generated from file custody.proto (package penumbra.custody, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {AuthorizeRequest} from "./custody_pb.js";
import {AuthorizationData} from "./transaction_pb.js";
import {MethodKind} from "@bufbuild/protobuf";

/**
 * The custody protocol is used by a wallet client to request authorization for
 * a transaction they've constructed.
 *
 * Modeling transaction authorization as an asynchronous RPC call encourages
 * software to be written in a way that has a compatible data flow with a "soft
 * HSM", threshold signing, a hardware wallet, etc.
 *
 * The custody protocol does not trust the client to authorize spends, so
 * custody requests must contain sufficient information for the custodian to
 * understand the transaction and determine whether or not it should be
 * authorized.
 *
 * @generated from service penumbra.custody.CustodyProtocol
 */
export const CustodyProtocol = {
  typeName: "penumbra.custody.CustodyProtocol",
  methods: {
    /**
     * Requests authorization of the transaction with the given description.
     *
     * @generated from rpc penumbra.custody.CustodyProtocol.Authorize
     */
    authorize: {
      name: "Authorize",
      I: AuthorizeRequest,
      O: AuthorizationData,
      kind: MethodKind.Unary,
    },
  }
} as const;

