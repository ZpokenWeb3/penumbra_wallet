// @generated by protoc-gen-es v0.1.1 with parameter "target=js"
// @generated from file transaction.proto (package penumbra.transaction, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {proto3} from "@bufbuild/protobuf";
import {Address, Clue, Fee, GovernanceKey, IdentityKey, MerkleRoot, Note, NoteCommitmentProof, NotePayload, SpendAuthSignature, Value, ValueCommitment} from "./crypto_pb.js";
import {Delegate, Undelegate, ValidatorDefinition} from "./stake_pb.js";
import {BatchSwapOutputData, PositionClose, PositionOpen, PositionRewardClaim, PositionWithdraw, Swap, SwapClaim, SwapPlaintext} from "./dex_pb.js";
import {IBCAction, ICS20Withdrawal} from "./ibc_pb.js";
import {Vote} from "./governance_pb.js";

/**
 * An authorization hash for a Penumbra transaction.
 *
 * @generated from message penumbra.transaction.AuthHash
 */
export const AuthHash = proto3.makeMessageType(
  "penumbra.transaction.AuthHash",
  () => [
    { no: 1, name: "inner", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * A Penumbra transaction.
 *
 * @generated from message penumbra.transaction.Transaction
 */
export const Transaction = proto3.makeMessageType(
  "penumbra.transaction.Transaction",
  () => [
    { no: 1, name: "body", kind: "message", T: TransactionBody },
    { no: 2, name: "binding_sig", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "anchor", kind: "message", T: MerkleRoot },
  ],
);

/**
 * The body of a transaction.
 *
 * @generated from message penumbra.transaction.TransactionBody
 */
export const TransactionBody = proto3.makeMessageType(
  "penumbra.transaction.TransactionBody",
  () => [
    { no: 1, name: "actions", kind: "message", T: Action, repeated: true },
    { no: 2, name: "expiry_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "fee", kind: "message", T: Fee },
    { no: 5, name: "fmd_clues", kind: "message", T: Clue, repeated: true },
    { no: 6, name: "encrypted_memo", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ],
);

/**
 * A state change performed by a transaction.
 *
 * @generated from message penumbra.transaction.Action
 */
export const Action = proto3.makeMessageType(
  "penumbra.transaction.Action",
  () => [
    { no: 1, name: "spend", kind: "message", T: Spend, oneof: "action" },
    { no: 2, name: "output", kind: "message", T: Output, oneof: "action" },
    { no: 3, name: "delegate", kind: "message", T: Delegate, oneof: "action" },
    { no: 4, name: "undelegate", kind: "message", T: Undelegate, oneof: "action" },
    { no: 5, name: "swap", kind: "message", T: Swap, oneof: "action" },
    { no: 6, name: "swap_claim", kind: "message", T: SwapClaim, oneof: "action" },
    { no: 16, name: "validator_definition", kind: "message", T: ValidatorDefinition, oneof: "action" },
    { no: 17, name: "ibc_action", kind: "message", T: IBCAction, oneof: "action" },
    { no: 18, name: "proposal_submit", kind: "message", T: ProposalSubmit, oneof: "action" },
    { no: 19, name: "proposal_withdraw", kind: "message", T: ProposalWithdraw, oneof: "action" },
    { no: 20, name: "validator_vote", kind: "message", T: ValidatorVote, oneof: "action" },
    { no: 30, name: "position_open", kind: "message", T: PositionOpen, oneof: "action" },
    { no: 31, name: "position_close", kind: "message", T: PositionClose, oneof: "action" },
    { no: 32, name: "position_withdraw", kind: "message", T: PositionWithdraw, oneof: "action" },
    { no: 34, name: "position_reward_claim", kind: "message", T: PositionRewardClaim, oneof: "action" },
    { no: 200, name: "ics20_withdrawal", kind: "message", T: ICS20Withdrawal, oneof: "action" },
  ],
);

/**
 * Spends a shielded note.
 *
 * @generated from message penumbra.transaction.Spend
 */
export const Spend = proto3.makeMessageType(
  "penumbra.transaction.Spend",
  () => [
    { no: 1, name: "body", kind: "message", T: SpendBody },
    { no: 2, name: "auth_sig", kind: "message", T: SpendAuthSignature },
    { no: 3, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * The body of a spend description, containing only the "authorizing" data
 * included in the authorization hash used for signing, and not the "effecting"
 * data which is bound to the authorizing data by some other means.
 *
 * @generated from message penumbra.transaction.SpendBody
 */
export const SpendBody = proto3.makeMessageType(
  "penumbra.transaction.SpendBody",
  () => [
    { no: 1, name: "value_commitment", kind: "message", T: ValueCommitment },
    { no: 3, name: "nullifier", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "rk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Creates a new shielded note.
 *
 * @generated from message penumbra.transaction.Output
 */
export const Output = proto3.makeMessageType(
  "penumbra.transaction.Output",
  () => [
    { no: 1, name: "body", kind: "message", T: OutputBody },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * The body of an output description, containing only the "authorizing" data
 * included in the authorization hash used for signing, and not the "effecting"
 * data which is bound to the authorizing data by some other means.
 *
 * @generated from message penumbra.transaction.OutputBody
 */
export const OutputBody = proto3.makeMessageType(
  "penumbra.transaction.OutputBody",
  () => [
    { no: 1, name: "note_payload", kind: "message", T: NotePayload },
    { no: 2, name: "value_commitment", kind: "message", T: ValueCommitment },
    { no: 3, name: "wrapped_memo_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "ovk_wrapped_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * @generated from message penumbra.transaction.ProposalSubmit
 */
export const ProposalSubmit = proto3.makeMessageType(
  "penumbra.transaction.ProposalSubmit",
  () => [
    { no: 1, name: "proposal", kind: "message", T: Proposal },
    { no: 2, name: "deposit_refund_address", kind: "message", T: Address },
    { no: 3, name: "deposit_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "rk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * @generated from message penumbra.transaction.ProposalWithdraw
 */
export const ProposalWithdraw = proto3.makeMessageType(
  "penumbra.transaction.ProposalWithdraw",
  () => [
    { no: 1, name: "body", kind: "message", T: ProposalWithdrawBody },
    { no: 2, name: "auth_sig", kind: "message", T: SpendAuthSignature },
  ],
);

/**
 * @generated from message penumbra.transaction.ProposalWithdrawBody
 */
export const ProposalWithdrawBody = proto3.makeMessageType(
  "penumbra.transaction.ProposalWithdrawBody",
  () => [
    { no: 1, name: "proposal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message penumbra.transaction.ValidatorVote
 */
export const ValidatorVote = proto3.makeMessageType(
  "penumbra.transaction.ValidatorVote",
  () => [
    { no: 1, name: "body", kind: "message", T: ValidatorVoteBody },
    { no: 2, name: "auth_sig", kind: "message", T: SpendAuthSignature },
  ],
);

/**
 * @generated from message penumbra.transaction.ValidatorVoteBody
 */
export const ValidatorVoteBody = proto3.makeMessageType(
  "penumbra.transaction.ValidatorVoteBody",
  () => [
    { no: 1, name: "proposal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "vote", kind: "message", T: Vote },
    { no: 3, name: "identity_key", kind: "message", T: IdentityKey },
    { no: 4, name: "governance_key", kind: "message", T: GovernanceKey },
  ],
);

/**
 * @generated from message penumbra.transaction.DelegatorVote
 */
export const DelegatorVote = proto3.makeMessageType(
  "penumbra.transaction.DelegatorVote",
  () => [
    { no: 1, name: "body", kind: "message", T: DelegatorVoteBody },
    { no: 2, name: "auth_sig", kind: "message", T: SpendAuthSignature },
    { no: 3, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * @generated from message penumbra.transaction.DelegatorVoteBody
 */
export const DelegatorVoteBody = proto3.makeMessageType(
  "penumbra.transaction.DelegatorVoteBody",
  () => [
    { no: 1, name: "proposal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "nullifier", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "rk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "yes_value_commitment", kind: "message", T: ValueCommitment },
    { no: 6, name: "no_value_commitment", kind: "message", T: ValueCommitment },
    { no: 7, name: "abstain_value_commitment", kind: "message", T: ValueCommitment },
    { no: 8, name: "no_with_veto_value_commitment", kind: "message", T: ValueCommitment },
  ],
);

/**
 * The data required to authorize a transaction plan.
 *
 * @generated from message penumbra.transaction.AuthorizationData
 */
export const AuthorizationData = proto3.makeMessageType(
  "penumbra.transaction.AuthorizationData",
  () => [
    { no: 1, name: "auth_hash", kind: "message", T: AuthHash },
    { no: 2, name: "spend_auths", kind: "message", T: SpendAuthSignature, repeated: true },
    { no: 3, name: "withdraw_proposal_auths", kind: "message", T: SpendAuthSignature, repeated: true },
  ],
);

/**
 * The data required for proving when building a transaction from a plan.
 *
 * @generated from message penumbra.transaction.WitnessData
 */
export const WitnessData = proto3.makeMessageType(
  "penumbra.transaction.WitnessData",
  () => [
    { no: 1, name: "anchor", kind: "message", T: MerkleRoot },
    { no: 2, name: "note_commitment_proofs", kind: "message", T: NoteCommitmentProof, repeated: true },
  ],
);

/**
 * Describes a planned transaction.
 *
 * @generated from message penumbra.transaction.TransactionPlan
 */
export const TransactionPlan = proto3.makeMessageType(
  "penumbra.transaction.TransactionPlan",
  () => [
    { no: 1, name: "actions", kind: "message", T: ActionPlan, repeated: true },
    { no: 2, name: "expiry_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "fee", kind: "message", T: Fee },
    { no: 5, name: "clue_plans", kind: "message", T: CluePlan, repeated: true },
    { no: 6, name: "memo_plan", kind: "message", T: MemoPlan },
  ],
);

/**
 * Describes a planned transaction action.
 *
 * Some transaction Actions don't have any private data and are treated as being plans
 * themselves.
 *
 * @generated from message penumbra.transaction.ActionPlan
 */
export const ActionPlan = proto3.makeMessageType(
  "penumbra.transaction.ActionPlan",
  () => [
    { no: 1, name: "spend", kind: "message", T: SpendPlan, oneof: "action" },
    { no: 2, name: "output", kind: "message", T: OutputPlan, oneof: "action" },
    { no: 3, name: "delegate", kind: "message", T: Delegate, oneof: "action" },
    { no: 4, name: "undelegate", kind: "message", T: Undelegate, oneof: "action" },
    { no: 16, name: "validator_definition", kind: "message", T: ValidatorDefinition, oneof: "action" },
    { no: 17, name: "ibc_action", kind: "message", T: IBCAction, oneof: "action" },
    { no: 18, name: "proposal_submit", kind: "message", T: ProposalSubmit, oneof: "action" },
    { no: 19, name: "proposal_withdraw", kind: "message", T: ProposalWithdrawPlan, oneof: "action" },
    { no: 20, name: "validator_vote", kind: "message", T: ValidatorVote, oneof: "action" },
    { no: 21, name: "delegator_vote", kind: "message", T: DelegatorVotePlan, oneof: "action" },
    { no: 30, name: "position_open", kind: "message", T: PositionOpen, oneof: "action" },
    { no: 31, name: "position_close", kind: "message", T: PositionClose, oneof: "action" },
    { no: 32, name: "position_withdraw", kind: "message", T: PositionWithdraw, oneof: "action" },
    { no: 34, name: "position_reward_claim", kind: "message", T: PositionRewardClaim, oneof: "action" },
    { no: 40, name: "swap", kind: "message", T: SwapPlan, oneof: "action" },
    { no: 41, name: "swap_claim", kind: "message", T: SwapClaimPlan, oneof: "action" },
  ],
);

/**
 * Describes a plan for forming a `Clue`.
 *
 * @generated from message penumbra.transaction.CluePlan
 */
export const CluePlan = proto3.makeMessageType(
  "penumbra.transaction.CluePlan",
  () => [
    { no: 1, name: "address", kind: "message", T: Address },
    { no: 2, name: "rseed", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "precision_bits", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Describes a plan for forming a `Memo`.
 *
 * @generated from message penumbra.transaction.MemoPlan
 */
export const MemoPlan = proto3.makeMessageType(
  "penumbra.transaction.MemoPlan",
  () => [
    { no: 1, name: "plaintext", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * @generated from message penumbra.transaction.SpendPlan
 */
export const SpendPlan = proto3.makeMessageType(
  "penumbra.transaction.SpendPlan",
  () => [
    { no: 1, name: "note", kind: "message", T: Note },
    { no: 2, name: "position", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "randomizer", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "value_blinding", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * @generated from message penumbra.transaction.OutputPlan
 */
export const OutputPlan = proto3.makeMessageType(
  "penumbra.transaction.OutputPlan",
  () => [
    { no: 1, name: "value", kind: "message", T: Value },
    { no: 2, name: "dest_address", kind: "message", T: Address },
    { no: 3, name: "note_blinding", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "value_blinding", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "esk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * @generated from message penumbra.transaction.SwapPlan
 */
export const SwapPlan = proto3.makeMessageType(
  "penumbra.transaction.SwapPlan",
  () => [
    { no: 1, name: "swap_plaintext", kind: "message", T: SwapPlaintext },
    { no: 5, name: "fee_blinding", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "note_blinding", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "esk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 *
 * @exclude
 * Fields describing the swap NFT note to be redeemed.
 *
 * @generated from message penumbra.transaction.SwapClaimPlan
 */
export const SwapClaimPlan = proto3.makeMessageType(
  "penumbra.transaction.SwapClaimPlan",
  () => [
    { no: 1, name: "swap_nft_note", kind: "message", T: Note },
    { no: 2, name: "swap_nft_position", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "swap_plaintext", kind: "message", T: SwapPlaintext },
    { no: 11, name: "output_data", kind: "message", T: BatchSwapOutputData },
    { no: 15, name: "output_1_blinding", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 16, name: "output_2_blinding", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 17, name: "esk_1", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 18, name: "esk_2", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 20, name: "epoch_duration", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message penumbra.transaction.ProposalWithdrawPlan
 */
export const ProposalWithdrawPlan = proto3.makeMessageType(
  "penumbra.transaction.ProposalWithdrawPlan",
  () => [
    { no: 1, name: "body", kind: "message", T: ProposalWithdrawBody },
    { no: 2, name: "randomizer", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * @generated from message penumbra.transaction.DelegatorVotePlan
 */
export const DelegatorVotePlan = proto3.makeMessageType(
  "penumbra.transaction.DelegatorVotePlan",
  () => [
    { no: 1, name: "proposal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "vote", kind: "message", T: Vote },
    { no: 3, name: "staked_note", kind: "message", T: Note },
    { no: 4, name: "position", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "randomizer", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * A proposal to be voted upon.
 *
 * @generated from message penumbra.transaction.Proposal
 */
export const Proposal = proto3.makeMessageType(
  "penumbra.transaction.Proposal",
  () => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "payload", kind: "message", T: Proposal_Payload },
  ],
);

/**
 * The kind of the proposal and details relevant only to that kind of proposal.
 *
 * @generated from message penumbra.transaction.Proposal.Payload
 */
export const Proposal_Payload = proto3.makeMessageType(
  "penumbra.transaction.Proposal.Payload",
  () => [
    { no: 2, name: "signaling", kind: "message", T: Proposal_Signaling, oneof: "payload" },
    { no: 3, name: "emergency", kind: "message", T: Proposal_Emergency, oneof: "payload" },
    { no: 4, name: "parameter_change", kind: "message", T: Proposal_ParameterChange, oneof: "payload" },
    { no: 5, name: "dao_spend", kind: "message", T: Proposal_DaoSpend, oneof: "payload" },
  ],
  {localName: "Proposal_Payload"},
);

/**
 * It optionally contains a reference to a commit which contains code to upgrade the chain.
 *
 * @generated from message penumbra.transaction.Proposal.Signaling
 */
export const Proposal_Signaling = proto3.makeMessageType(
  "penumbra.transaction.Proposal.Signaling",
  () => [
    { no: 1, name: "commit", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
  {localName: "Proposal_Signaling"},
);

/**
 * An emergency proposal can be passed instantaneously by a 2/3 majority of validators, without
 * waiting for the voting period to expire.
 *
 * If the boolean `halt_chain` is set to `true`, then the chain will halt immediately when the
 * proposal is passed.
 *
 * @generated from message penumbra.transaction.Proposal.Emergency
 */
export const Proposal_Emergency = proto3.makeMessageType(
  "penumbra.transaction.Proposal.Emergency",
  () => [
    { no: 1, name: "halt_chain", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
  {localName: "Proposal_Emergency"},
);

/**
 * A parameter change proposal describes an alteration to one or more chain parameters, which
 * should take effect at a particular block height `effective_height` (which should be at least
 * the height when the proposal would be passed).
 *
 * @generated from message penumbra.transaction.Proposal.ParameterChange
 */
export const Proposal_ParameterChange = proto3.makeMessageType(
  "penumbra.transaction.Proposal.ParameterChange",
  () => [
    { no: 1, name: "effective_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "new_parameters", kind: "message", T: Proposal_ParameterChange_SetParameter, repeated: true },
  ],
  {localName: "Proposal_ParameterChange"},
);

/**
 * A single change to an individual chain parameter.
 *
 * @generated from message penumbra.transaction.Proposal.ParameterChange.SetParameter
 */
export const Proposal_ParameterChange_SetParameter = proto3.makeMessageType(
  "penumbra.transaction.Proposal.ParameterChange.SetParameter",
  () => [
    { no: 1, name: "parameter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "Proposal_ParameterChange_SetParameter"},
);

/**
 * A DAO spend proposal describes zero or more transactions to execute on behalf of the DAO, with
 * access to its funds, and zero or more scheduled transactions from previous passed proposals to
 * cancel.
 *
 * @generated from message penumbra.transaction.Proposal.DaoSpend
 */
export const Proposal_DaoSpend = proto3.makeMessageType(
  "penumbra.transaction.Proposal.DaoSpend",
  () => [
    { no: 1, name: "schedule_transactions", kind: "message", T: Proposal_DaoSpend_ScheduleTransaction, repeated: true },
    { no: 2, name: "cancel_transactions", kind: "message", T: Proposal_DaoSpend_CancelTransaction, repeated: true },
  ],
  {localName: "Proposal_DaoSpend"},
);

/**
 * A transaction to be executed as a consequence of this proposal.
 *
 * It is permissible for there to be duplicate transactions scheduled for a given height; they
 * will both be executed.
 *
 * @generated from message penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction
 */
export const Proposal_DaoSpend_ScheduleTransaction = proto3.makeMessageType(
  "penumbra.transaction.Proposal.DaoSpend.ScheduleTransaction",
  () => [
    { no: 1, name: "execute_at_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "transaction", kind: "message", T: TransactionPlan },
  ],
  {localName: "Proposal_DaoSpend_ScheduleTransaction"},
);

/**
 * A transaction to be canceled as a consequence of this proposal.
 *
 * If there are multiple duplicate transactions at the height, this cancels only the first.
 * To cancel more of them, specify duplicate cancellations.
 *
 * @generated from message penumbra.transaction.Proposal.DaoSpend.CancelTransaction
 */
export const Proposal_DaoSpend_CancelTransaction = proto3.makeMessageType(
  "penumbra.transaction.Proposal.DaoSpend.CancelTransaction",
  () => [
    { no: 1, name: "scheduled_at_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "auth_hash", kind: "message", T: AuthHash },
  ],
  {localName: "Proposal_DaoSpend_CancelTransaction"},
);

