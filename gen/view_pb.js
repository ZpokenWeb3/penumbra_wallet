// @generated by protoc-gen-es v0.1.1 with parameter "target=js"
// @generated from file view.proto (package penumbra.view, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {proto3} from "@bufbuild/protobuf";
import {Transaction} from "./transaction_pb.js";
import {AccountID, AddressIndex, AssetId, IdentityKey, Note, NoteCommitment, Nullifier} from "./crypto_pb.js";
import {NoteSource} from "./chain_pb.js";

/**
 * @generated from message penumbra.view.TransactionsRequest
 */
export const TransactionsRequest = proto3.makeMessageType(
  "penumbra.view.TransactionsRequest",
  () => [
    { no: 1, name: "start_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 2, name: "end_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ],
);

/**
 * @generated from message penumbra.view.TransactionHashStreamResponse
 */
export const TransactionHashStreamResponse = proto3.makeMessageType(
  "penumbra.view.TransactionHashStreamResponse",
  () => [
    { no: 1, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "tx_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * A streaming full transaction response
 *
 * @generated from message penumbra.view.TransactionStreamResponse
 */
export const TransactionStreamResponse = proto3.makeMessageType(
  "penumbra.view.TransactionStreamResponse",
  () => [
    { no: 1, name: "block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "tx_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "tx", kind: "message", T: Transaction },
  ],
);

/**
 * @generated from message penumbra.view.NoteByCommitmentRequest
 */
export const NoteByCommitmentRequest = proto3.makeMessageType(
  "penumbra.view.NoteByCommitmentRequest",
  () => [
    { no: 1, name: "account_id", kind: "message", T: AccountID },
    { no: 2, name: "note_commitment", kind: "message", T: NoteCommitment },
    { no: 3, name: "await_detection", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Requests the current chain parameters from the view service.
 *
 * @generated from message penumbra.view.ChainParamsRequest
 */
export const ChainParamsRequest = proto3.makeMessageType(
  "penumbra.view.ChainParamsRequest",
  [],
);

/**
 * Requests the current FMD parameters from the view service.
 *
 * @generated from message penumbra.view.FMDParametersRequest
 */
export const FMDParametersRequest = proto3.makeMessageType(
  "penumbra.view.FMDParametersRequest",
  [],
);

/**
 * Requests all assets known to the view service.
 *
 * @generated from message penumbra.view.AssetRequest
 */
export const AssetRequest = proto3.makeMessageType(
  "penumbra.view.AssetRequest",
  [],
);

/**
 * Requests sync status of the view service.
 *
 * @generated from message penumbra.view.StatusRequest
 */
export const StatusRequest = proto3.makeMessageType(
  "penumbra.view.StatusRequest",
  () => [
    { no: 1, name: "account_id", kind: "message", T: AccountID },
  ],
);

/**
 * Returns the status of the view service and whether it is synchronized with the chain state.
 *
 * @generated from message penumbra.view.StatusResponse
 */
export const StatusResponse = proto3.makeMessageType(
  "penumbra.view.StatusResponse",
  () => [
    { no: 1, name: "sync_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "catching_up", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Requests streaming updates on the sync height until the view service is synchronized.
 *
 * @generated from message penumbra.view.StatusStreamRequest
 */
export const StatusStreamRequest = proto3.makeMessageType(
  "penumbra.view.StatusStreamRequest",
  () => [
    { no: 1, name: "account_id", kind: "message", T: AccountID },
  ],
);

/**
 * A streaming sync status update
 *
 * @generated from message penumbra.view.StatusStreamResponse
 */
export const StatusStreamResponse = proto3.makeMessageType(
  "penumbra.view.StatusStreamResponse",
  () => [
    { no: 1, name: "latest_known_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "sync_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * A note plaintext with associated metadata about its status.
 *
 * @generated from message penumbra.view.SpendableNoteRecord
 */
export const SpendableNoteRecord = proto3.makeMessageType(
  "penumbra.view.SpendableNoteRecord",
  () => [
    { no: 1, name: "note_commitment", kind: "message", T: NoteCommitment },
    { no: 2, name: "note", kind: "message", T: Note },
    { no: 3, name: "address_index", kind: "message", T: AddressIndex },
    { no: 4, name: "nullifier", kind: "message", T: Nullifier },
    { no: 5, name: "height_created", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "height_spent", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 7, name: "position", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "source", kind: "message", T: NoteSource },
  ],
);

/**
 * A query for notes known by the view service.
 *
 * This message uses the fact that all proto fields are optional
 * to allow various filtering on the returned notes.
 *
 * @generated from message penumbra.view.NotesRequest
 */
export const NotesRequest = proto3.makeMessageType(
  "penumbra.view.NotesRequest",
  () => [
    { no: 1, name: "account_id", kind: "message", T: AccountID },
    { no: 2, name: "include_spent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "asset_id", kind: "message", T: AssetId },
    { no: 4, name: "address_index", kind: "message", T: AddressIndex },
    { no: 5, name: "amount_to_spend", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message penumbra.view.WitnessRequest
 */
export const WitnessRequest = proto3.makeMessageType(
  "penumbra.view.WitnessRequest",
  () => [
    { no: 1, name: "account_id", kind: "message", T: AccountID },
    { no: 2, name: "note_commitments", kind: "message", T: NoteCommitment, repeated: true },
  ],
);

/**
 * The plaintext of a note that has been quarantined until the end of an unbonding period.
 *
 * @generated from message penumbra.view.QuarantinedNoteRecord
 */
export const QuarantinedNoteRecord = proto3.makeMessageType(
  "penumbra.view.QuarantinedNoteRecord",
  () => [
    { no: 1, name: "note_commitment", kind: "message", T: NoteCommitment },
    { no: 2, name: "note", kind: "message", T: Note },
    { no: 3, name: "address_index", kind: "message", T: AddressIndex },
    { no: 4, name: "height_created", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "unbonding_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "identity_key", kind: "message", T: IdentityKey },
    { no: 7, name: "source", kind: "message", T: NoteSource },
  ],
);

/**
 * A query for quarantined notes known by the view service.
 *
 * @generated from message penumbra.view.QuarantinedNotesRequest
 */
export const QuarantinedNotesRequest = proto3.makeMessageType(
  "penumbra.view.QuarantinedNotesRequest",
  () => [
    { no: 1, name: "account_id", kind: "message", T: AccountID },
  ],
);

/**
 * @generated from message penumbra.view.NullifierStatusRequest
 */
export const NullifierStatusRequest = proto3.makeMessageType(
  "penumbra.view.NullifierStatusRequest",
  () => [
    { no: 1, name: "account_id", kind: "message", T: AccountID },
    { no: 2, name: "nullifier", kind: "message", T: Nullifier },
    { no: 3, name: "await_detection", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message penumbra.view.NullifierStatusResponse
 */
export const NullifierStatusResponse = proto3.makeMessageType(
  "penumbra.view.NullifierStatusResponse",
  () => [
    { no: 1, name: "spent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

