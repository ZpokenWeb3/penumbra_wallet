// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file governance.proto (package penumbra.governance, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * A vote on a proposal.
 *
 * @generated from message penumbra.governance.Vote
 */
export class Vote extends Message<Vote> {
  /**
   * The vote.
   *
   * @generated from field: penumbra.governance.Vote.Vote vote = 1;
   */
  vote = Vote_Vote.ABSTAIN;

  constructor(data?: PartialMessage<Vote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "penumbra.governance.Vote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vote", kind: "enum", T: proto3.getEnumType(Vote_Vote) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Vote {
    return new Vote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Vote {
    return new Vote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Vote {
    return new Vote().fromJsonString(jsonString, options);
  }

  static equals(a: Vote | PlainMessage<Vote> | undefined, b: Vote | PlainMessage<Vote> | undefined): boolean {
    return proto3.util.equals(Vote, a, b);
  }
}

/**
 * A vote.
 *
 * @generated from enum penumbra.governance.Vote.Vote
 */
export enum Vote_Vote {
  /**
   * @generated from enum value: ABSTAIN = 0;
   */
  ABSTAIN = 0,

  /**
   * @generated from enum value: YES = 1;
   */
  YES = 1,

  /**
   * @generated from enum value: NO = 2;
   */
  NO = 2,

  /**
   * @generated from enum value: NO_WITH_VETO = 3;
   */
  NO_WITH_VETO = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Vote_Vote)
proto3.util.setEnumType(Vote_Vote, "penumbra.governance.Vote.Vote", [
  { no: 0, name: "ABSTAIN" },
  { no: 1, name: "YES" },
  { no: 2, name: "NO" },
  { no: 3, name: "NO_WITH_VETO" },
]);

/**
 * The current state of a proposal.
 *
 * @generated from message penumbra.governance.ProposalState
 */
export class ProposalState extends Message<ProposalState> {
  /**
   * The state of the proposal.
   *
   * @generated from oneof penumbra.governance.ProposalState.state
   */
  state: {
    /**
     * @generated from field: penumbra.governance.ProposalState.Voting voting = 2;
     */
    value: ProposalState_Voting;
    case: "voting";
  } | {
    /**
     * @generated from field: penumbra.governance.ProposalState.Withdrawn withdrawn = 3;
     */
    value: ProposalState_Withdrawn;
    case: "withdrawn";
  } | {
    /**
     * @generated from field: penumbra.governance.ProposalState.Finished finished = 4;
     */
    value: ProposalState_Finished;
    case: "finished";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ProposalState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "penumbra.governance.ProposalState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "voting", kind: "message", T: ProposalState_Voting, oneof: "state" },
    { no: 3, name: "withdrawn", kind: "message", T: ProposalState_Withdrawn, oneof: "state" },
    { no: 4, name: "finished", kind: "message", T: ProposalState_Finished, oneof: "state" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProposalState {
    return new ProposalState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProposalState {
    return new ProposalState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProposalState {
    return new ProposalState().fromJsonString(jsonString, options);
  }

  static equals(a: ProposalState | PlainMessage<ProposalState> | undefined, b: ProposalState | PlainMessage<ProposalState> | undefined): boolean {
    return proto3.util.equals(ProposalState, a, b);
  }
}

/**
 * Voting is in progress and the proposal has not yet concluded voting or been withdrawn.
 *
 * @generated from message penumbra.governance.ProposalState.Voting
 */
export class ProposalState_Voting extends Message<ProposalState_Voting> {
  constructor(data?: PartialMessage<ProposalState_Voting>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "penumbra.governance.ProposalState.Voting";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProposalState_Voting {
    return new ProposalState_Voting().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProposalState_Voting {
    return new ProposalState_Voting().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProposalState_Voting {
    return new ProposalState_Voting().fromJsonString(jsonString, options);
  }

  static equals(a: ProposalState_Voting | PlainMessage<ProposalState_Voting> | undefined, b: ProposalState_Voting | PlainMessage<ProposalState_Voting> | undefined): boolean {
    return proto3.util.equals(ProposalState_Voting, a, b);
  }
}

/**
 * The proposal has been withdrawn but the voting period is not yet concluded.
 *
 * @generated from message penumbra.governance.ProposalState.Withdrawn
 */
export class ProposalState_Withdrawn extends Message<ProposalState_Withdrawn> {
  /**
   * The reason for the withdrawal.
   *
   * @generated from field: string reason = 1;
   */
  reason = "";

  constructor(data?: PartialMessage<ProposalState_Withdrawn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "penumbra.governance.ProposalState.Withdrawn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProposalState_Withdrawn {
    return new ProposalState_Withdrawn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProposalState_Withdrawn {
    return new ProposalState_Withdrawn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProposalState_Withdrawn {
    return new ProposalState_Withdrawn().fromJsonString(jsonString, options);
  }

  static equals(a: ProposalState_Withdrawn | PlainMessage<ProposalState_Withdrawn> | undefined, b: ProposalState_Withdrawn | PlainMessage<ProposalState_Withdrawn> | undefined): boolean {
    return proto3.util.equals(ProposalState_Withdrawn, a, b);
  }
}

/**
 * The voting period has ended, and the proposal has been assigned an outcome.
 *
 * @generated from message penumbra.governance.ProposalState.Finished
 */
export class ProposalState_Finished extends Message<ProposalState_Finished> {
  /**
   * @generated from field: penumbra.governance.ProposalOutcome outcome = 1;
   */
  outcome?: ProposalOutcome;

  constructor(data?: PartialMessage<ProposalState_Finished>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "penumbra.governance.ProposalState.Finished";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "outcome", kind: "message", T: ProposalOutcome },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProposalState_Finished {
    return new ProposalState_Finished().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProposalState_Finished {
    return new ProposalState_Finished().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProposalState_Finished {
    return new ProposalState_Finished().fromJsonString(jsonString, options);
  }

  static equals(a: ProposalState_Finished | PlainMessage<ProposalState_Finished> | undefined, b: ProposalState_Finished | PlainMessage<ProposalState_Finished> | undefined): boolean {
    return proto3.util.equals(ProposalState_Finished, a, b);
  }
}

/**
 * The outcome of a concluded proposal.
 *
 * @generated from message penumbra.governance.ProposalOutcome
 */
export class ProposalOutcome extends Message<ProposalOutcome> {
  /**
   * @generated from oneof penumbra.governance.ProposalOutcome.outcome
   */
  outcome: {
    /**
     * @generated from field: penumbra.governance.ProposalOutcome.Passed passed = 1;
     */
    value: ProposalOutcome_Passed;
    case: "passed";
  } | {
    /**
     * @generated from field: penumbra.governance.ProposalOutcome.Failed failed = 2;
     */
    value: ProposalOutcome_Failed;
    case: "failed";
  } | {
    /**
     * @generated from field: penumbra.governance.ProposalOutcome.Vetoed vetoed = 3;
     */
    value: ProposalOutcome_Vetoed;
    case: "vetoed";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ProposalOutcome>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "penumbra.governance.ProposalOutcome";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "passed", kind: "message", T: ProposalOutcome_Passed, oneof: "outcome" },
    { no: 2, name: "failed", kind: "message", T: ProposalOutcome_Failed, oneof: "outcome" },
    { no: 3, name: "vetoed", kind: "message", T: ProposalOutcome_Vetoed, oneof: "outcome" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProposalOutcome {
    return new ProposalOutcome().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProposalOutcome {
    return new ProposalOutcome().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProposalOutcome {
    return new ProposalOutcome().fromJsonString(jsonString, options);
  }

  static equals(a: ProposalOutcome | PlainMessage<ProposalOutcome> | undefined, b: ProposalOutcome | PlainMessage<ProposalOutcome> | undefined): boolean {
    return proto3.util.equals(ProposalOutcome, a, b);
  }
}

/**
 * The proposal was passed.
 *
 * @generated from message penumbra.governance.ProposalOutcome.Passed
 */
export class ProposalOutcome_Passed extends Message<ProposalOutcome_Passed> {
  constructor(data?: PartialMessage<ProposalOutcome_Passed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "penumbra.governance.ProposalOutcome.Passed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProposalOutcome_Passed {
    return new ProposalOutcome_Passed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProposalOutcome_Passed {
    return new ProposalOutcome_Passed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProposalOutcome_Passed {
    return new ProposalOutcome_Passed().fromJsonString(jsonString, options);
  }

  static equals(a: ProposalOutcome_Passed | PlainMessage<ProposalOutcome_Passed> | undefined, b: ProposalOutcome_Passed | PlainMessage<ProposalOutcome_Passed> | undefined): boolean {
    return proto3.util.equals(ProposalOutcome_Passed, a, b);
  }
}

/**
 * The proposal did not pass.
 *
 * @generated from message penumbra.governance.ProposalOutcome.Failed
 */
export class ProposalOutcome_Failed extends Message<ProposalOutcome_Failed> {
  /**
   * The proposal was withdrawn during the voting period.
   *
   * @generated from field: optional string withdrawn_with_reason = 1;
   */
  withdrawnWithReason?: string;

  constructor(data?: PartialMessage<ProposalOutcome_Failed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "penumbra.governance.ProposalOutcome.Failed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "withdrawn_with_reason", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProposalOutcome_Failed {
    return new ProposalOutcome_Failed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProposalOutcome_Failed {
    return new ProposalOutcome_Failed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProposalOutcome_Failed {
    return new ProposalOutcome_Failed().fromJsonString(jsonString, options);
  }

  static equals(a: ProposalOutcome_Failed | PlainMessage<ProposalOutcome_Failed> | undefined, b: ProposalOutcome_Failed | PlainMessage<ProposalOutcome_Failed> | undefined): boolean {
    return proto3.util.equals(ProposalOutcome_Failed, a, b);
  }
}

/**
 * The proposal did not pass, and was vetoed.
 *
 * @generated from message penumbra.governance.ProposalOutcome.Vetoed
 */
export class ProposalOutcome_Vetoed extends Message<ProposalOutcome_Vetoed> {
  /**
   * The proposal was withdrawn during the voting period.
   *
   * @generated from field: optional string withdrawn_with_reason = 1;
   */
  withdrawnWithReason?: string;

  constructor(data?: PartialMessage<ProposalOutcome_Vetoed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "penumbra.governance.ProposalOutcome.Vetoed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "withdrawn_with_reason", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProposalOutcome_Vetoed {
    return new ProposalOutcome_Vetoed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProposalOutcome_Vetoed {
    return new ProposalOutcome_Vetoed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProposalOutcome_Vetoed {
    return new ProposalOutcome_Vetoed().fromJsonString(jsonString, options);
  }

  static equals(a: ProposalOutcome_Vetoed | PlainMessage<ProposalOutcome_Vetoed> | undefined, b: ProposalOutcome_Vetoed | PlainMessage<ProposalOutcome_Vetoed> | undefined): boolean {
    return proto3.util.equals(ProposalOutcome_Vetoed, a, b);
  }
}

/**
 * A list of proposal ids.
 *
 * @generated from message penumbra.governance.ProposalList
 */
export class ProposalList extends Message<ProposalList> {
  /**
   * @generated from field: repeated uint64 proposals = 1;
   */
  proposals: bigint[] = [];

  constructor(data?: PartialMessage<ProposalList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "penumbra.governance.ProposalList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposals", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProposalList {
    return new ProposalList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProposalList {
    return new ProposalList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProposalList {
    return new ProposalList().fromJsonString(jsonString, options);
  }

  static equals(a: ProposalList | PlainMessage<ProposalList> | undefined, b: ProposalList | PlainMessage<ProposalList> | undefined): boolean {
    return proto3.util.equals(ProposalList, a, b);
  }
}

