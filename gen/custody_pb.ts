// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file custody.proto (package penumbra.custody, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import {TransactionPlan} from "./transaction_pb.js";
import {AccountID} from "./crypto_pb.js";

/**
 * @generated from message penumbra.custody.AuthorizeRequest
 */
export class AuthorizeRequest extends Message<AuthorizeRequest> {
  /**
   * The transaction plan to authorize.
   *
   * @generated from field: penumbra.transaction.TransactionPlan plan = 1;
   */
  plan?: TransactionPlan;

  /**
   * Identifies the FVK (and hence the spend authorization key) to use for signing.
   *
   * @generated from field: penumbra.crypto.AccountID account_id = 2;
   */
  accountId?: AccountID;

  constructor(data?: PartialMessage<AuthorizeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "penumbra.custody.AuthorizeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plan", kind: "message", T: TransactionPlan },
    { no: 2, name: "account_id", kind: "message", T: AccountID },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthorizeRequest {
    return new AuthorizeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthorizeRequest {
    return new AuthorizeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthorizeRequest {
    return new AuthorizeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AuthorizeRequest | PlainMessage<AuthorizeRequest> | undefined, b: AuthorizeRequest | PlainMessage<AuthorizeRequest> | undefined): boolean {
    return proto3.util.equals(AuthorizeRequest, a, b);
  }
}

