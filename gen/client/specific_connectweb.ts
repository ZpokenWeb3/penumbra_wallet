// @generated by protoc-gen-connect-web v0.2.1 with parameter "target=ts"
// @generated from file client/specific.proto (package penumbra.client.specific, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {IdentityKey, NoteCommitment} from "../crypto_pb.js";
import {NoteSource} from "../chain_pb.js";
import {MethodKind} from "@bufbuild/protobuf";
import {BatchSwapOutputDataRequest, KeyValueRequest, KeyValueResponse, StubCPMMReservesRequest, ValidatorStatusRequest} from "./specific_pb.js";
import {RateData, ValidatorStatus} from "../stake_pb.js";
import {BatchSwapOutputData, Reserves} from "../dex_pb.js";

/**
 * Methods for accessing chain state that are "specific" in the sense that they
 * request specific portions of the chain state that could reveal private
 * client data.  For instance, requesting all asset denominations is oblivious,
 * but requesting the asset denomination for a specific asset id is not, because
 * it reveals that the client has an interest in that asset specifically.
 *
 * @generated from service penumbra.client.specific.SpecificQuery
 */
export const SpecificQuery = {
  typeName: "penumbra.client.specific.SpecificQuery",
  methods: {
    /**
     * @generated from rpc penumbra.client.specific.SpecificQuery.TransactionByNote
     */
    transactionByNote: {
      name: "TransactionByNote",
      I: NoteCommitment,
      O: NoteSource,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc penumbra.client.specific.SpecificQuery.ValidatorStatus
     */
    validatorStatus: {
      name: "ValidatorStatus",
      I: ValidatorStatusRequest,
      O: ValidatorStatus,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc penumbra.client.specific.SpecificQuery.NextValidatorRate
     */
    nextValidatorRate: {
      name: "NextValidatorRate",
      I: IdentityKey,
      O: RateData,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc penumbra.client.specific.SpecificQuery.BatchSwapOutputData
     */
    batchSwapOutputData: {
      name: "BatchSwapOutputData",
      I: BatchSwapOutputDataRequest,
      O: BatchSwapOutputData,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc penumbra.client.specific.SpecificQuery.StubCPMMReserves
     */
    stubCPMMReserves: {
      name: "StubCPMMReserves",
      I: StubCPMMReservesRequest,
      O: Reserves,
      kind: MethodKind.Unary,
    },
    /**
     * General-purpose key-value state query API, that can be used to query
     * arbitrary keys in the JMT storage.
     *
     * @generated from rpc penumbra.client.specific.SpecificQuery.KeyValue
     */
    keyValue: {
      name: "KeyValue",
      I: KeyValueRequest,
      O: KeyValueResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

