// @generated by protoc-gen-es v0.1.1 with parameter "target=js"
// @generated from file client/specific.proto (package penumbra.client.specific, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {proto3} from "@bufbuild/protobuf";
import {TradingPair} from "../dex_pb.js";
import {IdentityKey} from "../crypto_pb.js";
import {CommitmentProof} from "../proofs_pb.js";

/**
 * Requests batch swap data associated with a given height and trading pair from the view service.
 *
 * @generated from message penumbra.client.specific.BatchSwapOutputDataRequest
 */
export const BatchSwapOutputDataRequest = proto3.makeMessageType(
  "penumbra.client.specific.BatchSwapOutputDataRequest",
  () => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "trading_pair", kind: "message", T: TradingPair },
  ],
);

/**
 * Requests CPMM reserves data associated with a given trading pair from the view service.
 *
 * @generated from message penumbra.client.specific.StubCPMMReservesRequest
 */
export const StubCPMMReservesRequest = proto3.makeMessageType(
  "penumbra.client.specific.StubCPMMReservesRequest",
  () => [
    { no: 1, name: "trading_pair", kind: "message", T: TradingPair },
  ],
);

/**
 * @generated from message penumbra.client.specific.ValidatorStatusRequest
 */
export const ValidatorStatusRequest = proto3.makeMessageType(
  "penumbra.client.specific.ValidatorStatusRequest",
  () => [
    { no: 1, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "identity_key", kind: "message", T: IdentityKey },
  ],
);

/**
 * Performs a key-value query, either by key or by key hash.
 *
 * Proofs are only supported by key.
 *
 * @generated from message penumbra.client.specific.KeyValueRequest
 */
export const KeyValueRequest = proto3.makeMessageType(
  "penumbra.client.specific.KeyValueRequest",
  () => [
    { no: 1, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message penumbra.client.specific.KeyValueResponse
 */
export const KeyValueResponse = proto3.makeMessageType(
  "penumbra.client.specific.KeyValueResponse",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "proof", kind: "message", T: CommitmentProof },
  ],
);

