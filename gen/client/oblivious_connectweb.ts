// @generated by protoc-gen-connect-web v0.2.1 with parameter "target=ts"
// @generated from file client/oblivious.proto (package penumbra.client.oblivious, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {AssetListRequest, ChainParamsRequest, CompactBlockRangeRequest, ValidatorInfoRequest} from "./oblivious_pb.js";
import {ChainParameters, CompactBlock, KnownAssets} from "../chain_pb.js";
import {MethodKind} from "@bufbuild/protobuf";
import {ValidatorInfo} from "../stake_pb.js";

/**
 * Methods for accessing chain state that are "oblivious" in the sense that they
 * do not request specific portions of the chain state that could reveal private
 * client data.  For instance, requesting all asset denominations is oblivious,
 * but requesting the asset denomination for a specific asset id is not, because
 * it reveals that the client has an interest in that asset specifically.
 *
 * @generated from service penumbra.client.oblivious.ObliviousQuery
 */
export const ObliviousQuery = {
  typeName: "penumbra.client.oblivious.ObliviousQuery",
  methods: {
    /**
     * @generated from rpc penumbra.client.oblivious.ObliviousQuery.CompactBlockRange
     */
    compactBlockRange: {
      name: "CompactBlockRange",
      I: CompactBlockRangeRequest,
      O: CompactBlock,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc penumbra.client.oblivious.ObliviousQuery.ChainParameters
     */
    chainParameters: {
      name: "ChainParameters",
      I: ChainParamsRequest,
      O: ChainParameters,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc penumbra.client.oblivious.ObliviousQuery.ValidatorInfo
     */
    validatorInfo: {
      name: "ValidatorInfo",
      I: ValidatorInfoRequest,
      O: ValidatorInfo,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc penumbra.client.oblivious.ObliviousQuery.AssetList
     */
    assetList: {
      name: "AssetList",
      I: AssetListRequest,
      O: KnownAssets,
      kind: MethodKind.Unary,
    },
  }
} as const;

