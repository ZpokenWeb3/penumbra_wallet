// @generated by protoc-gen-es v0.1.1 with parameter "target=js"
// @generated from file stake.proto (package penumbra.stake, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {proto3} from "@bufbuild/protobuf";
import {Address, ConsensusKey, GovernanceKey, IdentityKey} from "./crypto_pb.js";

/**
 * Describes a validator's configuration data.
 *
 * @generated from message penumbra.stake.Validator
 */
export const Validator = proto3.makeMessageType(
  "penumbra.stake.Validator",
  () => [
    { no: 1, name: "identity_key", kind: "message", T: IdentityKey },
    { no: 2, name: "consensus_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "website", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "funding_streams", kind: "message", T: FundingStream, repeated: true },
    { no: 7, name: "sequence_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 9, name: "governance_key", kind: "message", T: GovernanceKey },
  ],
);

/**
 * For storing the list of keys of known validators.
 *
 * @generated from message penumbra.stake.ValidatorList
 */
export const ValidatorList = proto3.makeMessageType(
  "penumbra.stake.ValidatorList",
  () => [
    { no: 1, name: "validator_keys", kind: "message", T: IdentityKey, repeated: true },
  ],
);

/**
 * A portion of a validator's commission.
 *
 * @generated from message penumbra.stake.FundingStream
 */
export const FundingStream = proto3.makeMessageType(
  "penumbra.stake.FundingStream",
  () => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rate_bps", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * Describes the reward and exchange rates and voting power for a validator in some epoch.
 *
 * @generated from message penumbra.stake.RateData
 */
export const RateData = proto3.makeMessageType(
  "penumbra.stake.RateData",
  () => [
    { no: 1, name: "identity_key", kind: "message", T: IdentityKey },
    { no: 2, name: "epoch_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "validator_reward_rate", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "validator_exchange_rate", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Describes the base reward and exchange rates in some epoch.
 *
 * @generated from message penumbra.stake.BaseRateData
 */
export const BaseRateData = proto3.makeMessageType(
  "penumbra.stake.BaseRateData",
  () => [
    { no: 1, name: "epoch_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "base_reward_rate", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "base_exchange_rate", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Describes the current state of a validator on-chain
 *
 * @generated from message penumbra.stake.ValidatorStatus
 */
export const ValidatorStatus = proto3.makeMessageType(
  "penumbra.stake.ValidatorStatus",
  () => [
    { no: 1, name: "identity_key", kind: "message", T: IdentityKey },
    { no: 2, name: "state", kind: "message", T: ValidatorState },
    { no: 3, name: "voting_power", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "bonding_state", kind: "message", T: BondingState },
  ],
);

/**
 * Describes the unbonding state of a validator's stake pool.
 *
 * @generated from message penumbra.stake.BondingState
 */
export const BondingState = proto3.makeMessageType(
  "penumbra.stake.BondingState",
  () => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(BondingState_BondingStateEnum) },
    { no: 2, name: "unbonding_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ],
);

/**
 * @generated from enum penumbra.stake.BondingState.BondingStateEnum
 */
export const BondingState_BondingStateEnum = proto3.makeEnum(
  "penumbra.stake.BondingState.BondingStateEnum",
  [
    {no: 0, name: "BONDED"},
    {no: 1, name: "UNBONDING"},
    {no: 2, name: "UNBONDED"},
  ],
);

/**
 * Describes the state of a validator
 *
 * @generated from message penumbra.stake.ValidatorState
 */
export const ValidatorState = proto3.makeMessageType(
  "penumbra.stake.ValidatorState",
  () => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(ValidatorState_ValidatorStateEnum) },
  ],
);

/**
 * @generated from enum penumbra.stake.ValidatorState.ValidatorStateEnum
 */
export const ValidatorState_ValidatorStateEnum = proto3.makeEnum(
  "penumbra.stake.ValidatorState.ValidatorStateEnum",
  [
    {no: 0, name: "INACTIVE"},
    {no: 1, name: "ACTIVE"},
    {no: 2, name: "JAILED"},
    {no: 3, name: "TOMBSTONED"},
    {no: 4, name: "DISABLED"},
  ],
);

/**
 * Combines all validator info into a single packet.
 *
 * @generated from message penumbra.stake.ValidatorInfo
 */
export const ValidatorInfo = proto3.makeMessageType(
  "penumbra.stake.ValidatorInfo",
  () => [
    { no: 1, name: "validator", kind: "message", T: Validator },
    { no: 2, name: "status", kind: "message", T: ValidatorStatus },
    { no: 3, name: "rate_data", kind: "message", T: RateData },
  ],
);

/**
 * A transaction action (re)defining a validator.
 *
 * @generated from message penumbra.stake.ValidatorDefinition
 */
export const ValidatorDefinition = proto3.makeMessageType(
  "penumbra.stake.ValidatorDefinition",
  () => [
    { no: 1, name: "validator", kind: "message", T: Validator },
    { no: 2, name: "auth_sig", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * A transaction action adding stake to a validator's delegation pool.
 *
 * @generated from message penumbra.stake.Delegate
 */
export const Delegate = proto3.makeMessageType(
  "penumbra.stake.Delegate",
  () => [
    { no: 1, name: "validator_identity", kind: "message", T: IdentityKey },
    { no: 2, name: "epoch_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "unbonded_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "delegation_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * A transaction action withdrawing stake from a validator's delegation pool.
 *
 * @generated from message penumbra.stake.Undelegate
 */
export const Undelegate = proto3.makeMessageType(
  "penumbra.stake.Undelegate",
  () => [
    { no: 1, name: "validator_identity", kind: "message", T: IdentityKey },
    { no: 2, name: "epoch_index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "unbonded_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "delegation_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * A commission amount to be minted as part of processing the epoch transition.
 *
 * @generated from message penumbra.stake.CommissionAmount
 */
export const CommissionAmount = proto3.makeMessageType(
  "penumbra.stake.CommissionAmount",
  () => [
    { no: 1, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "destination", kind: "message", T: Address },
  ],
);

/**
 * A list of commission amounts to be minted as part of processing the epoch transition.
 *
 * @generated from message penumbra.stake.CommissionAmounts
 */
export const CommissionAmounts = proto3.makeMessageType(
  "penumbra.stake.CommissionAmounts",
  () => [
    { no: 1, name: "notes", kind: "message", T: CommissionAmount, repeated: true },
  ],
);

/**
 * A list of pending delegations and undelegations.
 *
 * @generated from message penumbra.stake.DelegationChanges
 */
export const DelegationChanges = proto3.makeMessageType(
  "penumbra.stake.DelegationChanges",
  () => [
    { no: 1, name: "delegations", kind: "message", T: Delegate, repeated: true },
    { no: 2, name: "undelegations", kind: "message", T: Undelegate, repeated: true },
  ],
);

/**
 * Track's a validator's uptime.
 *
 * @generated from message penumbra.stake.Uptime
 */
export const Uptime = proto3.makeMessageType(
  "penumbra.stake.Uptime",
  () => [
    { no: 1, name: "as_of_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "window_len", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "bitvec", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Tracks our view of Tendermint's view of the validator set, so we can keep it
 * from getting confused.
 *
 * @generated from message penumbra.stake.CurrentConsensusKeys
 */
export const CurrentConsensusKeys = proto3.makeMessageType(
  "penumbra.stake.CurrentConsensusKeys",
  () => [
    { no: 1, name: "consensus_keys", kind: "message", T: ConsensusKey, repeated: true },
  ],
);

