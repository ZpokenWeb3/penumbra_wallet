// @generated by protoc-gen-es v0.1.1 with parameter "target=js"
// @generated from file chain.proto (package penumbra.chain, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {proto3} from "@bufbuild/protobuf";
import {Address, Asset, AssetId, Denom, IdentityKey, MerkleRoot, NotePayload, Nullifier} from "./crypto_pb.js";
import {Validator} from "./stake_pb.js";

/**
 * Global chain configuration data, such as chain ID, epoch duration, etc.
 *
 * @generated from message penumbra.chain.ChainParameters
 */
export const ChainParameters = proto3.makeMessageType(
  "penumbra.chain.ChainParameters",
  () => [
    { no: 1, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "epoch_duration", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "unbonding_epochs", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "active_validator_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "base_reward_rate", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "slashing_penalty_misbehavior_bps", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "slashing_penalty_downtime_bps", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "signed_blocks_window_len", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "missed_blocks_maximum", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "ibc_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "inbound_ics20_transfers_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "outbound_ics20_transfers_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "proposal_voting_blocks", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 21, name: "proposal_deposit_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 22, name: "proposal_valid_quorum", kind: "message", T: Ratio },
    { no: 23, name: "proposal_pass_threshold", kind: "message", T: Ratio },
    { no: 24, name: "proposal_veto_threshold", kind: "message", T: Ratio },
  ],
);

/**
 * The ratio between two numbers, used in governance to describe vote thresholds and quorums.
 *
 * @generated from message penumbra.chain.Ratio
 */
export const Ratio = proto3.makeMessageType(
  "penumbra.chain.Ratio",
  () => [
    { no: 1, name: "numerator", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "denominator", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Parameters for Fuzzy Message Detection
 *
 * @generated from message penumbra.chain.FmdParameters
 */
export const FmdParameters = proto3.makeMessageType(
  "penumbra.chain.FmdParameters",
  () => [
    { no: 1, name: "precision_bits", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "as_of_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * TODO: delete with legacy code
 * Information about a given asset at a given time (as specified by block
 * height). Currently this only contains the total supply.
 *
 * @generated from message penumbra.chain.AssetInfo
 */
export const AssetInfo = proto3.makeMessageType(
  "penumbra.chain.AssetInfo",
  () => [
    { no: 1, name: "asset_id", kind: "message", T: AssetId },
    { no: 2, name: "denom", kind: "message", T: Denom },
    { no: 3, name: "as_of_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "total_supply", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Contains the minimum data needed to update client state.
 *
 * @generated from message penumbra.chain.CompactBlock
 */
export const CompactBlock = proto3.makeMessageType(
  "penumbra.chain.CompactBlock",
  () => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "note_payloads", kind: "message", T: AnnotatedNotePayload, repeated: true },
    { no: 3, name: "nullifiers", kind: "message", T: Nullifier, repeated: true },
    { no: 4, name: "block_root", kind: "message", T: MerkleRoot },
    { no: 5, name: "epoch_root", kind: "message", T: MerkleRoot },
    { no: 6, name: "quarantined", kind: "message", T: Quarantined },
    { no: 16, name: "slashed", kind: "message", T: IdentityKey, repeated: true },
    { no: 20, name: "proposal_started", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 100, name: "fmd_parameters", kind: "message", T: FmdParameters },
  ],
);

/**
 * A note payload, annotated with the note source.
 *
 * @generated from message penumbra.chain.AnnotatedNotePayload
 */
export const AnnotatedNotePayload = proto3.makeMessageType(
  "penumbra.chain.AnnotatedNotePayload",
  () => [
    { no: 1, name: "payload", kind: "message", T: NotePayload },
    { no: 2, name: "source", kind: "message", T: NoteSource },
  ],
);

/**
 * @generated from message penumbra.chain.KnownAssets
 */
export const KnownAssets = proto3.makeMessageType(
  "penumbra.chain.KnownAssets",
  () => [
    { no: 1, name: "assets", kind: "message", T: Asset, repeated: true },
  ],
);

/**
 * A spicy transaction ID
 *
 * @generated from message penumbra.chain.NoteSource
 */
export const NoteSource = proto3.makeMessageType(
  "penumbra.chain.NoteSource",
  () => [
    { no: 1, name: "inner", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * A spicier transaction ID: one which can be missing
 *
 * @generated from message penumbra.chain.DelibleNoteSource
 */
export const DelibleNoteSource = proto3.makeMessageType(
  "penumbra.chain.DelibleNoteSource",
  () => [
    { no: 1, name: "source", kind: "message", T: NoteSource },
  ],
);

/**
 * @generated from message penumbra.chain.GenesisAppState
 */
export const GenesisAppState = proto3.makeMessageType(
  "penumbra.chain.GenesisAppState",
  () => [
    { no: 1, name: "chain_params", kind: "message", T: ChainParameters },
    { no: 2, name: "validators", kind: "message", T: Validator, repeated: true },
    { no: 3, name: "allocations", kind: "message", T: GenesisAppState_Allocation, repeated: true },
  ],
);

/**
 * @generated from message penumbra.chain.GenesisAppState.Allocation
 */
export const GenesisAppState_Allocation = proto3.makeMessageType(
  "penumbra.chain.GenesisAppState.Allocation",
  () => [
    { no: 1, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "address", kind: "message", T: Address },
  ],
  {localName: "GenesisAppState_Allocation"},
);

/**
 * @generated from message penumbra.chain.Quarantined
 */
export const Quarantined = proto3.makeMessageType(
  "penumbra.chain.Quarantined",
  () => [
    { no: 1, name: "per_epoch", kind: "message", T: Quarantined_EpochEntry, repeated: true },
  ],
);

/**
 * @generated from message penumbra.chain.Quarantined.Unbonding
 */
export const Quarantined_Unbonding = proto3.makeMessageType(
  "penumbra.chain.Quarantined.Unbonding",
  () => [
    { no: 1, name: "note_payloads", kind: "message", T: AnnotatedNotePayload, repeated: true },
    { no: 2, name: "nullifiers", kind: "message", T: Nullifier, repeated: true },
  ],
  {localName: "Quarantined_Unbonding"},
);

/**
 * @generated from message penumbra.chain.Quarantined.ValidatorEntry
 */
export const Quarantined_ValidatorEntry = proto3.makeMessageType(
  "penumbra.chain.Quarantined.ValidatorEntry",
  () => [
    { no: 1, name: "identity_key", kind: "message", T: IdentityKey },
    { no: 2, name: "unbonding", kind: "message", T: Quarantined_Unbonding },
  ],
  {localName: "Quarantined_ValidatorEntry"},
);

/**
 * @generated from message penumbra.chain.Quarantined.Scheduled
 */
export const Quarantined_Scheduled = proto3.makeMessageType(
  "penumbra.chain.Quarantined.Scheduled",
  () => [
    { no: 1, name: "per_validator", kind: "message", T: Quarantined_ValidatorEntry, repeated: true },
  ],
  {localName: "Quarantined_Scheduled"},
);

/**
 * @generated from message penumbra.chain.Quarantined.EpochEntry
 */
export const Quarantined_EpochEntry = proto3.makeMessageType(
  "penumbra.chain.Quarantined.EpochEntry",
  () => [
    { no: 1, name: "unbonding_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "scheduled", kind: "message", T: Quarantined_Scheduled },
  ],
  {localName: "Quarantined_EpochEntry"},
);

/**
 * @generated from message penumbra.chain.Slashed
 */
export const Slashed = proto3.makeMessageType(
  "penumbra.chain.Slashed",
  () => [
    { no: 1, name: "validators", kind: "message", T: IdentityKey, repeated: true },
  ],
);

