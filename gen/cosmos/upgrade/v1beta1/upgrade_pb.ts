// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file cosmos/upgrade/v1beta1/upgrade.proto (package cosmos.upgrade.v1beta1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, protoInt64, Timestamp} from "@bufbuild/protobuf";

/**
 * Plan specifies information about a planned upgrade and when it should occur.
 *
 * @generated from message cosmos.upgrade.v1beta1.Plan
 */
export class Plan extends Message<Plan> {
  /**
   * Sets the name for the upgrade. This name will be used by the upgraded
   * version of the software to apply any special "on-upgrade" commands during
   * the first BeginBlock method after the upgrade is applied. It is also used
   * to detect whether a software version can handle a given upgrade. If no
   * upgrade handler with this name has been set in the software, it will be
   * assumed that the software is out-of-date when the upgrade Time or Height is
   * reached and the software will exit.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The time after which the upgrade must be performed.
   * Leave set to its zero value to use a pre-defined Height instead.
   *
   * @generated from field: google.protobuf.Timestamp time = 2;
   */
  time?: Timestamp;

  /**
   * The height at which the upgrade must be performed.
   * Only used if Time is not set.
   *
   * @generated from field: int64 height = 3;
   */
  height = protoInt64.zero;

  /**
   * Any application specific upgrade info to be included on-chain
   * such as a git commit that validators could automatically upgrade to
   *
   * @generated from field: string info = 4;
   */
  info = "";

  constructor(data?: PartialMessage<Plan>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "cosmos.upgrade.v1beta1.Plan";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "time", kind: "message", T: Timestamp },
    { no: 3, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plan {
    return new Plan().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plan {
    return new Plan().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plan {
    return new Plan().fromJsonString(jsonString, options);
  }

  static equals(a: Plan | PlainMessage<Plan> | undefined, b: Plan | PlainMessage<Plan> | undefined): boolean {
    return proto3.util.equals(Plan, a, b);
  }
}

/**
 * SoftwareUpgradeProposal is a gov Content type for initiating a software
 * upgrade.
 *
 * @generated from message cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
 */
export class SoftwareUpgradeProposal extends Message<SoftwareUpgradeProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: cosmos.upgrade.v1beta1.Plan plan = 3;
   */
  plan?: Plan;

  constructor(data?: PartialMessage<SoftwareUpgradeProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "cosmos.upgrade.v1beta1.SoftwareUpgradeProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "plan", kind: "message", T: Plan },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SoftwareUpgradeProposal {
    return new SoftwareUpgradeProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SoftwareUpgradeProposal {
    return new SoftwareUpgradeProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SoftwareUpgradeProposal {
    return new SoftwareUpgradeProposal().fromJsonString(jsonString, options);
  }

  static equals(a: SoftwareUpgradeProposal | PlainMessage<SoftwareUpgradeProposal> | undefined, b: SoftwareUpgradeProposal | PlainMessage<SoftwareUpgradeProposal> | undefined): boolean {
    return proto3.util.equals(SoftwareUpgradeProposal, a, b);
  }
}

/**
 * CancelSoftwareUpgradeProposal is a gov Content type for cancelling a software
 * upgrade.
 *
 * @generated from message cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
 */
export class CancelSoftwareUpgradeProposal extends Message<CancelSoftwareUpgradeProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  constructor(data?: PartialMessage<CancelSoftwareUpgradeProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelSoftwareUpgradeProposal {
    return new CancelSoftwareUpgradeProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelSoftwareUpgradeProposal {
    return new CancelSoftwareUpgradeProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelSoftwareUpgradeProposal {
    return new CancelSoftwareUpgradeProposal().fromJsonString(jsonString, options);
  }

  static equals(a: CancelSoftwareUpgradeProposal | PlainMessage<CancelSoftwareUpgradeProposal> | undefined, b: CancelSoftwareUpgradeProposal | PlainMessage<CancelSoftwareUpgradeProposal> | undefined): boolean {
    return proto3.util.equals(CancelSoftwareUpgradeProposal, a, b);
  }
}

