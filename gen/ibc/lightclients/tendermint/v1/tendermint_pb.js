// @generated by protoc-gen-es v0.1.1 with parameter "target=js"
// @generated from file ibc/lightclients/tendermint/v1/tendermint.proto (package ibc.lightclients.tendermint.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {Duration, proto3, Timestamp} from "@bufbuild/protobuf";
import {Height} from "../../../core/client/v1/client_pb.js";
import {ProofSpec} from "../../../../proofs_pb.js";
import {MerkleRoot} from "../../../core/commitment/v1/commitment_pb.js";
import {SignedHeader} from "../../../../tendermint/types/types_pb.js";
import {ValidatorSet} from "../../../../tendermint/types/validator_pb.js";

/**
 * ClientState from Tendermint tracks the current validator set, latest height,
 * and a possible frozen height.
 *
 * @generated from message ibc.lightclients.tendermint.v1.ClientState
 */
export const ClientState = proto3.makeMessageType(
  "ibc.lightclients.tendermint.v1.ClientState",
  () => [
    { no: 1, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "trust_level", kind: "message", T: Fraction },
    { no: 3, name: "trusting_period", kind: "message", T: Duration },
    { no: 4, name: "unbonding_period", kind: "message", T: Duration },
    { no: 5, name: "max_clock_drift", kind: "message", T: Duration },
    { no: 6, name: "frozen_height", kind: "message", T: Height },
    { no: 7, name: "latest_height", kind: "message", T: Height },
    { no: 8, name: "proof_specs", kind: "message", T: ProofSpec, repeated: true },
    { no: 9, name: "upgrade_path", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "allow_update_after_expiry", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "allow_update_after_misbehaviour", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * ConsensusState defines the consensus state from Tendermint.
 *
 * @generated from message ibc.lightclients.tendermint.v1.ConsensusState
 */
export const ConsensusState = proto3.makeMessageType(
  "ibc.lightclients.tendermint.v1.ConsensusState",
  () => [
    { no: 1, name: "timestamp", kind: "message", T: Timestamp },
    { no: 2, name: "root", kind: "message", T: MerkleRoot },
    { no: 3, name: "next_validators_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Misbehaviour is a wrapper over two conflicting Headers
 * that implements Misbehaviour interface expected by ICS-02
 *
 * @generated from message ibc.lightclients.tendermint.v1.Misbehaviour
 */
export const Misbehaviour = proto3.makeMessageType(
  "ibc.lightclients.tendermint.v1.Misbehaviour",
  () => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "header_1", kind: "message", T: Header },
    { no: 3, name: "header_2", kind: "message", T: Header },
  ],
);

/**
 * Header defines the Tendermint client consensus Header.
 * It encapsulates all the information necessary to update from a trusted
 * Tendermint ConsensusState. The inclusion of TrustedHeight and
 * TrustedValidators allows this update to process correctly, so long as the
 * ConsensusState for the TrustedHeight exists, this removes race conditions
 * among relayers The SignedHeader and ValidatorSet are the new untrusted update
 * fields for the client. The TrustedHeight is the height of a stored
 * ConsensusState on the client that will be used to verify the new untrusted
 * header. The Trusted ConsensusState must be within the unbonding period of
 * current time in order to correctly verify, and the TrustedValidators must
 * hash to TrustedConsensusState.NextValidatorsHash since that is the last
 * trusted validator set at the TrustedHeight.
 *
 * @generated from message ibc.lightclients.tendermint.v1.Header
 */
export const Header = proto3.makeMessageType(
  "ibc.lightclients.tendermint.v1.Header",
  () => [
    { no: 1, name: "signed_header", kind: "message", T: SignedHeader },
    { no: 2, name: "validator_set", kind: "message", T: ValidatorSet },
    { no: 3, name: "trusted_height", kind: "message", T: Height },
    { no: 4, name: "trusted_validators", kind: "message", T: ValidatorSet },
  ],
);

/**
 * Fraction defines the protobuf message type for tmmath.Fraction that only
 * supports positive values.
 *
 * @generated from message ibc.lightclients.tendermint.v1.Fraction
 */
export const Fraction = proto3.makeMessageType(
  "ibc.lightclients.tendermint.v1.Fraction",
  () => [
    { no: 1, name: "numerator", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "denominator", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

