// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file ibc/lightclients/localhost/v1/localhost.proto (package ibc.lightclients.localhost.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import {Height} from "../../../core/client/v1/client_pb.js";

/**
 * ClientState defines a loopback (localhost) client. It requires (read-only)
 * access to keys outside the client prefix.
 *
 * @generated from message ibc.lightclients.localhost.v1.ClientState
 */
export class ClientState extends Message<ClientState> {
  /**
   * self chain ID
   *
   * @generated from field: string chain_id = 1;
   */
  chainId = "";

  /**
   * self latest block height
   *
   * @generated from field: ibc.core.client.v1.Height height = 2;
   */
  height?: Height;

  constructor(data?: PartialMessage<ClientState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ibc.lightclients.localhost.v1.ClientState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "height", kind: "message", T: Height },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientState {
    return new ClientState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientState {
    return new ClientState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientState {
    return new ClientState().fromJsonString(jsonString, options);
  }

  static equals(a: ClientState | PlainMessage<ClientState> | undefined, b: ClientState | PlainMessage<ClientState> | undefined): boolean {
    return proto3.util.equals(ClientState, a, b);
  }
}

