// @generated by protoc-gen-es v0.1.1 with parameter "target=js"
// @generated from file ibc/core/connection/v1/connection.proto (package ibc.core.connection.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {proto3} from "@bufbuild/protobuf";
import {MerklePrefix} from "../../commitment/v1/commitment_pb.js";

/**
 * State defines if a connection is in one of the following states:
 * INIT, TRYOPEN, OPEN or UNINITIALIZED.
 *
 * @generated from enum ibc.core.connection.v1.State
 */
export const State = proto3.makeEnum(
  "ibc.core.connection.v1.State",
  [
    {no: 0, name: "STATE_UNINITIALIZED_UNSPECIFIED", localName: "UNINITIALIZED_UNSPECIFIED"},
    {no: 1, name: "STATE_INIT", localName: "INIT"},
    {no: 2, name: "STATE_TRYOPEN", localName: "TRYOPEN"},
    {no: 3, name: "STATE_OPEN", localName: "OPEN"},
  ],
);

/**
 * ConnectionEnd defines a stateful object on a chain connected to another
 * separate one.
 * NOTE: there must only be 2 defined ConnectionEnds to establish
 * a connection between two chains.
 *
 * @generated from message ibc.core.connection.v1.ConnectionEnd
 */
export const ConnectionEnd = proto3.makeMessageType(
  "ibc.core.connection.v1.ConnectionEnd",
  () => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "versions", kind: "message", T: Version, repeated: true },
    { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(State) },
    { no: 4, name: "counterparty", kind: "message", T: Counterparty },
    { no: 5, name: "delay_period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * IdentifiedConnection defines a connection with additional connection
 * identifier field.
 *
 * @generated from message ibc.core.connection.v1.IdentifiedConnection
 */
export const IdentifiedConnection = proto3.makeMessageType(
  "ibc.core.connection.v1.IdentifiedConnection",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "versions", kind: "message", T: Version, repeated: true },
    { no: 4, name: "state", kind: "enum", T: proto3.getEnumType(State) },
    { no: 5, name: "counterparty", kind: "message", T: Counterparty },
    { no: 6, name: "delay_period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Counterparty defines the counterparty chain associated with a connection end.
 *
 * @generated from message ibc.core.connection.v1.Counterparty
 */
export const Counterparty = proto3.makeMessageType(
  "ibc.core.connection.v1.Counterparty",
  () => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "prefix", kind: "message", T: MerklePrefix },
  ],
);

/**
 * ClientPaths define all the connection paths for a client state.
 *
 * @generated from message ibc.core.connection.v1.ClientPaths
 */
export const ClientPaths = proto3.makeMessageType(
  "ibc.core.connection.v1.ClientPaths",
  () => [
    { no: 1, name: "paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * ConnectionPaths define all the connection paths for a given client state.
 *
 * @generated from message ibc.core.connection.v1.ConnectionPaths
 */
export const ConnectionPaths = proto3.makeMessageType(
  "ibc.core.connection.v1.ConnectionPaths",
  () => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Version defines the versioning scheme used to negotiate the IBC verison in
 * the connection handshake.
 *
 * @generated from message ibc.core.connection.v1.Version
 */
export const Version = proto3.makeMessageType(
  "ibc.core.connection.v1.Version",
  () => [
    { no: 1, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "features", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * Params defines the set of Connection parameters.
 *
 * @generated from message ibc.core.connection.v1.Params
 */
export const Params = proto3.makeMessageType(
  "ibc.core.connection.v1.Params",
  () => [
    { no: 1, name: "max_expected_time_per_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

