// @generated by protoc-gen-es v0.1.1 with parameter "target=js"
// @generated from file ibc/core/channel/v1/genesis.proto (package ibc.core.channel.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {proto3} from "@bufbuild/protobuf";
import {IdentifiedChannel, PacketState} from "./channel_pb.js";

/**
 * GenesisState defines the ibc channel submodule's genesis state.
 *
 * @generated from message ibc.core.channel.v1.GenesisState
 */
export const GenesisState = proto3.makeMessageType(
  "ibc.core.channel.v1.GenesisState",
  () => [
    { no: 1, name: "channels", kind: "message", T: IdentifiedChannel, repeated: true },
    { no: 2, name: "acknowledgements", kind: "message", T: PacketState, repeated: true },
    { no: 3, name: "commitments", kind: "message", T: PacketState, repeated: true },
    { no: 4, name: "receipts", kind: "message", T: PacketState, repeated: true },
    { no: 5, name: "send_sequences", kind: "message", T: PacketSequence, repeated: true },
    { no: 6, name: "recv_sequences", kind: "message", T: PacketSequence, repeated: true },
    { no: 7, name: "ack_sequences", kind: "message", T: PacketSequence, repeated: true },
    { no: 8, name: "next_channel_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * PacketSequence defines the genesis type necessary to retrieve and store
 * next send and receive sequences.
 *
 * @generated from message ibc.core.channel.v1.PacketSequence
 */
export const PacketSequence = proto3.makeMessageType(
  "ibc.core.channel.v1.PacketSequence",
  () => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

