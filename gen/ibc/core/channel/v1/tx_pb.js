// @generated by protoc-gen-es v0.1.1 with parameter "target=js"
// @generated from file ibc/core/channel/v1/tx.proto (package ibc.core.channel.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {proto3} from "@bufbuild/protobuf";
import {Channel, Packet} from "./channel_pb.js";
import {Height} from "../../client/v1/client_pb.js";

/**
 * MsgChannelOpenInit defines an sdk.Msg to initialize a channel handshake. It
 * is called by a relayer on Chain A.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelOpenInit
 */
export const MsgChannelOpenInit = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgChannelOpenInit",
  () => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel", kind: "message", T: Channel },
    { no: 3, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * MsgChannelOpenInitResponse defines the Msg/ChannelOpenInit response type.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelOpenInitResponse
 */
export const MsgChannelOpenInitResponse = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgChannelOpenInitResponse",
  () => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * MsgChannelOpenInit defines a msg sent by a Relayer to try to open a channel
 * on Chain B. The version field within the Channel field has been deprecated. Its
 * value will be ignored by core IBC.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelOpenTry
 */
export const MsgChannelOpenTry = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgChannelOpenTry",
  () => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "previous_channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "channel", kind: "message", T: Channel },
    { no: 4, name: "counterparty_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "proof_init", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "proof_height", kind: "message", T: Height },
    { no: 7, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * MsgChannelOpenTryResponse defines the Msg/ChannelOpenTry response type.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelOpenTryResponse
 */
export const MsgChannelOpenTryResponse = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgChannelOpenTryResponse",
  [],
);

/**
 * MsgChannelOpenAck defines a msg sent by a Relayer to Chain A to acknowledge
 * the change of channel state to TRYOPEN on Chain B.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelOpenAck
 */
export const MsgChannelOpenAck = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgChannelOpenAck",
  () => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "counterparty_channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "counterparty_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "proof_try", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "proof_height", kind: "message", T: Height },
    { no: 7, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * MsgChannelOpenAckResponse defines the Msg/ChannelOpenAck response type.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelOpenAckResponse
 */
export const MsgChannelOpenAckResponse = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgChannelOpenAckResponse",
  [],
);

/**
 * MsgChannelOpenConfirm defines a msg sent by a Relayer to Chain B to
 * acknowledge the change of channel state to OPEN on Chain A.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelOpenConfirm
 */
export const MsgChannelOpenConfirm = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgChannelOpenConfirm",
  () => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "proof_ack", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "proof_height", kind: "message", T: Height },
    { no: 5, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * MsgChannelOpenConfirmResponse defines the Msg/ChannelOpenConfirm response
 * type.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelOpenConfirmResponse
 */
export const MsgChannelOpenConfirmResponse = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgChannelOpenConfirmResponse",
  [],
);

/**
 * MsgChannelCloseInit defines a msg sent by a Relayer to Chain A
 * to close a channel with Chain B.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelCloseInit
 */
export const MsgChannelCloseInit = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgChannelCloseInit",
  () => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * MsgChannelCloseInitResponse defines the Msg/ChannelCloseInit response type.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelCloseInitResponse
 */
export const MsgChannelCloseInitResponse = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgChannelCloseInitResponse",
  [],
);

/**
 * MsgChannelCloseConfirm defines a msg sent by a Relayer to Chain B
 * to acknowledge the change of channel state to CLOSED on Chain A.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelCloseConfirm
 */
export const MsgChannelCloseConfirm = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgChannelCloseConfirm",
  () => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "proof_init", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "proof_height", kind: "message", T: Height },
    { no: 5, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * MsgChannelCloseConfirmResponse defines the Msg/ChannelCloseConfirm response
 * type.
 *
 * @generated from message ibc.core.channel.v1.MsgChannelCloseConfirmResponse
 */
export const MsgChannelCloseConfirmResponse = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgChannelCloseConfirmResponse",
  [],
);

/**
 * MsgRecvPacket receives incoming IBC packet
 *
 * @generated from message ibc.core.channel.v1.MsgRecvPacket
 */
export const MsgRecvPacket = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgRecvPacket",
  () => [
    { no: 1, name: "packet", kind: "message", T: Packet },
    { no: 2, name: "proof_commitment", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
    { no: 4, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * MsgRecvPacketResponse defines the Msg/RecvPacket response type.
 *
 * @generated from message ibc.core.channel.v1.MsgRecvPacketResponse
 */
export const MsgRecvPacketResponse = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgRecvPacketResponse",
  [],
);

/**
 * MsgTimeout receives timed-out packet
 *
 * @generated from message ibc.core.channel.v1.MsgTimeout
 */
export const MsgTimeout = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgTimeout",
  () => [
    { no: 1, name: "packet", kind: "message", T: Packet },
    { no: 2, name: "proof_unreceived", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
    { no: 4, name: "next_sequence_recv", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * MsgTimeoutResponse defines the Msg/Timeout response type.
 *
 * @generated from message ibc.core.channel.v1.MsgTimeoutResponse
 */
export const MsgTimeoutResponse = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgTimeoutResponse",
  [],
);

/**
 * MsgTimeoutOnClose timed-out packet upon counterparty channel closure.
 *
 * @generated from message ibc.core.channel.v1.MsgTimeoutOnClose
 */
export const MsgTimeoutOnClose = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgTimeoutOnClose",
  () => [
    { no: 1, name: "packet", kind: "message", T: Packet },
    { no: 2, name: "proof_unreceived", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_close", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "proof_height", kind: "message", T: Height },
    { no: 5, name: "next_sequence_recv", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * MsgTimeoutOnCloseResponse defines the Msg/TimeoutOnClose response type.
 *
 * @generated from message ibc.core.channel.v1.MsgTimeoutOnCloseResponse
 */
export const MsgTimeoutOnCloseResponse = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgTimeoutOnCloseResponse",
  [],
);

/**
 * MsgAcknowledgement receives incoming IBC acknowledgement
 *
 * @generated from message ibc.core.channel.v1.MsgAcknowledgement
 */
export const MsgAcknowledgement = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgAcknowledgement",
  () => [
    { no: 1, name: "packet", kind: "message", T: Packet },
    { no: 2, name: "acknowledgement", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_acked", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "proof_height", kind: "message", T: Height },
    { no: 5, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * MsgAcknowledgementResponse defines the Msg/Acknowledgement response type.
 *
 * @generated from message ibc.core.channel.v1.MsgAcknowledgementResponse
 */
export const MsgAcknowledgementResponse = proto3.makeMessageType(
  "ibc.core.channel.v1.MsgAcknowledgementResponse",
  [],
);

