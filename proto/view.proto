syntax = "proto3";
package penumbra.view;

option go_package = "github.com/penumbra-zone/penumbra/proto/go-proto";

import "transaction.proto";
import "crypto.proto";
import "chain.proto";
import "dex.proto";

// The view protocol is used by a view client, who wants to do some
// transaction-related actions, to request data from a view service, which is
// responsible for synchronizing and scanning the public chain state with one or
// more full viewing keys.
//
// View protocol requests include a hash of the full viewing key, used to
// identify which set of data to query.  This also works as a pseudo-auth system
// (assuming transport security, the client has to know the FVK to request its
// data).  (TODO: refine this)
service ViewProtocol {
    // Get current status of chain sync
    rpc Status(StatusRequest) returns (StatusResponse);

    // Stream sync status updates until the view service has caught up with the chain.
    rpc StatusStream(StatusStreamRequest) returns (stream StatusStreamResponse);

    // Queries for notes that have been accepted by the chain.
    rpc Notes(NotesRequest) returns (stream SpendableNoteRecord);

    // Queries for notes that have been quarantined until the end of an unbonding period.
    rpc QuarantinedNotes(QuarantinedNotesRequest) returns (stream QuarantinedNoteRecord);

    // Returns authentication paths for the given note commitments.
    //
    // This method takes a batch of input commitments, rather than just one, so
    // that the client can get a consistent set of authentication paths to a
    // common root.  (Otherwise, if a client made multiple requests, the wallet
    // service could have advanced the note commitment tree state between queries).
    rpc Witness(WitnessRequest) returns (transaction.WitnessData);

    // Queries for assets.
    rpc Assets(AssetRequest) returns (stream crypto.Asset);

    // Query for the current chain parameters.
    rpc ChainParameters(ChainParamsRequest) returns (chain.ChainParameters);

    // Query for the current FMD parameters.
    rpc FMDParameters(FMDParametersRequest) returns (chain.FmdParameters);

    // Query for a note by its note commitment, optionally waiting until the note is detected.
    rpc NoteByCommitment(NoteByCommitmentRequest) returns (SpendableNoteRecord);

    // Query for whether a nullifier has been spent, optionally waiting until it is spent.
    rpc NullifierStatus(NullifierStatusRequest) returns (NullifierStatusResponse);

    // Query for the transaction hashes in the given range of blocks.
    rpc TransactionHashes(TransactionsRequest) returns (stream TransactionHashStreamResponse);
    // Query for the full transactions in the given range of blocks.
    rpc Transactions(TransactionsRequest) returns (stream TransactionStreamResponse);
}

message TransactionsRequest {
    // If present, return only transactions after this height.
    optional uint64 start_height = 1;
    // If present, return only transactions before this height.
    optional uint64 end_height = 2;
}

message TransactionHashStreamResponse {
    uint64 block_height = 1;
    bytes tx_hash = 2;
}

// A streaming full transaction response
message TransactionStreamResponse {
    uint64 block_height = 1;
    bytes tx_hash = 2;
    transaction.Transaction tx = 3;
}

message NoteByCommitmentRequest {
  crypto.AccountID account_id = 1;
  crypto.NoteCommitment note_commitment = 2;
  // If set to true, waits to return until the requested note is detected.
  bool await_detection = 3;
}

// Requests the current chain parameters from the view service.
message ChainParamsRequest {
}

// Requests the current FMD parameters from the view service.
message FMDParametersRequest {
}

// Requests all assets known to the view service.
message AssetRequest {
}

// Requests sync status of the view service.
message StatusRequest {
    // Identifies the FVK for the notes to query.
    crypto.AccountID account_id = 1;
}

// Returns the status of the view service and whether it is synchronized with the chain state.
message StatusResponse {
    // The height the view service has synchronized to so far
    uint64 sync_height = 1;
    // Whether the view service is catching up with the chain state
    bool catching_up = 2;
}

// Requests streaming updates on the sync height until the view service is synchronized.
message StatusStreamRequest {
    // Identifies the FVK for the notes to query.
    crypto.AccountID account_id = 1;
}

// A streaming sync status update
message StatusStreamResponse {
    uint64 latest_known_block_height = 1;
    uint64 sync_height = 2;
}

// A note plaintext with associated metadata about its status.
message SpendableNoteRecord {
    // The note commitment, identifying the note.
    crypto.NoteCommitment note_commitment = 1;
    // The note plaintext itself.
    crypto.Note note = 2;
    // A precomputed decryption of the note's address index.
    crypto.AddressIndex address_index = 3;
    // The note's nullifier.
    crypto.Nullifier nullifier = 4;
    // The height at which the note was created.
    uint64 height_created = 5;
    // Records whether the note was spent (and if so, at what height).
    optional uint64 height_spent = 6;
    // The note position.
    uint64 position = 7;
    // The source of the note (a tx hash or otherwise)
    chain.NoteSource source = 8;
}

// A query for notes known by the view service.
//
// This message uses the fact that all proto fields are optional
// to allow various filtering on the returned notes.
message NotesRequest {
    // Identifies the FVK for the notes to query.
    crypto.AccountID account_id = 1;

    // If set, return spent notes as well as unspent notes.
    bool include_spent = 2;

    // If set, only return notes with the specified asset id.
    crypto.AssetId asset_id = 3;

    // If set, only return notes with the specified address index.
    crypto.AddressIndex address_index = 4;

    // If set, stop returning notes once the total exceeds this amount.
    //
    // Ignored if `asset_id` is unset or if `include_spent` is set.
    uint64 amount_to_spend = 5;
}

message WitnessRequest {
    // Identifies the FVK for the note commitments to query.
    crypto.AccountID account_id = 1;

    // The note commitments to obtain auth paths for.
    repeated crypto.NoteCommitment note_commitments = 2;
}

// The plaintext of a note that has been quarantined until the end of an unbonding period.
message QuarantinedNoteRecord {
    // The note commitment, identifying the note.
    crypto.NoteCommitment note_commitment = 1;
    // The note plaintext itself.
    crypto.Note note = 2;
    // A precomputed decryption of the note's address index.
    crypto.AddressIndex address_index = 3;
    // The height at which the note was created.
    uint64 height_created = 4;
    // The epoch at which the note will exit quarantine, if unbonding is not interrupted by slashing.
    uint64 unbonding_epoch = 5;
    // The validator identity the quarantining is bound to.
    crypto.IdentityKey identity_key = 6;
    // The source of the note (a tx hash or otherwise)
    chain.NoteSource source = 7;
}

// A query for quarantined notes known by the view service.
message QuarantinedNotesRequest {
    // Identifies the FVK for the notes to query.
    crypto.AccountID account_id = 1;
}

message NullifierStatusRequest {
  crypto.AccountID account_id = 1;
  crypto.Nullifier nullifier = 2;
  bool await_detection = 3;
}

message NullifierStatusResponse {
  bool spent = 1;
}