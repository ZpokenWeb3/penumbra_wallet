syntax = "proto3";
package penumbra.dex;
option go_package = "github.com/penumbra-zone/penumbra/proto/go-proto";

import "crypto.proto";

// A transaction action that submits a swap to the dex.
message Swap {
  // Contains the Swap proof.
  bytes proof = 1;
  // MockFlowCiphertext dropped until flow encryption/ABCI++ available
  // // Encrypted amount of asset 1 of the trading pair.
  // MockFlowCiphertext enc_amount_1 = 2;
  // // Encrypted amount of asset 2 of the trading pair.
  // MockFlowCiphertext enc_amount_2 = 3;
  // Encapsulates the authorized fields of the Swap action, used in signing.
  SwapBody body = 4;
}

// A transaction action that obtains assets previously confirmed
// via a Swap transaction. Does not include a spend authorization
// signature, as it is only capable of consuming the NFT from a
// Swap transaction.
message SwapClaim {
  // Contains the SwapClaim proof.
  bytes proof = 1;
  // Encapsulates the authorized fields of the SwapClaim action, used in signing.
  SwapClaimBody body = 2;
}

// Encapsulates the authorized fields of the SwapClaim action, used in signing.
message SwapClaimBody {
  // The nullifier for the Swap NFT to be consumed.
  crypto.Nullifier nullifier = 1;
  // The fee allows `SwapClaim` without an additional `Spend`.
  crypto.Fee fee = 2;
  // Note output for asset 1.
  crypto.NotePayload output_1 = 3;
  // Note output for asset 2.
  crypto.NotePayload output_2 = 4;
  // Input and output amounts, and asset IDs for the assets in the swap.
  BatchSwapOutputData output_data = 6;
  // The epoch duration of the chain when the swap claim took place.
  uint64 epoch_duration = 7;
}

// For storing the list of claimed swaps between the dex and shielded pool components.
message ClaimedSwapList {
  repeated ClaimedSwap claims = 1;
}

// Represents a swap claimed in a particular transaction.
message ClaimedSwap {
  SwapClaimBody claim = 1;
  bytes txid = 2;
}

// The authorized data of a Swap transaction.
message SwapBody {
  // The trading pair to swap.
  TradingPair trading_pair = 1;
  // @exclude These will become commitments when flow encryption/ABCI++ are available
  // The amount for asset 1.
  uint64 delta_1_i = 2;
  // The amount for asset 2.
  uint64 delta_2_i = 3;
  // @exclude // Commitment to the amount for asset 1 (delta 1).
  // @exclude bytes delta_1_commitment = 2;
  // @exclude // Commitment to the amount for asset 2 (delta 2).
  // @exclude bytes delta_2_commitment = 3;
  // A commitment to a prepaid fee for the future SwapClaim.
  bytes fee_commitment = 4;
  // Swap NFT recording the user's contribution.
  crypto.NotePayload swap_nft = 5;
  // Encrypted version of the original `Swap`, symmetrically encrypted w/ viewing key.
  bytes swap_ciphertext = 6;
}

message SwapPlaintext {
    // The trading pair to swap.
    TradingPair trading_pair = 1;
    // User's input amount of asset 1
    uint64 delta_1_i = 2;
    // User's input amount of asset 2
    uint64 delta_2_i = 3;
    // Pre-paid fee to claim the swap
    crypto.Fee claim_fee = 4;
    // Address that will claim the swap outputs via SwapClaim.
    crypto.Address claim_address = 5;
}

message MockFlowCiphertext {
    // Represents this transaction's contribution to flow's value.
    uint64 value = 1;
}

// Holds two asset IDs. Ordering doesn't reflect trading direction, however
// since the `AssetId` type is `Ord + PartialOrd`, there can be only one
// `TradingPair` per asset pair.
message TradingPair {
  // The first asset of the pair.
  crypto.AssetId asset_1 = 1;
  // The second asset of the pair.
  crypto.AssetId asset_2 = 2;
}

// Records the result of a batch swap on-chain.
//
// Used as a public input to a swap claim proof, as it implies the effective
// clearing price for the batch.
message BatchSwapOutputData {
  // The total amount of asset 1 that was input to the batch swap.
  uint64 delta_1 = 1;
  // The total amount of asset 2 that was input to the batch swap.
  uint64 delta_2 = 2;
  // The total amount of asset 1 that was output from the batch swap.
  uint64 lambda_1 = 3;
  // The total amount of asset 2 that was output from the batch swap.
  uint64 lambda_2 = 4;
  // Whether the swap succeeded or not.
  bool success = 5;
  // The height for which the batch swap data is valid.
  uint64 height = 6;
  // The trading pair associated with the batch swap.
  TradingPair trading_pair = 7;
}

// The data describing a trading function.
//
// This implicitly treats the trading function as being between assets 1 and 2,
// without specifying what those assets are, to avoid duplicating data (each
// asset ID alone is twice the size of the trading function).
//
// The trading function is `phi(R) = p*R_1 + q*R_2`.
// This is used as a CFMM with constant `k` and fee `fee` (gamma).
message TradingFunction {
  // NOTE: the use of floats here is a placeholder, so we can stub out the
  // implementation and then decide what type of fixed-point, deterministic
  // arithmetic should be used.
  double fee = 2;
  double k = 3;
  double p = 4;
  double q = 5;
}

// The reserves of a position.
//
// Like a position, this implicitly treats the trading function as being
// between assets 1 and 2, without specifying what those assets are, to avoid
// duplicating data (each asset ID alone is four times the size of the
// reserves).
message Reserves {
  uint64 r1 = 1;
  uint64 r2 = 2;
}

// Data identifying a position.
message Position {
  TradingPair pair = 1;
  TradingFunction phi = 2;
  // A random value used to disambiguate different positions with the exact same
  // trading function.  The chain should reject newly created positions with the
  // same nonce as an existing position.  This ensures that `PositionId`s will
  // be unique, and allows us to track position ownership with a
  // sequence of stateful NFTs based on the `PositionId`.
  bytes nonce = 3;
}

// A hash of a `Position`.
message PositionId {
  bytes inner = 1;
}

// The state of a position.
message PositionState {
  enum PositionStateEnum {
    // The position has been opened, is active, has reserves and accumulated
    // fees, and can be traded against.
    OPENED = 0;
    // The position has been closed, is inactive and can no longer be traded
    // against, but still has reserves and accumulated fees.
    CLOSED = 1;
    // The final reserves and accumulated fees have been withdrawn, leaving an
    // empty, inactive position awaiting (possible) retroactive rewards.
    WITHDRAWN = 2;
    // Any retroactive rewards have been claimed. The position is now an inert,
    // historical artefact.
    CLAIMED = 3;
  }
  PositionStateEnum state = 1;
}

// An LPNFT tracking both ownership and state of a position.
//
// Tracking the state as part of the LPNFT means that all LP-related actions can
// be authorized by spending funds: a state transition (e.g., closing a
// position) is modeled as spending an "open position LPNFT" and minting a
// "closed position LPNFT" for the same (globally unique) position ID.
//
// This means that the LP mechanics can be agnostic to the mechanism used to
// record custody and spend authorization.  For instance, they can be recorded
// in the shielded pool, where custody is based on off-chain keys, or they could
// be recorded in a programmatic on-chain account (in the future, e.g., to
// support interchain accounts).  This also means that LP-related actions don't
// require any cryptographic implementation (proofs, signatures, etc), other
// than hooking into the value commitment mechanism used for transaction
// balances.
message LpNft {
  PositionId position_id = 1;
  PositionState state = 2;
}

// A transaction action that opens a new position.
//
// This action's contribution to the transaction's value balance is to consume
// the initial reserves and contribute an opened position NFT.
message PositionOpen {
  // Contains the data defining the position, sufficient to compute its `PositionId`.
  //
  // Positions are immutable, so the `PositionData` (and hence the `PositionId`)
  // are unchanged over the entire lifetime of the position.
  Position position = 1;
  // The initial reserves of the position.  Unlike the `PositionData`, the
  // reserves evolve over time as trades are executed against the position.
  Reserves initial_reserves = 2;
}

// A transaction action that closes a position.
//
// This action's contribution to the transaction's value balance is to consume
// an opened position NFT and contribute a closed position NFT.
//
// Closing a position does not immediately withdraw funds, because Penumbra
// transactions (like any ZK transaction model) are early-binding: the prover
// must know the state transition they prove knowledge of, and they cannot know
// the final reserves with certainty until after the position has been deactivated.
message PositionClose {
  PositionId position_id = 1;
}

// A transaction action that withdraws funds from a closed position.
//
// This action's contribution to the transaction's value balance is to consume a
// closed position NFT and contribute a withdrawn position NFT, as well as all
// of the funds that were in the position at the time of closing.
message PositionWithdraw {
  PositionId position_id = 1;
  // A transparent (zero blinding factor) commitment to the position's final reserves and fees.
  //
  // The chain will check this commitment by recomputing it with the on-chain state.
  crypto.ValueCommitment reserves_commitment = 2;
}

// A transaction action that claims retroactive rewards for a historical
// position.
//
// This action's contribution to the transaction's value balance is to consume a
// withdrawn position NFT and contribute its reward balance.
message PositionRewardClaim {
  PositionId position_id = 1;
  // A transparent (zero blinding factor) commitment to the position's accumulated rewards.
  //
  // The chain will check this commitment by recomputing it with the on-chain state.
  crypto.ValueCommitment rewards_commitment = 2;
}
